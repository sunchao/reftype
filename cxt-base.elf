%%% Explicit Type Context
%%% $Id: cxt-base.elf,v 1.1 2013/06/01 17:11:01 csun Exp csun $


%% Context Value

cxtv : type. %name cxtv CV.

cxtv/ : object -> ty -> cxtv.

eq : cxtv -> cxtv -> type.

eq/ : eq CV CV.


%{%
#define WORLDS objvar | fracvar
#define EQ eq
BEGIN_ELF
#include "EQ.i"
END_ELF
#undef EQ
%}%


%{%
#define WORLDS objvar | fracvar
#define data cxtv
BEGIN_ELF
%abbrev cxtv`eq = eq.
%abbrev cxtv`eq/ = eq/.
%abbrev cxtv`meta-eq = meta-eq.
%abbrev cxtv`false-implies-eq = false-implies-eq.
%abbrev cxtv`eq-reflexive = eq-reflexive.
%abbrev cxtv`eq-symmetric = eq-symmetric.
%abbrev cxtv`eq-transitive = eq-transitive.

%theorem cxtv-eq-inversion :
    forall* {O1} {O2} {T1} {T2}
    forall  {T1=T2: cxtv`eq (cxtv/ O1 T1) (cxtv/ O2 T2)}
    exists  {EQ: object`eq O1 O2} {EQ: ty`eq T1 T2}
    true.

- : cxtv-eq-inversion cxtv`eq/ object`eq/ ty`eq/.

%worlds (WORLDS) (cxtv-eq-inversion _ _ _).
%total  {} (cxtv-eq-inversion _ _ _).


#include "map-base.elf"
#include "map-domain.elf"
END_ELF
#undef data
%}%



%%% Extra Definitions

cxt`lookup-object : map -> object -> ty -> nat -> type.

cxt`lookup-object/
  : lookup B N (cxtv/ O T)
    -> cxt`lookup-object B O T N.


%%% Extra Theorems


%%% TODO

%%% Renamings

%abbrev cxt = map.
%abbrev cxt/nil = map/0.
%abbrev cxt/cons = map/+.
