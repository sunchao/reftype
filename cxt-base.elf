%%% Context (Type Environment)
%%% nat -> (object,ty)

cxt-info : type. %name cxt-info CI.

cxt-info/ : object -> ty -> cxt-info.

eq : cxt-info -> cxt-info -> type.

eq/ : eq CI CI.

%{%
#define EQ eq
#define WORLDS gtermvar
BEGIN_ELF
#include "EQ.i"
END_ELF
#undef EQ
%}%

%{%
#define data cxt-info
#define WORLDS gtermvar
BEGIN_ELF
%abbrev cxt-info`eq = eq.
%abbrev cxt-info`eq/ = eq/.
%abbrev cxt-info`meta-eq = meta-eq.
%abbrev cxt-info`false-implies-eq = false-implies-eq.
%abbrev cxt-info`eq-reflexive = eq-reflexive.
%abbrev cxt-info`eq-symmetric = eq-symmetric.
%abbrev cxt-info`eq-transitive = eq-transitive.

%theorem cxt-info-preserves-eq
  : forall* {O1} {O2} {T1} {T2}
    forall {OE: object`eq O1 O2} {TE: ty`eq T1 T2}
    exists {TE: cxt-info`eq (cxt-info/ O1 T1) (cxt-info/ O2 T2)}
    true.

- : cxt-info-preserves-eq object`eq/ ty`eq/ cxt-info`eq/.

%worlds (WORLDS) (cxt-info-preserves-eq _ _ _).
%total { } (cxt-info-preserves-eq _ _ _).


%theorem cxt-info-eq-inversion :
    forall* {O1} {O2} {T1} {T2}
    forall  {T1=T2: cxt-info`eq (cxt-info/ O1 T1) (cxt-info/ O2 T2)}
    exists  {OE: object`eq O1 O2} {TE: ty`eq T1 T2}
    true.

- : cxt-info-eq-inversion cxt-info`eq/ object`eq/ ty`eq/.

%worlds (WORLDS) (cxt-info-eq-inversion _ _ _).
%total  {} (cxt-info-eq-inversion _ _ _).

#include "map-base.elf"
#include "map-domain.elf"
END_ELF
#undef data
#undef WORLDS
%}%

%%% Exports

%abbrev cxt = map.
%abbrev cxt/0 = map/0.
%abbrev cxt/+ = map/+.


%%% Additional Theorems

cxt`lookup-obj : cxt -> object -> nat -> ty -> type.

cxt`lookup-obj/ : lookup B N (cxt-info/ O T)
                  -> cxt`lookup-obj B O N T.

%theorem cxt`lookup-obj-implies-lookup
  : forall* {B} {O} {N} {T}
    forall {BLO: cxt`lookup-obj B O N T}
    exists {BL: lookup B N (cxt-info/ O T)}
    true.

- : cxt`lookup-obj-implies-lookup (cxt`lookup-obj/ BL) BL.

%worlds (gtermvar) (cxt`lookup-obj-implies-lookup _ _).
%total { } (cxt`lookup-obj-implies-lookup _ _).


%theorem lookup-no-var
  : forall* {B} {N} {NN} {A} {C} {OF:object -> object}
    forall {BL: {x} lookup B N (cxt-info/ (OF x) (ty/ NN A C))}
    exists {O} {OE: {x} object`eq (OF x) O}
    {BL: lookup B N (cxt-info/ O (ty/ NN A C))}
    true.

- : lookup-no-var ([x] lookup/> (LP x) P) _ E (lookup/> L P)
    <- lookup-no-var LP _ E L.

- : lookup-no-var ([_] lookup/= nat`eq/) _
    ([_] object`eq/) (lookup/= nat`eq/).

%worlds (gtermvar) (lookup-no-var _ _ _ _).
%total (L) (lookup-no-var L _ _ _).


%theorem lookup-shared-not-shared-implies-false
  : forall* {BF: object -> cxt} {N} {NN} {C} {NN'} {C'} {OF1} {OF2} {A}
    forall {BL: {x} lookup (BF x) N (cxt-info/ (OF1 x) (ty/ NN annot/shared C))}
    {BL1: {x} lookup (BF x) N (cxt-info/ (OF2 x) (ty/ NN' A C'))}
    {NS: not-shared A}
    exists {F:void}
    true.

- : lookup-shared-not-shared-implies-false BL1 BL2 NS F
    <- ({x} lookup-unique (BL1 x) (BL2 x) eq/ nat`eq/ (CIE x))
    <- ({x} cxt-info-eq-inversion (CIE x) (OE x) TE)
    <- ty-eq-inversion TE NNE AE NE
    <- annot`shared-eq-not-shared-implies-false AE NS F.

%worlds (gtermvar) (lookup-shared-not-shared-implies-false _ _ _ _).
%total { } (lookup-shared-not-shared-implies-false _ _ _ _).


%%% Abbrevations