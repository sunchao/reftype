%%% Checking read

%theorem reftyping-ok/read/shared
  : forall* {CM} {PM} {W} {B} {FM} {Pi} {M} {S} {G1}
    {GSP} {NN} {A} {FC} {C} {E} {F} {Out} {M'} {S'} {Q} {Q'} {X}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {TI2: effects2input CM PM B (effects/ M S Q) Pi}
    {TI3: effects2output CM PM B
          (reftype/ nn/yes C targets/shared) (effects/ M S Q) Out}
    {TYE: typing W Pi E Out}
    {CML: clsmap`lookup CM C FM}
    {FML: fldmap`lookup FM F (ty/ NN A FC)}
    {MTAE: make-targets-and-effects targets/shared F X G1 (effects/ M' S' Q')}
    {M'<=M: efxmap`leq M' M}
    {CF: consider-ftype G1 A GSP}
    exists {Out2} {TO: effects2output CM PM B
                       (reftype/ NN FC GSP) (effects/ M S Q) Out2}
    {TYP: typing W Pi (read E F) Out2}
    true.

% 1, the case when field type is shared

- : reftyping-ok/read/shared CM-CM CM2PM
    (XX=>Pi1:effects2input CM PM B (effects/ M S Q) Pi1)
    XX=>Out TYP-E CML FML
    make-targets-and-effects/shared M'<=M consider-ftype/shared
    %{=>}% _ (effects2output/simple T2PF reftype2ty/shared
                simple-targets/shared XM=>Pi B=>Pi1)
    (tTrans2
      (tRead1
        (tTrans2
          (TYP-E)
          (transform/trans
            (TRANS)
            (transform/inside [r]
              (transform/trans3
                (transform/implies
                  (implies/equiv
                    (equiv/transitive
                      (equiv/commute)
                      (equiv/symmetric equiv/associate))))
                (transform/skolem)
                (transform/inside [v]
                  (transform/implies
                    (implies/equiv
                      (equiv/transitive
                        (equiv/combine
                          equiv/distribute equiv/reflexive)
                        (equiv/symmetric equiv/associate)))))))))
        (letTyping/exists [v]
          (letTyping/exists [r]
            (letTyping/base v tRead))))
      (transform/trans
        (transform/inside [r]
          (transform/inside [v]
            (transform/implies
              (implies/trans
                (implies/equiv
                  (equiv/transitive
                    (equiv/combine
                      (equiv/reflexive)
                      (equiv/combine
                        (equiv/reflexive)
                        (equiv/commute)))
                    (equiv/roll3)))
                (implies/combine
                  (implies/reflexive)
                  (implies/trans6
                    (implies/equiv equiv/associate)
                    (implies/combine
                      (implies/trans4
                        (implies/combine
                          (implies/reflexive)
                          (implies/trans
                            (implies/scale (IMP v))
                            (implies/equiv equiv/distribute)))
                        (implies/equiv equiv/associate)
                        (implies/combine
                          (implies/trans
                            (implies/equiv (equiv/symmetric equiv/distribute))
                            (implies/scale (implies/pack v)))
                          (implies/reflexive))
                        (implies/equiv equiv/commute))
                      (implies/reflexive))
                    (implies/equiv (equiv/symmetric equiv/associate))
                    (implies/combine
                      (implies/reflexive)
                      (implies/trans3
                        (implies/equiv equiv/associate)
                        (implies/combine
                          (implies/linear-modus-ponens) implies/reflexive)
                        (implies/equiv equiv/commute)))
                    (implies/combine
                      (DIS v) implies/reflexive)
                    (implies/combine
                      (implies/reflexive)
                      (implies/equiv EQV))))))))
        (transform/rem-unused)))
    <- before-read/shared CM-CM CM2PM CML FML M'<=M XX=>Out
      _ _ _ _ _ T2PF B=>Pi1 _ _ X2Q PP XM1=>Pi1 XM2=>Pi2 TRANS
    <- sharedperm-can-be-duplicated* T2PF IMP
    <- can-scale-from-shared T2PF DIS
    <- efxmap`partition-implies-permission-combine-converse
      PP XM1=>Pi1 XM2=>Pi2 _ XM=>Pi EQV.

% 2, the case when field type is unique

- : reftyping-ok/read/shared CM-CM CM2PM XX=>Pi1 XX=>Out TYP-E CML FML
    make-targets-and-effects/shared M'<=M consider-ftype/unique
    _ (effects2output/unique/+f T2PF X2Q
        (efxmap-min-efx/U efxmap-min-efx/0 MX efxmap`update/0
          efxmap`fresh/0) XM2=>Pi2 XM1=>Pi1 PP
        ([_] set2cond/0) B=>Pi1 (set`size/+ set`size/0))
    (tTrans2
      (tRead1
        (tTrans2
          (TYP-E)
          (transform/trans
            (TRANS)
            (transform/inside [r]
              (transform/trans3
                (transform/implies
                  (implies/equiv
                    (equiv/transitive
                      (equiv/commute)
                      (equiv/symmetric equiv/associate))))
                (transform/skolem)
                (transform/inside [v]
                  (transform/implies
                    (implies/equiv
                      (equiv/transitive
                        (equiv/combine
                          equiv/distribute equiv/reflexive)
                        (equiv/symmetric equiv/associate)))))))))
        (letTyping/exists [v]
          (letTyping/exists [r]
            (letTyping/base v tRead))))
      (transform/trans
        (transform/inside [r]
          (transform/inside [v]
            (transform/trans
              (transform/implies
                (implies/trans7
                  (implies/combine
                    (repack-fldperm v)
                    (implies/combine
                      (implies/reflexive)
                      (implies/equiv
                        (equiv/transitive
                          (equiv/symmetric equiv/associate)
                          (equiv/combine
                            (equiv/reflexive)
                            (equiv/commute))))))
                  (implies/combine
                    (implies/reflexive)
                    (implies/equiv equiv/roll2))
                  (implies/equiv equiv/associate)
                  (implies/combine
                    (implies/chain-implication)
                    (implies/reflexive))
                  (implies/equiv equiv/roll3)
                  (implies/combine
                    (implies/trans
                      (implies/equiv (equiv/symmetric equiv/identity))
                      (implies/combine
                        (implies/reflexive)
                        (implies/trans4
                          (implies/empty2true)
                          (implies/nonlinear bimplies/objequal-reflexive)
                          (implies/equiv (equiv/symmetric equiv/identity))
                          (implies/cond-intro))))
                    (implies/equiv equiv/roll2))
                  (implies/equiv (equiv/symmetric equiv/associate))))
              (transform/gen-exists v))))
        (transform/rem-unused)))
    <- before-read/shared CM-CM CM2PM CML FML M'<=M
      XX=>Out _ _ _ _ _ T2PF B=>Pi1 _ _ X2Q PP XM1=>Pi1 XM2=>Pi2 TRANS
    <- efx/write-is-upper-bound _ MX.

%worlds () (reftyping-ok/read/shared _ _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (reftyping-ok/read/shared _ _ _ _ _ _ _ _ _ _ _ _ _).


% This theorem may be improved.

%theorem reftyping-ok/read/unique
  : forall* {CM} {PM} {W} {B} {FM} {Pi} {M2}
    {GSP} {NN} {A} {FC} {C} {E} {F} {Out} {M} {R} {CS} {CQ} {G1}
    forall {S} {G}
    {CM-B-M: clsmap-cxt-fldset CM B R} {SOC: same-class B S C}
    {LNN: least-nonnull B S nn/yes}
    {CM-CM: clsmap-clsmap CM CM} {CM2PM: clsmap2predmap CM PM}
    {XX=>Out: effects2output CM PM B
              (reftype/ nn/yes C (targets/unique S G))
              (effects/ M CS CQ) Out}
    {DM: efxmap`domain M R} {G<=M: set`leq G R}
    {TYE: typing W Pi E Out}
    {CML: clsmap`lookup CM C FM}
    {FML: fldmap`lookup FM F (ty/ NN A FC)}
    {MTAE: make-targets-and-effects
           (targets/unique S G) F efx/read G1 (effects/ M2 set/0 set/0)}
    {CF: consider-ftype G1 A GSP}
    {M2<=M: efxmap`leq M2 M}
    exists {Out2} {TO: effects2output CM PM
                       B (reftype/ NN FC GSP) (effects/ M CS CQ) Out2}
    {TYP: typing W Pi (read E F) Out2}
    true.

- : reftyping-ok/read/unique _ (set/+ _ _)
    CM-B-M SOC LNN CM-CM CM2PM XX=>Out DM G<=M TYP-E CML FML
    (make-targets-and-effects/unique S+F=>G2 G1^G2 G1+G2=G G=>M)
    consider-ftype/unique M2<=M _ %{=>}%
    (effects2output/unique/+f T2PF X2Q MX-M M2=>Pi4 M1=>Pi3 SG
      ([_] set2cond/0) B=>Pi1 SZ-MP)
    (tTrans2
      (tRead1
        (tTrans2
          (TYP-E)
          (transform/trans
            (TRANS)
            (transform/inside [r]
              (transform/trans3
                (transform/implies
                  (implies/equiv
                    (equiv/transitive
                      (equiv/commute)
                      (equiv/symmetric equiv/associate))))
                (transform/skolem)
                (transform/inside [v]
                  (transform/implies
                    (implies/equiv
                      (equiv/transitive
                        (equiv/combine
                          equiv/distribute equiv/reflexive)
                        (equiv/symmetric equiv/associate)))))))))
        (letTyping/exists [v]
          (letTyping/exists [r]
            (letTyping/base v tRead))))
      (transform/trans
        (transform/inside [r]
          (transform/inside [v]
            (transform/trans
              (transform/implies
                (implies/trans
                  (implies/equiv
                  (equiv/transitive
                    (equiv/combine
                      (equiv/reflexive)
                      (equiv/combine
                        (equiv/reflexive)
                        (equiv/commute)))
                    (equiv/roll3)))
                  (implies/combine
                    (implies/reflexive)
                    (implies/trans5
                      (implies/combine
                        (repack-fldperm v)
                        (implies/reflexive))
                      (implies/equiv equiv/roll2)
                      (implies/combine
                        (implies/reflexive)
                        (implies/trans
                          (implies/equiv equiv/associate)
                          (implies/combine
                            (implies/chain-implication)
                            (implies/reflexive))))
                      (implies/combine
                        (implies/trans3
                          (implies/equiv (equiv/symmetric equiv/identity))
                          (implies/combine
                            (implies/reflexive)
                            (implies/trans4
                              (implies/empty2true)
                              (implies/nonlinear bimplies/objequal-reflexive)
                              (implies/equiv (equiv/symmetric equiv/identity))
                              (implies/cond-intro)))
                          (implies/equiv equiv/commute))
                        (implies/reflexive))
                      (implies/equiv (equiv/symmetric equiv/associate))))))
              (transform/gen-exists v))))
        (transform/rem-unused)))
    <- set`size-total SZ-M1
    <- set`join-implies-leq G1+G2=G G1<=G G2<=G
    <- set`size-total SZ-M
    <- set`leq-implies-size-le G1<=G SZ-M1 SZ-M LE
    <- ge-succ-implies-succ LE _ EQ
    <- set`size-respects-eq SZ-M set`eq/ EQ SZ-MP
    <- before-read/unique/+f _ SZ-M1 CM-B-M CM-CM CM2PM CML FML
      DM G<=M S+F=>G2 G1^G2 G1+G2=G G=>M M2<=M
      XX=>Out SOC LNN %{=>}% _ T2PF _ B=>Pi1
      _ _ SG _ M1=>Pi3 _ M2=>Pi4 _ MX-M _ X2Q TRANS.

- : reftyping-ok/read/unique _ (set/+ _ _) CM-B-S SOC LNN CM-CM CM2PM
    XX=>Out DM G<=M TYP-E CML FML
    (make-targets-and-effects/unique S+F=>G2 G1^G2 G1+G2=G G=>M)
    consider-ftype/shared M2<=M %{=>}% _
    (effects2output/simple T2PF reftype2ty/shared
      simple-targets/shared M=>Pi B=>Pi1)
    (tTrans2
      (tRead1
        (tTrans2
          (TYP-E)
          (transform/trans
            (TRANS)
            (transform/inside [o]
              (transform/trans3
                (transform/implies
                  (implies/equiv equiv/roll2))
                (transform/skolem)
                (transform/inside [v]
                  (transform/implies
                    (implies/equiv
                      (equiv/transitive
                        (equiv/combine
                          equiv/distribute equiv/reflexive)
                        (equiv/symmetric equiv/associate)))))))))
        (letTyping/exists [v]
          (letTyping/exists [r]
            (letTyping/base v tRead))))
      (transform/trans
        (transform/inside [r]
          (transform/inside [v]
            (transform/implies
              (implies/trans10
                (implies/combine
                  (implies/reflexive)
                  (implies/combine
                    (implies/reflexive)
                    (implies/equiv equiv/commute)))
                (implies/combine
                  (repack-fldperm v)
                  (implies/combine
                    (implies/reflexive)
                    (implies/equiv (equiv/symmetric equiv/associate))))
                (implies/combine
                  (implies/reflexive)
                  (implies/equiv equiv/roll2))
                (implies/equiv equiv/associate)
                (implies/combine
                  (implies/chain-implication)
                  (implies/reflexive))
                (implies/equiv equiv/roll2)
                (implies/combine
                  (implies/trans
                    (implies/scale (DUP v))
                    (implies/equiv equiv/distribute))
                  (implies/reflexive))
                (implies/equiv (equiv/symmetric equiv/associate))
                (implies/combine
                  (DIS v)
                  (implies/trans5
                    (implies/equiv equiv/associate)
                    (implies/combine
                      (implies/linear-modus-ponens)
                      (implies/reflexive))
                    (implies/equiv equiv/associate)
                    (implies/combine
                      (implies/trans
                        (implies/equiv equiv/commute)
                        (implies/equiv EQV))
                      (implies/reflexive))
                    (implies/equiv equiv/commute)))
                (implies/equiv equiv/roll2)))))
        (transform/rem-unused)))
    <- set`size-total M-SZ
    <- before-read/unique/+f _ M-SZ CM-B-S CM-CM CM2PM CML FML
      DM G<=M S+F=>G2 G1^G2 G1+G2=G G=>M M2<=M
      XX=>Out SOC LNN %{=>}% _ T2PF _ B=>Pi1
      _ _ SG _ M1=>Pi3 _ M2=>Pi4 _ MX' _ X2Q' TRANS
    <- sharedperm-can-be-duplicated* T2PF DUP
    <- can-scale-from-shared T2PF DIS
    <- efxmap`partition-implies-permission-combine-converse
      SG M1=>Pi3 M2=>Pi4 _ M=>Pi EQV.

%theorem reftyping-ok/read/unique/F
  : forall* {CM} {PM} {B} {NN} {FC} {GSP} {M} {W} {Pi} {E} {F} {CS} {CQ}
    forall {V:void}
    exists {Out2}
    {TO: effects2output CM PM B (reftype/ NN FC GSP) (effects/ M CS CQ) Out2}
    {TYP: typing W (Pi) (read E F) (Out2)}
    true.

%worlds () (reftyping-ok/read/unique/F _ _ _ _).
%total {} (reftyping-ok/read/unique/F _ _ _ _).

- : reftyping-ok/read/unique set/0 _ _ _ _ _ _ _ _ _ _ _ _
    (make-targets-and-effects/unique
      (S+F=>G: set+nat2set set/0 _ (set/+ _ _)) _ _ _) _ _ K1 K2 K3
    <- set`size-total SZ
    <- set+nat2set-preserves-size-converse S+F=>G SZ SZx
    <- set`size-unique set`size/0 SZx set`eq/ E
    <- nat`eq-contradiction E V
    <- reftyping-ok/read/unique/F V K1 K2 K3.

- : reftyping-ok/read/unique set/0 set/0
    _ _ _ CM-CM CM2PM XX=>Out _ _ TYP-E CML FML _ _ _ _
    (effects2output/simple T2PF reftype2ty/unique
      simple-targets/unique M=>Pi B=>Pi1)
    (tTrans2
      (tRead1
        (tTrans2
          (TYP-E)
          (transform/trans
            (TRANS)
            (transform/inside [r]
              (transform/trans3
                (transform/trans
                  (transform/implies
                    (implies/equiv
                      (equiv/transitive
                        (equiv/commute)
                        (equiv/symmetric equiv/associate))))
                  (transform/implies
                    (implies/equiv
                      (equiv/combine
                        (equiv/symmetric equiv/one)
                        (equiv/reflexive)))))
                (transform/skolem)
                (transform/inside [v]
                    (transform/implies
                      (implies/equiv
                        (equiv/transitive
                          (equiv/combine
                            equiv/distribute equiv/reflexive)
                          (equiv/symmetric equiv/associate)))))))))
        (letTyping/exists [v]
          (letTyping/exists [r]
            (letTyping/base v tRead))))
      (transform/trans
        (transform/inside [r]
          (transform/inside [v]
            (transform/trans3
              (transform/drop)
              (transform/implies
                (implies/trans
                  (implies/equiv
                    (equiv/transitive
                      (equiv/combine
                        (equiv/one)
                        (equiv/reflexive))
                      (equiv/roll2)))
                  (implies/trans
                    (implies/equiv (equiv/symmetric equiv/associate))
                    (implies/equiv
                      (equiv/combine
                        (equiv/reflexive)
                        (equiv/transitive3
                          (equiv/combine
                            (equiv/reflexive)
                            (equiv/commute))
                          (equiv/commute)
                          (equiv/symmetric equiv/associate)))))))
              (transform/drop))))
          (transform/rem-unused)))
    <- before-read/unique/0 CM-CM CM2PM CML FML
      XX=>Out _ T2PF _ B=>Pi1 _ PML _ M=>Pi TRANS.

- : reftyping-ok/read/unique set/0 set/0
    CM-B-M SOC LNN CM-CM CM2PM XX=>Out _ _ TYP-E CML FML
    (make-targets-and-effects/unique
      S+F=>G2 _ _
      G2=>M) consider-ftype/shared M2<=M
    _ (effects2output/simple T2PF reftype2ty/shared
        simple-targets/shared M=>Pi B=>Pi1)
    (tTrans2
      (tRead1
        (tTrans2
          (TYP-E)
          (transform/trans
            (TRANS)
            (transform/inside [r]
              (transform/trans3
                (transform/trans
                  (transform/implies
                    (implies/equiv
                      (equiv/transitive
                        (equiv/commute)
                        (equiv/symmetric equiv/associate))))
                  (transform/implies
                    (implies/equiv
                      (equiv/combine
                        (equiv/symmetric equiv/one)
                        (equiv/reflexive)))))
                (transform/skolem)
                (transform/inside [v]
                    (transform/implies
                      (implies/equiv
                        (equiv/transitive
                          (equiv/combine
                            equiv/distribute equiv/reflexive)
                          (equiv/symmetric equiv/associate)))))))))
        (letTyping/exists [v]
          (letTyping/exists [r]
            (letTyping/base v tRead))))
      (transform/trans
        (transform/inside [r]
          (transform/inside [v]
            (transform/trans
              (transform/implies
                (implies/trans
                  (implies/equiv
                    (equiv/transitive
                      (equiv/combine
                        (equiv/reflexive)
                        (equiv/combine
                          (equiv/reflexive)
                          (equiv/commute)))
                      (equiv/roll3)))
                  (implies/combine
                    (implies/reflexive)
                    (implies/trans5
                      (implies/equiv equiv/associate)
                      (implies/combine
                        (implies/trans5
                          (implies/equiv
                            (equiv/transitive
                              (equiv/symmetric equiv/distribute)
                              (equiv/one)))
                          (implies/combine
                            (implies/reflexive) (DUP v))
                          (implies/equiv equiv/associate)
                          (implies/combine
                            (implies/pack v)
                            (implies/reflexive))
                          (implies/equiv equiv/commute))
                        (implies/reflexive))
                      (implies/equiv (equiv/symmetric equiv/associate))
                      (implies/combine
                        (implies/reflexive)
                        (implies/trans
                          (implies/equiv equiv/associate)
                          (implies/combine
                            (implies/linear-modus-ponens)
                            (implies/reflexive))))
                      (implies/equiv equiv/roll2)))))
              (transform/trans
                (transform/implies (implies/equiv equiv/roll2))
                (transform/drop)))))
        (transform/rem-unused)))
    <- before-read/unique/0 CM-CM CM2PM CML FML
      XX=>Out _ T2PF _ B=>Pi1 _ PML _ M=>Pi TRANS
    <- sharedperm-can-be-duplicated* T2PF DUP.

- : reftyping-ok/read/unique (set/+ _ _) set/0
    CM-B-M SOC LNN CM-CM CM2PM XX=>Out DM _ TYP-E CML FML
    (make-targets-and-effects/unique
      S+F=>G2 _ _
      G2=>M) consider-ftype/shared M2<=M
    _ (effects2output/simple T2PF reftype2ty/shared
        simple-targets/shared M=>Pi B=>Pi1)
    (tTrans2
      (tRead1
        (tTrans2
          (TYP-E)
          (transform/trans
            (TRANS)
            (transform/inside [r]
              (transform/trans3
                (transform/implies (implies/equiv equiv/roll2))
                (transform/skolem)
                (transform/inside [v]
                  (transform/implies
                    (implies/equiv
                      (equiv/transitive
                        (equiv/combine
                          equiv/distribute equiv/reflexive)
                        (equiv/symmetric equiv/associate)))))))))
        (letTyping/exists [v]
          (letTyping/exists [r]
            (letTyping/base v tRead))))
      (transform/trans
        (transform/inside [r]
          (transform/inside [v]
            (transform/implies
              (implies/trans10
                (implies/combine
                  (implies/reflexive)
                  (implies/combine
                    (implies/reflexive)
                    (implies/equiv equiv/commute)))
                (implies/combine
                  (repack-fldperm v)
                  (implies/combine
                    (implies/reflexive)
                    (implies/equiv (equiv/symmetric equiv/associate))))
                (implies/combine
                  (implies/reflexive)
                  (implies/equiv equiv/roll2))
                (implies/equiv equiv/associate)
                (implies/combine
                  (implies/chain-implication)
                  (implies/reflexive))
                (implies/equiv equiv/roll2)
                (implies/combine
                  (implies/trans
                    (implies/scale (DUP v))
                    (implies/equiv equiv/distribute))
                  (implies/reflexive))
                (implies/equiv (equiv/symmetric equiv/associate))
                (implies/combine
                  (DIS v)
                  (implies/trans5
                    (implies/equiv equiv/associate)
                    (implies/combine
                      (implies/linear-modus-ponens)
                      (implies/reflexive))
                    (implies/equiv equiv/associate)
                    (implies/combine
                      (implies/trans
                        (implies/equiv equiv/commute)
                        (implies/equiv EQV))
                      (implies/reflexive))
                    (implies/equiv equiv/commute)))
                (implies/equiv equiv/roll2)))))
        (transform/rem-unused)))
    <- set`size-total S-SZ
    <- before-read/unique/0f DM CM-B-M CM-CM CM2PM CML FML
      S+F=>G2 G2=>M M2<=M XX=>Out SOC LNN S-SZ _ T2PF _ B=>Pi1
      _ _ SG _ M1=>Pi3 _ M2=>Pi4 _ MX-M' _ X2Q' TRANS
    <- sharedperm-can-be-duplicated* T2PF DUP
    <- can-scale-from-shared T2PF DIS
    <- efxmap`partition-implies-permission-combine-converse
      SG M1=>Pi3 M2=>Pi4 _ M=>Pi EQV.

- : reftyping-ok/read/unique (set/+ _ _) set/0
    CM-B-M SOC LNN CM-CM CM2PM XX=>Out DM _ TYP-E CML FML
    (make-targets-and-effects/unique
      S+F=>G2 _ _ G2=>M) consider-ftype/unique M2<=M
    _ (effects2output/unique/+f T2PF X2Q MX-M M2=>Pi4 M1=>Pi3 SG
        ([_] set2cond/0) B=>Pi1 SZ-G)
    (tTrans2
      (tRead1
        (tTrans2
          (TYP-E)
          (transform/trans
            (TRANS)
            (transform/inside [r]
              (transform/trans3
                (transform/implies
                  (implies/equiv
                    (equiv/transitive
                      (equiv/commute)
                      (equiv/symmetric equiv/associate))))
                (transform/skolem)
                (transform/inside [v]
                  (transform/implies
                    (implies/equiv
                      (equiv/transitive
                        (equiv/combine
                          equiv/distribute equiv/reflexive)
                        (equiv/symmetric equiv/associate)))))))))
        (letTyping/exists [v]
          (letTyping/exists [r]
            (letTyping/base v tRead))))
      (transform/trans
        (transform/inside [r]
          (transform/inside [v]
            (transform/trans
              (transform/implies
                (implies/trans
                  (implies/equiv
                    (equiv/transitive
                      (equiv/combine
                        (equiv/reflexive)
                        (equiv/combine
                          (equiv/reflexive)
                          (equiv/commute)))
                      (equiv/roll3)))
                  (implies/combine
                    (implies/reflexive)
                    (implies/trans5
                      (implies/combine
                        (repack-fldperm v)
                        (implies/reflexive))
                      (implies/equiv equiv/roll2)
                      (implies/combine
                        (implies/reflexive)
                        (implies/trans
                          (implies/equiv equiv/associate)
                          (implies/combine
                            (implies/chain-implication)
                            (implies/reflexive))))
                      (implies/combine
                        (implies/trans3
                          (implies/equiv (equiv/symmetric equiv/identity))
                          (implies/combine
                            (implies/reflexive)
                            (implies/trans4
                              (implies/empty2true)
                              (implies/nonlinear bimplies/objequal-reflexive)
                              (implies/equiv (equiv/symmetric equiv/identity))
                              (implies/cond-intro)))
                          (implies/equiv equiv/commute))
                        (implies/reflexive))
                      (implies/equiv (equiv/symmetric equiv/associate))))))
              (transform/gen-exists v))))
        (transform/rem-unused)))
    <- set`size-total S-SZ
    <- set+nat2set-preserves-size S+F=>G2 S-SZ SZ-G
    <- before-read/unique/0f DM CM-B-M CM-CM CM2PM CML FML
      S+F=>G2 G2=>M M2<=M XX=>Out SOC LNN S-SZ _ T2PF _ B=>Pi1
      _ _ SG _ M1=>Pi3 _ M2=>Pi4 _ MX-M _ X2Q TRANS.

%worlds () (reftyping-ok/read/unique _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (reftyping-ok/read/unique _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).


%theorem reftyping-ok/read
  : forall* {CM} {PM} {W} {B} {FM} {G1}
    {GP} {NN} {A} {FC} {C} {E} {F} {Out} {Pi} {XX} {XX'}
    forall {G} {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CM-B-G: clsmap-cxt-reftype CM B (reftype/ nn/yes C G)}
    {CM-B-XX: clsmap-cxt-effects CM B XX'}
    {G-XX: targets-effects G XX'}
    {XX2I: effects2input CM PM B XX' Pi}
    {XX2O: effects2output CM PM B (reftype/ nn/yes C G) XX' Out}
    {TYPE: typing W Pi E Out}
    {CML: clsmap`lookup CM C FM}
    {FML: fldmap`lookup FM F (ty/ NN A FC)}
    {MG: make-targets-and-effects G F efx/read G1 XX}
    {CF: consider-ftype G1 A GP}
    {LE: effects-leq-without-consume XX XX'}
    exists {Out2} {XX2O: effects2output CM PM B (reftype/ NN FC GP) XX' Out2}
    {TYP: typing W Pi (read E F) Out2}
    true.

- : reftyping-ok/read targets/shared CM-CM CM2PM _ _
    _ XX2I XX2O TYPE CML FML MG CF (effects-leq-without-consume/ LEQ)
    _ XX2Ox TYP
    <- reftyping-ok/read/shared
      CM-CM CM2PM XX2I XX2O TYPE CML FML MG LEQ CF _ XX2Ox TYP.

- : reftyping-ok/read (targets/unique S G) CM-CM CM2PM
    (clsmap-cxt-reftype/unique SOC LNN _ _)
    (clsmap-cxt-effects/ _ _ _ _ _ CM-B-M _ _)
    (targets-effects/unique DM G<=M)
    XX2I XX2O TYPE CML FML MG CF (effects-leq-without-consume/ M2<=M)
    _ XX2Ox TYP
    <- reftyping-ok/read/unique S G CM-B-M SOC LNN CM-CM CM2PM XX2O
      DM G<=M TYPE CML FML MG CF M2<=M _ XX2Ox TYP.

%worlds () (reftyping-ok/read _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (reftyping-ok/read _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).