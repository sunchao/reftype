%%% Type judgments for conservative type system based on FP.

%%% Type Checking Result

result : kind -> type.

%abbrev expr-result = result exprk.

%abbrev cond-result = result condk.

%abbrev args-result = result argsk.


result/expr : reftype -> env -> expr-result.

result/cond : env -> cond-result.

result/args/0 : env -> args-result.

result/args/+ : reftype -> env -> args-result -> args-result.


%%% Equality

result`eq : result K -> result K -> type.

result`eq/ : result`eq R R.


%theorem result/expr-eq-inversion
  : forall* {RT1} {V1} {RT2} {V2}
    forall {E: result`eq (result/expr RT1 V1) (result/expr RT2 V2)}
    exists {TE: reftype`eq RT1 RT2} {VE: env`eq V1 V2}
    true.

- : result/expr-eq-inversion result`eq/ reftype`eq/ env`eq/.

%worlds (gtermvar) (result/expr-eq-inversion _ _ _).
%total { } (result/expr-eq-inversion _ _ _).


%theorem result/cond-eq-inversion
  : forall* {V1} {V2}
    forall {E: result`eq (result/cond V1) (result/cond V2)}
    exists {VE: env`eq V1 V2}
    true.

- : result/cond-eq-inversion result`eq/ env`eq/.

%worlds (gtermvar) (result/cond-eq-inversion _ _).
%total { } (result/cond-eq-inversion _ _).


%theorem result/args/0-eq-inversion
  : forall* {V1} {V2}
    forall {E: result`eq (result/args/0 V1) (result/args/0 V2)}
    exists {VE: env`eq V1 V2}
    true.

- : result/args/0-eq-inversion result`eq/ env`eq/.

%worlds (gtermvar) (result/args/0-eq-inversion _ _).
%total { } (result/args/0-eq-inversion _ _).


%theorem result/args/+-eq-inversion
  : forall* {V1} {V2} {RT1} {RT2} {A1} {A2}
    forall {E: result`eq (result/args/+ RT1 V1 A1) (result/args/+ RT2 V2 A2)}
    exists {TE: reftype`eq RT1 RT2} {VE: env`eq V1 V2} {AE: result`eq A1 A2}
    true.

- : result/args/+-eq-inversion result`eq/ reftype`eq/ env`eq/ result`eq/.

%worlds (gtermvar) (result/args/+-eq-inversion _ _ _ _).
%total { } (result/args/+-eq-inversion _ _ _ _).


%%% Sub-relation on targets

targets`sub : set -> targets -> env -> targets -> env -> type.

targets`sub/ss : targets`sub _ targets/shared V targets/shared V.

%%% For the unique => shared case, all the object targets and field targets
%%% are consumed.
targets`sub/us :
    set+set2set S FS M ->
    set`split U0 S U1 ->
    set`split M0 M M1 ->
  targets`sub FS (targets/unique S _ _) (env/ U0 M0) targets/shared (env/ U1 M1).

%{
It's tricky to handle the case when either M1 or M2 contains shared. This is
because it's hard to add the information that the shared field is from
which class. It's not impossible though, just requires many changes.

This doesn't work for cases like
if (...) (new C).f else a
as well, since on the right hand side you can't get the fresh permissions.
targets`sub/uu :
    set`leq U1 U2 ->
    set`split M2 M1 Q ->
    set`split Q0 Q Q1 ->
    set`not-member M1 shared ->
    set`not-member M2 shared ->
    bool`leq W1 W2 ->
  targets`sub _ (env/ U Q0) (targets/unique U1 M1 W1) (targets/unique U2 M2 W2) (env/ U Q1).
}%

targets`sub/bb :
    set`leq S0 S1 ->
  targets`sub _ (targets/unique S0 set/0 false) V (targets/unique S1 set/0 false) V.


%%% Whether a reftype has encumbered permission.

has-encumbered : set -> bool -> type.

has-encumbered/1 : has-encumbered M false <- set`size M (s _).

has-encumbered/2 : has-encumbered _ true.


targets`sub/uu :
    set`leq S0 S1 ->
    has-encumbered M0 W0 ->
    set`split Q0 M Q1 ->
    set`combine M M0 M1 ->
    bool`leq W0 W1 ->
  targets`sub _ (targets/unique S0 M0 W0) (env/ U0 Q0)
    (targets/unique S1 M1 W1) (env/ U0 Q1).

targets`sub/fu :
    set`split Q0 M Q1 ->
  targets`sub _ targets/fresh (env/ U Q0) (targets/unique _ M true) (env/ U Q1).

targets`sub/fs : targets`sub _ targets/fresh V targets/shared V.

targets`sub/ff : targets`sub _ targets/fresh V targets/fresh V.


%%% Sub-relation between reftypes

expr-result-sub : clsmap -> expr-result -> expr-result -> type.

expr-result-sub/ :
    clsmap`lookup CM C FM ->
    fldmap`domain FM FS ->
    nonnull`sub NN1 NN2 ->
    targets`sub FS G0 V0 G1 V1 ->
  expr-result-sub CM (result/expr (reftype/ NN1 C G0) V0) (result/expr (reftype/ NN2 C G1) V1).

%%% TODO: for other result kinds?


%%% Type Checking Rules

reftyping : clsmap -> methmap -> cxt -> env -> term K -> result K -> type.


%%% ====================== Type Check Rules =======================

%%% Checking Literals

reftyping/lit :
    cxt`lookup-obj B O (s N) T ->
    ty2reftype (s N) T RT ->
  reftyping _ _ B V (lit O) (result/expr RT V).


%%% Type Rules with Direct Effect

%%% Reading a field

%%% TODO: thinking about removing this.
targets-capset : targets -> set -> type.

targets-capset/shared : targets-capset targets/shared _.

targets-capset/unique :
    set`disjoint M1 M2 ->
  targets-capset (targets/unique _ M1 _) M2.


readRefTyping : clsmap -> expr-result -> nat -> expr-result -> type.

readRefTyping/base :
    clsmap`lookup CM C FM ->
    fldmap`lookup FM F (ty/ NN A FC) ->
    make-tgts-and-caps M0 G0 F G1 M1 ->
    consider-ftype G1 M1 A G2 M2 ->
    targets-capset G0 M0 ->
  readRefTyping CM (result/expr (reftype/ nn/yes C G0) (env/ U M0)) F
    (result/expr (reftype/ NN FC G2) (env/ U M2)).

reftyping/read :
    reftyping CM MM B V E R ->
    readRefTyping CM R F R2 ->
  reftyping CM MM B V (read E F) R2.


%%% Writing a field

writeRefTyping : clsmap -> methmap -> cxt -> expr-result -> nat -> expr ->
    targets -> ty -> expr-result -> type.

%%% In subtype, we don't care about FS, since it's impossible for
%%% a field to be borrowed.
%%% TODO: looks like the result for this shouldn't have attached field caps.
%%% The result of writing a field should be unit
writeRefTyping/base :
    clsmap`lookup CM C FM ->
    fldmap`lookup FM F (ty/ NN A FC) ->
    make-tgts-and-caps M0 G0 F G1 M1 ->
    reftyping CM MM B (env/ U0 M1) E (result/expr RT V2) ->
    subtype CM _ RT V2 (ty/ NN A FC) _ (env/ U1 M3) ->
    consider-ftype G1 M3 A G2 M4 ->
  writeRefTyping CM MM B (result/expr (reftype/ nn/yes C G0) (env/ U0 M0))
    F E G1 (ty/ NN A FC) (result/expr (reftype/ NN FC G2) (env/ U1 M4)).

reftyping/write
  : reftyping CM MM B V1 E1 R1 ->
    writeRefTyping CM MM B R1 F E2 G T R2 ->
  reftyping CM MM B V1 (write E1 F E2) R2.


%%% Type Rules with Indirect Effects


%%% Let

%{
For let, we have two approaches
1. change the context to map to reftype, instead of ty. So, the variable x
is mapped to the reftype from checking E. But, whenever consume something,
we need to trace down to the "root" of each binding. This approach is a bit
complicated.

2. suppose x is bound to (reftype/unique S G), we remove field capabilities for
all objects in S. For instance, if S = {a, b}, and in M we have (a.f,W),
(a.g, R), (b.f, R), then as result, we remove these from M, and add (x.f, R) to it.
In other words, we compute the most conservative capabilities we can get for x.
During the life time of x, all objects in S are not allowed to use, until x is being
released out of scope.

Currently, we use the second approach, since it's easier to implement.
In the future, we can come back here and switch to the first approach.
}%


%{
update-cxt : clsmap -> env -> ty -> (object -> env) -> type.

update-cxt/unique :
    clsmap`lookup CM C FM ->
    fldmap`domain FM FS ->
    nat+set2capmap (s N) FS cap/write M1 ->
    capmap-split M2 M1 M0 ->
    cxt`fresh B0 (s N) ->
    ({x} cxt`update B0 (s N) (cxt-info/ x (ty/ NN annot/unique C)) (B1 x)) ->
  update-cxt CM (env/ B0 M0) (ty/ NN annot/unique C) ([x] env/ (B1 x) M2).

update-cxt/shared :
    cxt`fresh B0 (s N) ->
    ({x} cxt`update B0 (s N) (cxt-info/ x (ty/ NN annot/shared C)) (B1 x)) ->
  update-cxt CM (env/ B0 M0) (ty/ NN annot/shared C) ([x] env/ (B1 x) M0).
}%

%%% Make sure the let variable is not in the result target (no leaking).

not-in-capset : nat -> set -> type.

not-in-capset/0 : not-in-capset _ set/0.

not-in-capset/U :
    not-in-capset N CS' ->
    nat2pair K (pair/ N' F) ->
    nat`ne N N' ->
    set`not-member CS' K ->
    set`add CS' K CS ->
  not-in-capset N CS.

not-in-targets : nat -> targets -> type.

not-in-targets/unique :
    set`not-member S N ->
    not-in-capset N M ->
  not-in-targets N (targets/unique S M _).

not-in-targets/shared : not-in-targets _ targets/shared.

not-in-targets/fresh : not-in-targets _ targets/fresh.


%%% Reclaim capabilities encumbered by the let variable.

%%% At the moment we just be conservative, and don't allow ANY field
%%% from the let variable be consumed.

letRefTyping : clsmap -> methmap -> cxt ->
    expr-result -> (object -> term K) -> result K -> type.

%%% M5 = M0 - M2 + M3
letRefTyping/base/unique :
    clsmap`lookup CM C FM ->
    fldmap`domain FM FS ->
    set+set2set S FS M2 ->
    cxt`fresh B0 (s N) ->
    ({x} cxt`update B0 (s N) (cxt-info/ x (ty/ NN annot/unique C)) (B1 x)) ->
    set`split U0 S U1 ->
    set`not-member U1 (s N) ->
    set`add U1 (s N) U2 ->
    set`split M0 M2 M4 ->
    nat+set2set (s N) FS M3 ->
    set`split M5 M3 M4 ->
    ({x} reftyping CM MM (B1 x) (env/ U2 M5) (F x)
      (result/expr (reftype/ NN1 C1 G1) (env/ U3 M6))) ->
    not-in-targets (s N) G1 ->
    set`split M6 M3 M7 -> % M3 still in result
    set`split M8 M2 M7 ->
    set`split M9 M1 M8 ->
    set`not-member U4 (s N) ->
    set`add U4 (s N) U3 ->
    set`union U4 S U5 ->
  letRefTyping CM MM B0 (result/expr (reftype/ NN C (targets/unique S M1 W)) (env/ U0 M0))
    F (result/expr (reftype/ NN1 C1 G1) (env/ U5 M9)).

letRefTyping/base/shared :
    clsmap`lookup CM C FM ->
    cxt`fresh B0 (s N) ->
    ({x} cxt`update B0 (s N) (cxt-info/ x (ty/ NN annot/shared C)) (B1 x)) ->
    ({x} reftyping CM MM (B1 x) V (F x)
      (result/expr (reftype/ NN1 C1 G1) V1)) ->
    not-in-targets (s N) G1 ->
  letRefTyping CM MM B0 (result/expr (reftype/ NN C targets/shared) V)
    F (result/expr (reftype/ NN1 C1 G1) V1).

reftyping/let :
    reftyping CM MM B V E R1 ->
    letRefTyping CM MM B R1 F R2 ->
  reftyping CM MM B V (let E F) R2.


%%% Method Calls

%{
Type checking arguments

One issue we need to consider is aliasing between unique arguments.
For instance, if a method is annotated as "reads a.f, writes b.f", and
a and b are aliases to each other, then we cannot check the call.

Given this situation doesn't occur very often, and is also illegal in FP,
here we just simply disallow "duplicated" cap while checking method call effects.

For borrowed parameter type, we'll get back the associated capabilities after
the method call is checked. Consider:

@write b.f
foo(@borrow T b): ...

And both x and y are unique reference of type T, and both f and g are unique fields.
Then,

call foo(if a > 3 then x else y.g)

will need input capabilities (x.f, y.g)

After foo is checked, we should get permissions for x.f and y.g back.

}%


argsRefTyping : clsmap -> methmap -> cxt -> env -> args -> methty -> args-result -> type.

argsRefTyping/0 : argsRefTyping _ _ _ V args/0 (methty/base T) (result/args/0 V).

argsRefTyping/+ :
    reftyping CM MM B V0 E (result/expr RT V1) ->
    subtype CM FS RT V1 T AV V2 ->
    argsRefTyping CM MM B V2 A MT AR ->
  argsRefTyping CM MM B V0 (args/+ E A) (methty/arg T FS MT) (result/args/+ RT AV AR).


%{
How to check method call:
1. Check arguments, given an input type context and capability set.
   For each argument, type checking will yield a corresponding
   result reftype, and produce a output capability set. After checking all
   arguments, we get a output (unchanged) type context, and a set of
   remaining capabilities.
2. Check method type using the result/args and remaining capability set.
   For each formal argument, if it's unique, remove the associated capabilities
   from output capability set. Otherwise, we'll just return the same capabilities
   for the argument.

Note that both step 1 and 2 may modify the context and capability set (step 1
will only weaken the condition, while step 2 will only strengthen the
condition).

To make the rule interesting, we should need to prove that capabilities can be
reclaimed after they are not needed after the method call checking. This is
also needed for checking tLet.
}%

%%% Converting a ty to a reftype for a fresh new object.

ty2new-reftype : ty -> reftype -> type.

ty2new-reftype/unique :
    ty2new-reftype (ty/ NN annot/unique C) (reftype/ NN C targets/fresh).

ty2new-reftype/shared :
    ty2new-reftype (ty/ NN annot/shared C) (reftype/ NN C targets/shared).


%%% Look for encumbered capabilities and put them back in the holding capability set

restore-cap-targets : env -> targets -> env -> type.

restore-cap-targets/shared : restore-cap-targets V targets/shared V.

restore-cap-targets/unique :
    set`combine M0 M1 M ->
  restore-cap-targets (env/ U M0) (targets/unique _ M1 _) (env/ U M).


restore-cap-call : env -> reftype -> env -> ty -> env -> type.

restore-cap-call/uniqueORshared :
    not-borrow A ->
  restore-cap-call V _ _ (ty/ _ A _) V.

restore-cap-call/borrow :
    restore-cap-targets V0 (targets/unique S M _) V0' ->
    env`combine V0' V1 V2 ->
  restore-cap-call V0 (reftype/ _ _ (targets/unique S M _)) V1 (ty/ _ annot/borrow _) V2.


callRefTyping* : clsmap -> methmap -> env -> args-result -> methty -> expr-result -> type.

callRefTyping/arg/0 :
    env`combine V0 V1 V ->
    ty2new-reftype T RT ->
  callRefTyping* CM MM V0 (result/args/0 V1) (methty/base T) (result/expr RT V).

callRefTyping/arg/+ :
    restore-cap-call V0 RT AV T V1 ->
    callRefTyping* CM MM V1 AR MT R ->
  callRefTyping* CM MM V0 (result/args/+ RT AV AR) (methty/arg T _ MT) R.

%abbrev callRefTyping = [CM][MM][AR][MT][R] callRefTyping* CM MM empty-env AR MT R.


%%% This is defined in consistency.elf
clsmap-result : clsmap -> cxt -> result K -> type.


reftyping/call :
    clsmap`fresh CM M ->
    methmap`lookup MM M MT ->
    argsRefTyping CM MM B V A MT AR ->
    callRefTyping CM MM AR MT R ->
  reftyping CM MM B V (call M A) R.

reftyping/const :
    clsmap`lookup CM C FM ->
    fldmap`domain FM S ->
    set`not-member S all ->
    set`add S all S' ->
    methmap`lookup MM C (methty/arg (ty/ nn/yes annot/unique C) set/0 MT) ->
    argsRefTyping CM MM B V A MT AR ->
    callRefTyping CM MM AR MT R ->
  reftyping CM MM B V (call C (args/+ (alloc C S' set/0) A)) R.

reftyping/sub :
    reftyping CM MM B V0 E R0 ->
    expr-result-sub CM R0 R1 ->
    clsmap-result CM B R1 ->
  reftyping CM MM B V0 E R1.

reftyping/if :
    reftyping CM MM B V0 C (result/cond V1) ->
    reftyping CM MM B V1 E1 (result/expr RT V2) ->
    reftyping CM MM B V1 E2 (result/expr RT V2) ->
  reftyping CM MM B V0 (if C E1 E2) (result/expr RT V2).


%%% Conditionals

%%% After the "eql" statement, we need to reclaim the capabilities
%%% encumbered in `RT1` and `RT2`.

reftyping/eq :
    reftyping CM MM B V0 E1 (result/expr (reftype/ _ _ G1) V1) ->
    reftyping CM MM B V1 E2 (result/expr (reftype/ _ _ G2) V2) ->
    restore-cap-targets V2 G1 V3 ->
    restore-cap-targets V3 G2 V4 ->
  reftyping CM MM B V0 (eql E1 E2) (result/cond V4).

reftyping/not :
    reftyping CM MM B V C R ->
  reftyping CM MM B V (not C) R.

%%% For the second branch, the input capabilities need to be the same
%%% as output (e.g., no a.f = new C in C2). Otherwise, for the conditional
%%% in the output the two branches will have different permissions.
reftyping/and :
    reftyping CM MM B V0 C1 (result/cond V1) ->
    reftyping CM MM B V1 C2 (result/cond V1) ->
  reftyping CM MM B V0 (and C1 C2) (result/cond V1).