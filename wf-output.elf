%%% $Id$

%%% well-formed output for reftyping

wf-output : out K -> type.

wf-output/expr/null : wf-output (out/expr (reftype/ ty/null _ _) _).

wf-output/expr/set
  : wf-output (out/expr (reftype/ (ty/ _ _ _) S GM) _)
    <- set`size S (s _).

wf-output/expr/tgtmap
  : wf-output (out/expr (reftype/ (ty/ _ _ _) S GM) _)
    <- tgtmap`size GM (s _).

wf-output/cond : wf-output (out/cond _).

wf-output/args/0 : wf-output out/args/0.

wf-output/args/+ 
  : wf-output EO
    -> wf-output AO 
    -> wf-output (out/args/+ EO AO).



%%% Theorems

%theorem wf-output/expr-diff-effects
  : forall* 
    {RT} {XX1} {XX2}
    forall
    {-: wf-output (out/expr RT XX1)}
    exists
    {-: wf-output (out/expr RT XX2)}
    true.

- : wf-output/expr-diff-effects
    wf-output/expr/null wf-output/expr/null.

- : wf-output/expr-diff-effects
    (wf-output/expr/set SZ) (wf-output/expr/set SZ).

- : wf-output/expr-diff-effects
    (wf-output/expr/tgtmap SZ) (wf-output/expr/tgtmap SZ).

%worlds () (wf-output/expr-diff-effects _ _).
%total {} (wf-output/expr-diff-effects _ _).


%theorem reftyping-implies-wf-output
  : forall*
    {L1} {L2} {CM} {MM} {B} {K} 
    {E: term K} {Out: out K}
    forall
    {-: reftyping L1 CM MM B E Out L2}
    exists
    {-: wf-output Out}
    true.

%theorem reftyping-implies-wf-output/read/L1
  : forall* 
    {S} {GM1} {GM2} {GM} {XX} {F}
    {NN} {A} {C}
    forall
    {-: wf-output (out/expr (reftype/ (ty/ NN A C) S GM1) XX)}
    {-: set+nat2tgtmap S F GM2}
    {-: tgtmap`join GM1 GM2 GM}
    exists {N: nat}
    {-: tgtmap`size GM (s N)}
    true.

- : reftyping-implies-wf-output/read/L1
    (wf-output/expr/set S-SZ) S+F=>GM2 GM1+GM2=GM _ GM-SZ2
    <- set+nat2tgtmap-preserves-size S+F=>GM2 S-SZ GM2-SZ
    <- tgtmap`join-implies-leq GM1+GM2=GM GM1<=GM GM2<=GM
    <- tgtmap`size-total (GM-SZ:tgtmap`size GM I)
    <- tgtmap`leq-implies-size-le GM2<=GM GM2-SZ GM-SZ GE
    <- nat`ge-implies-plus GE _ P
    <- nat`plus-right-preserves-positive P nat`eq/ I- EQ
    <- tgtmap`size-respects-eq GM-SZ tgtmap`eq/ EQ GM-SZ2.

- : reftyping-implies-wf-output/read/L1
    (wf-output/expr/tgtmap GM1-SZ) S+F=>GM2 GM1+GM2=GM _ GM-SZ2
    <- tgtmap`join-implies-leq GM1+GM2=GM GM1<=GM GM2<=GM
    <- tgtmap`size-total (GM-SZ:tgtmap`size GM I)
    <- tgtmap`leq-implies-size-le GM1<=GM GM1-SZ GM-SZ GE
    <- nat`ge-implies-plus GE _ P
    <- nat`plus-right-preserves-positive P nat`eq/ I- EQ
    <- tgtmap`size-respects-eq GM-SZ tgtmap`eq/ EQ GM-SZ2.

%worlds () (reftyping-implies-wf-output/read/L1 _ _ _ _ _).
%total {} (reftyping-implies-wf-output/read/L1 _ _ _ _ _).


%theorem reftyping-implies-wf-output/read/L2
  : forall*
    {GM} {GMO} {T} {N}
    forall
    {-: tgtmap`size GM (s N)}
    {-: field-tgtmap T GM GMO}
    exists {M}
    {-: tgtmap`size GMO (s M)}
    true.

- : reftyping-implies-wf-output/read/L2 SZ field-tgtmap/unique _ SZ.

- : reftyping-implies-wf-output/read/L2 
    _ field-tgtmap/shared _ (tgtmap`size/+ tgtmap`size/0).

%worlds () (reftyping-implies-wf-output/read/L2 _ _ _ _).
%total {} (reftyping-implies-wf-output/read/L2 _ _ _ _).

    
- : reftyping-implies-wf-output
    (reftyping/lit _) (wf-output/expr/set (set`size/+ set`size/0)).

- : reftyping-implies-wf-output
    (reftyping/lit (L:cxt`lookup-object B O ty/null N))
    wf-output/expr/null.

- : reftyping-implies-wf-output
    reftyping/null wf-output/expr/null.

- : reftyping-implies-wf-output
    (reftyping/read T+GM=>GMP _ _ GM1+GM2=GM S+F=>GM2 _ _ RTYP-E)
    (wf-output/expr/tgtmap GMP-SZ)
    <- reftyping-implies-wf-output RTYP-E WF-EO
    <- reftyping-implies-wf-output/read/L1 WF-EO S+F=>GM2 GM1+GM2=GM _ GM-SZ
    <- reftyping-implies-wf-output/read/L2 GM-SZ T+GM=>GMP _ GMP-SZ.

- : reftyping-implies-wf-output
    (reftyping/write T+GM=>GMP _ _ _ _ _ GM1+GM2=GM S+F=>GM2 _ _ _ RTYP-E1)
    (wf-output/expr/tgtmap GMP-SZ)
    <- reftyping-implies-wf-output RTYP-E1 WF-EO
    <- reftyping-implies-wf-output/read/L1 WF-EO S+F=>GM2 GM1+GM2=GM _ GM-SZ
    <- reftyping-implies-wf-output/read/L2 GM-SZ T+GM=>GMP _ GMP-SZ.

- : reftyping-implies-wf-output
    (reftyping/let _ _ RTYP-F _) WF-FO2
    <- ({x} reftyping-implies-wf-output (RTYP-F x) WF-FO)
    <- wf-output/expr-diff-effects WF-FO WF-FO2.

- : reftyping-implies-wf-output
    (reftyping/if _ _ RTYP-E1 _) WF
    <- reftyping-implies-wf-output RTYP-E1 WF-E1
    <- wf-output/expr-diff-effects WF-E1 WF.

- : reftyping-implies-wf-output (reftyping/eq _ _ _) wf-output/cond.

- : reftyping-implies-wf-output (reftyping/not _) wf-output/cond.

- : reftyping-implies-wf-output (reftyping/and _ _ _) wf-output/cond.

- : reftyping-implies-wf-output reftyping/args/0 wf-output/args/0.

- : reftyping-implies-wf-output
    (reftyping/args/+ RTYP-A RTYP-E) (wf-output/args/+ WF-EO WF-AO)
    <- reftyping-implies-wf-output RTYP-A WF-AO
    <- reftyping-implies-wf-output RTYP-E WF-EO.


%theorem ref-calltyping-implies-wf-output
  : forall*
    {L} {CM} {MT} {AO} {Out}
    forall
    {-: ref-calltyping L CM AO MT Out}
    exists
    {-: wf-output Out}
    true.

- : ref-calltyping-implies-wf-output
    (ref-calltyping/call _) (wf-output/expr/set (set`size/+ set`size/0)).

- : ref-calltyping-implies-wf-output
    (ref-calltyping/args _ _ _ TYP) WF2
    <- ref-calltyping-implies-wf-output TYP WF
    <- wf-output/expr-diff-effects WF WF2.

- : ref-calltyping-implies-wf-output
    (CALL:ref-calltyping _ _ _ _
           (out/expr (reftype/ ty/null _ _) XX))
    wf-output/expr/null.
           
%worlds () (ref-calltyping-implies-wf-output _ _).
%total (T) (ref-calltyping-implies-wf-output T _).


- : reftyping-implies-wf-output
    (reftyping/call CTYP _ _ _) WF
    <- ref-calltyping-implies-wf-output CTYP WF.

- : reftyping-implies-wf-output
    (reftyping/const CTYP _ _ _ _) WF
    <- ref-calltyping-implies-wf-output CTYP WF.
    
%worlds (objvar) (reftyping-implies-wf-output _ _).
%total (T) (reftyping-implies-wf-output T _).
