%%% target map : location => set (fields)
%%% here by 'target' we mean field targets in the form of 'o.f'.


%{%
#define data set
#define DATA_NE 1
#define DATA_JOIN_COMMUTATIVE 1
#define DATA_JOIN_ASSOCIATIVE 1
#define DATA_JOIN_DETERMINISTIC 1

BEGIN_ELF
#include "map-base.elf"
#include "map-leq.elf"
#include "map-domain.elf"

%abbrev set`join = set`union.
%abbrev set`false-implies-join = set`false-implies-union.
%abbrev set`join-respects-eq = set`union-respects-eq.
%abbrev set`join-deterministic = set`union-deterministic.
%abbrev set`join-total = set`union-total.
%abbrev set`join-commutative = set`union-commutative.
%abbrev set`join-associative = set`union-associative.
%abbrev set`join-assoc-commutative* = set`union-assoc-commutative*.
%abbrev set`join-assoc-commutative = set`union-assoc-commutative.

#include "map-join.elf"
#include "map-restrict.elf"
END_ELF
#undef data
%}%

%%% renamings

%abbrev tgtmap = map.
%abbrev tgtmap/0 = map/0.
%abbrev tgtmap/+ = map/+.
%abbrev tgtmap/1 : nat -> tgtmap = [L] (tgtmap/+ L set/0 tgtmap/0).