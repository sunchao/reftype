%%% Class predicate map
%%% A map from class ids to their predicates
%%% Chao Sun
%%% $Id: predmap-base.elf,v 1.1 2013/05/07 04:23:36 csun Exp $
%%% Created at Feb 8th, 2012


%%% Functor Use

%{%
#define WORLDS gtermvar | predvar
#define data clspred
BEGIN_ELF

%theorem predicate`false-implies-eq :
	forall* {K} {K2} {P1:predicate K} {P2: predicate K2}
	forall {P:void}
        exists {Q:predicate`eq P1 P2}
	true.

%worlds (gtermvar | predvar) (predicate`false-implies-eq _ _).
%total { } (predicate`false-implies-eq _ _).


%theorem predicate`eq-reflexive :
	forall* {K}
	forall {P: predicate K}
	exists {D:predicate`eq P P}
	true.

- : predicate`eq-reflexive _ predicate`eq/.

%worlds (gtermvar | predvar) (predicate`eq-reflexive _ _).
%total { } (predicate`eq-reflexive _ _).


%theorem predicate`eq-symmetric :
	forall* {K} {P1:predicate K} {K2} {P2: predicate K2}
	forall {E:predicate`eq P1 P2}
	exists {F:predicate`eq P2 P1}
	true.

- : predicate`eq-symmetric (predicate`eq/) (predicate`eq/).

%worlds (gtermvar | predvar) (predicate`eq-symmetric _ _).
%total { } (predicate`eq-symmetric _ _).


%theorem predicate`eq-transitive :
	forall* {K} {P1:predicate K}
		{K2} {P2:predicate K2} {K3} {P3:predicate K3}
	forall {E1:predicate`eq P1 P2} {E2:predicate`eq P2 P3}
	exists {F:predicate`eq P1 P3}
	true.

- : predicate`eq-transitive (predicate`eq/) (predicate`eq/) (predicate`eq/).

%worlds (gtermvar | predvar) (predicate`eq-transitive _ _ _).
%total { } (predicate`eq-transitive _ _ _).

%abbrev clspred`eq = predicate`eq.
%abbrev clspred`eq/ = predicate`eq/.
%abbrev clspred`meta-eq = predicate`meta-eq.
%abbrev clspred`false-implies-eq = predicate`false-implies-eq.
%abbrev clspred`eq-reflexive = predicate`eq-reflexive.
%abbrev clspred`eq-symmetric = predicate`eq-symmetric.
%abbrev clspred`eq-transitive = predicate`eq-transitive.
%abbrev clspred`leq = clspred`eq.
%abbrev clspred`false-implies-leq = predicate`false-implies-eq.
%abbrev clspred`leq-reflexive = predicate`eq-reflexive.
%abbrev clspred`leq-transitive = predicate`eq-transitive.


%theorem clspred`leq-anti-symmetric :
        forall* {PD1:clspred} {PD2:clspred}
        forall  {L12: clspred`leq PD1 PD2} {L21: clspred`leq PD2 PD1}
        exists  {E: clspred`eq PD1 PD2}
        true.

- : clspred`leq-anti-symmetric E _ E.

%worlds (gtermvar | predvar) (clspred`leq-anti-symmetric _ _ _).
%total { } (clspred`leq-anti-symmetric _ _ _).


%theorem clspred`leq-respects-eq :
        forall* {PD1:clspred} {PD2:clspred} {PD3:clspred} {PD4:clspred}
        forall  {L1: clspred`leq PD1 PD2}
                {E1: clspred`eq PD1 PD3}
                {E2: clspred`eq PD2 PD4}
        exists  {L3: clspred`leq PD3 PD4}
        true.

- : clspred`leq-respects-eq L _ _ L.

%worlds (gtermvar | predvar) (clspred`leq-respects-eq _ _ _ _).
%total { } (clspred`leq-respects-eq _ _ _ _).


#include "map-base.elf"
#include "map-leq.elf"
#include "map-domain.elf"
END_ELF
#undef data
%}%


%%% Exports

%abbrev predmap = map.
%abbrev predmap/0 = map/0.
%abbrev predmap/+ = map/+.
