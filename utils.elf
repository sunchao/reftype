% utility theorems and abbreviations
% $Id: utils.elf,v 1.11 2013/11/18 17:52:30 csun Exp csun $

% abbreviations

null : object = (object/ z).	% null object

all : nat = z.

allperm : object -> permission = [o] (unitperm (basic o all null)).

fact : formula -> permission = ([F] unitperm (nonlinear F)).

%abbrev fldperm
  : nat -> (clspred -> object -> permission) ->
    (clspred -> object -> permission)
  = [F][PF] ([p][r] unitperm (precise-exists r F ([o] PF p o))).

conj2pred : (clspred -> object -> permission) -> clspred
  = [g] (predicate/Y ([f] predicate/+ ([o] predicate/0 (nested (g f o) o all)))).

one-predcall : clspred -> object -> permission
    = [p][o] (unitperm (nonlinear (predcall p (predargs/1 o)))).

nested-perm : object -> permission =
    [r] (unitperm (nonlinear (nested (allperm r) null all))).

half = (fraction/ (frac z one)).

%abbrev fldperm-fun
  : object -> nat -> (object -> permission) -> permission
 = [o][F][PF] unitperm (precise-exists o F ([v] PF v)).

nonnull-unique-perm : object -> clspred -> permission
    = [x][p] (combine (unitperm (nonlinear (neg (objequal x null))))
               (combine (allperm x)
                 (one-predcall p x))).

fperm : object ->
	nat -> (object -> permission) -> permission
	= [r][n][fp] (unitperm (precise-exists r n ([o] fp o))).

%abbrev obj-ne-null : object -> permission
	= ([x] unitperm (nonlinear (neg (objequal x null)))).

shared : nat = z.


% about 1/2 + 1/2 = 1

%abbrev 0 = z.
%abbrev 1 = (s z).
%abbrev 2 = (s 1).
%abbrev 4 = (s (s 2)).
%abbrev 1/2=1/2 : rat`abs (rat`frac z one) 1 2
	= rat`abs/frac nat`plus/z nat`times/z
    (nat`plus/s nat`plus/z) rat`abs/whole.
%abbrev 1*2=2 : nat`times 1 2 2 = nat`times/s* nat`plus/z nat`times/z.
%abbrev 2+2=4 : nat`plus 2 2 4 = nat`plus/s (nat`plus/s nat`plus/z).
%abbrev 2*2=4 : nat`times 2 2 4 = nat`times/s* 2+2=4 1*2=2.
%abbrev 4/4=1 : rat`rep 4 4 one = rat`rep/=.
%abbrev 1/2+1/2=1 : rat`add (rat`frac z one) (rat`frac z one) one
	= rat`add/ 4/4=1 2+2=4 2*2=4 1*2=2 1*2=2 1/2=1/2 1/2=1/2.



% object

%theorem object`eq-symmetric
  : forall* {O1:object} {O2}
    forall {OE: object`eq O1 O2}
    exists {OE: object`eq O2 O1}
    true.

- : object`eq-symmetric object`eq/ object`eq/.

%worlds (objvar) (object`eq-symmetric _ _).
%total { } (object`eq-symmetric _ _).


%theorem object`eq-transitive
  : forall* {O1:object} {O2} {O3}
    forall {O1=O2: object`eq O1 O2} {O2=O3: object`eq O2 O3}
    exists {O1=O3: object`eq O1 O3}
    true.

- : object`eq-transitive object`eq/ object`eq/ object`eq/.

%worlds (objvar) (object`eq-transitive _ _ _).
%total {} (object`eq-transitive _ _ _).


% extra theorems about set

%theorem set`size-zero-implies-empty
  : forall* {S}
    forall {Z: set`size S z}
    exists {E: set`eq S set/0}
    true.

- : set`size-zero-implies-empty set`size/0 set`eq/.

%worlds () (set`size-zero-implies-empty _ _).
%total {} (set`size-zero-implies-empty _ _).


%theorem set`not-member-add-emptyset-implies-eq
  : forall* {S} {N}
    forall {F: set`not-member S N}
    {U: set`add S N (set/1 N)}
    exists {EQ: set`eq S set/0}
    true.

- : set`not-member-add-emptyset-implies-eq set`not-member/0 set`update/0 set`eq/.

- : set`not-member-add-emptyset-implies-eq NM (set`update/= NE) SE
    <- set`member-not-member-contradiction (set`lookup/= NE) NM F
    <- set`false-implies-eq F SE.

%worlds () (set`not-member-add-emptyset-implies-eq _ _ _).
%total { } (set`not-member-add-emptyset-implies-eq _ _ _).


%theorem set`not-member-add-size-implies-empty
  : forall* {S} {N} {SP}
    forall {F: set`not-member S N}
    {U: set`add S N SP}
    {SZ: set`size SP (s z)}
    exists {EQ: set`eq S set/0}
    true.

- : set`not-member-add-size-implies-empty
    set`not-member/0 set`update/0 (set`size/+ set`size/0) set`eq/.

- : set`not-member-add-size-implies-empty NM (set`update/= NE) _ SE
    <- set`member-not-member-contradiction (set`lookup/= NE) NM F
    <- set`false-implies-eq F SE.

%worlds () (set`not-member-add-size-implies-empty _ _ _ _).
%total { } (set`not-member-add-size-implies-empty _ _ _ _).


%theorem set`size-ne-implies-ne
  : forall* {S1} {S2} {N1} {N2}
    forall {Z1: set`size S1 N1}
    {Z2: set`size S2 N2}
    {NE: nat`ne N1 N2}
    exists {SNE: set`ne S1 S2}
    true.

%theorem set`size-ne-implies-ne/L
  : forall* {S1} {S2} {N1} {N2}
    forall {Z1: set`size S1 N1}
    {Z2: set`size S2 N2}
    {NE: nat`ne N1 N2}
    {B} {E?: set`eq? S1 S2 B}
    exists {SNE: set`ne S1 S2}
    true.

- : set`size-ne-implies-ne/L Z1 Z2 N1<>N2 true set`eq?/yes S1<>S2
    <- set`size-deterministic Z1 Z2 set`eq/ N1=N2
    <- nat`eq-ne-implies-false N1=N2 N1<>N2 F
    <- set`false-implies-ne F S1<>S2.

- : set`size-ne-implies-ne/L Z1 Z2 N1<>N2 false (set`eq?/no S1<>S2) S1<>S2.

- : set`size-ne-implies-ne Z1 Z2 N1<>NE S1<>S2
    <- set`eq?-total E?
    <- set`size-ne-implies-ne/L Z1 Z2 N1<>NE _ E? S1<>S2.

%worlds () (set`size-ne-implies-ne/L _ _ _ _ _ _).
%total {} (set`size-ne-implies-ne/L _ _ _ _ _ _).

%worlds () (set`size-ne-implies-ne _ _ _ _).
%total {} (set`size-ne-implies-ne _ _ _ _).


%%% The following two theorems are not used anywhere.

%theorem set`disjoint-union-implies-size-plus
  : forall* {S1} {S2} {S} {N1} {N2}
    forall {Z1: set`size S1 N1}
    {Z2: set`size S2 N2}
    {X: set`disjoint S1 S2}
    {U: set`union S1 S2 S}
    exists {N} {Z: set`size S N}
    {A: nat`plus N1 N2 N}
    true.

- : set`disjoint-union-implies-size-plus S1 S2 DSJ U _ S3 P
    <- set`size-total S3
    <- set`size-commute-disjoint-union* S1 S2 S3 DSJ U P.

%worlds () (set`disjoint-union-implies-size-plus _ _ _ _ _ _ _).
%total {} (set`disjoint-union-implies-size-plus _ _ _ _ _ _ _).


%theorem set`disjoint-union-implies-size-plus*
  : forall* {S1} {S2} {S} {N1} {N2} {N}
    forall {Z1: set`size S1 N1}
    {Z2: set`size S2 N2}
    {X: set`disjoint S1 S2}
    {U: set`union S1 S2 S}
    {Z: set`size S N}
    exists {A: nat`plus N1 N2 N}
    true.

- : set`disjoint-union-implies-size-plus* S1 S2 DSJ U S3 P
    <- set`size-commute-disjoint-union* S1 S2 S3 DSJ U P.

%worlds () (set`disjoint-union-implies-size-plus* _ _ _ _ _ _).
%total {} (set`disjoint-union-implies-size-plus* _ _ _ _ _ _).


%theorem set`remove-not-member-add-same-result
  : forall* {R} {S} {S'} {Q} {N}
    forall {RM: set`remove R S Q}
    {F: set`not-member R N}
    {A: set`add S' N S}
    exists {RM: set`remove R S' Q}
    true.

- : set`remove-not-member-add-same-result R/S=Q N!<R S'+N=S R/S'=Q
    <- set`add-implies-unit-union S'+N=S S'UN=S
    <- set`remove-associates-union-converse S'UN=S R/S=Q P R/S'=P P/N=Q
    <- set`remove-implies-leq R/S'=P P<=R
    <- set`not-member-respects-geq N!<R P<=R N!<P
    <- set`not-member-implies-unit-disjoint N!<P P^N
    <- set`disjoint-implies-remove-nothing P^N P/N=P
    <- set`remove-unique P/N=P P/N=Q set`eq/ set`eq/ P=Q
    <- set`remove-respects-eq R/S'=P set`eq/ set`eq/ P=Q R/S'=Q.

%worlds () (set`remove-not-member-add-same-result _ _ _ _).
%total {} (set`remove-not-member-add-same-result _ _ _ _).


%theorem set`remove-not-member-add-same-result-converse
  : forall* {R} {S} {S'} {Q} {N}
    forall {RM: set`remove R S' Q}
    {F: set`not-member R N}
    {A: set`add S' N S}
    exists {RM: set`remove R S Q}
    true.

- : set`remove-not-member-add-same-result-converse R/S'=Q N!<R S'+N=S R/S=Q
    <- set`remove-total Q/N=P
    <- set`add-implies-unit-union S'+N=S S'UN=S
    <- set`remove-associates-union* R/S'=Q Q/N=P S'UN=S R/S=P
    <- set`remove-implies-leq R/S'=Q Q<=R
    <- set`not-member-respects-geq N!<R Q<=R N!<Q
    <- set`not-member-implies-unit-disjoint N!<Q Q^N
    <- set`disjoint-implies-remove-nothing Q^N Q/N=Q
    <- set`remove-unique Q/N=P Q/N=Q set`eq/ set`eq/ P=Q
    <- set`remove-respects-eq R/S=P set`eq/ set`eq/ P=Q R/S=Q.

%worlds () (set`remove-not-member-add-same-result-converse _ _ _ _).
%total {} (set`remove-not-member-add-same-result-converse _ _ _ _).


% not quite the same as the above, but hard to come up with a good name.

%theorem set`remove-not-member-add-same-result-converse*
  : forall* {R} {R'} {S} {S'} {Q} {N}
    forall {RM: set`remove R S Q}
    {F: set`not-member R' N} {A: set`add R' N R}
    {F: set`not-member S' N} {A: set`add S' N S}
    exists {RM: set`remove R' S' Q}
    true.

- : set`remove-not-member-add-same-result-converse*
    R/S=Q N!<R' R'+N=R N!<S' S'+N=S R'/S'=Q
    <- set`add-implies-member S'+N=S N<-S
    <- set`add-implies-unit-union R'+N=R R'UN=R
    <- set`remove-right-distributes-over-union R'UN=R R/S=Q P K R'/S=P N/S=K PUK=Q
    <- set`member-implies-unit-leq N<-S N<=S
    <- set`leq-implies-remove-all N<=S N/S=E
    <- set`remove-unique N/S=E N/S=K set`eq/ set`eq/ E=K
    <- set`union-unique set`union/R PUK=Q set`eq/ E=K P=Q
    <- set`remove-respects-eq R'/S=P set`eq/ set`eq/ P=Q R'/S=Q
    <- set`remove-not-member-add-same-result R'/S=Q N!<R' S'+N=S R'/S'=Q.

%worlds () (set`remove-not-member-add-same-result-converse* _ _ _ _ _ _).
%total {} (set`remove-not-member-add-same-result-converse* _ _ _ _ _ _).


% a variant of set`add-commutes which doesn't require ne.

%theorem set`add-commutes-no-ne
  : forall* {A} {B} {C} {N} {M}
    forall {U1: set`add A N B}
    {U2: set`add B M C}
    exists {D} {U3: set`add A M D}
    {U4: set`add D N C}
    true.

%theorem set`add-commutes-no-ne/L
  : forall* {A} {B} {C} {N} {M} {P}
    forall {U1: set`add A N B}
    {U2: set`add B M C} {E: nat`eq? N M P}
    exists {D} {U3: set`add A M D}
    {U4: set`add D N C}
    true.

- : set`add-commutes-no-ne/L A+N=B B+N=C nat`eq?/yes _ A+N=B B+N=C.

- : set`add-commutes-no-ne/L A+N=B B+M=C (nat`eq?/no NE) _ A+M=D B+N=C
    <- set`add-commutes A+N=B B+M=C NE _ A+M=D B+N=C.

%worlds () (set`add-commutes-no-ne/L _ _ _ _ _ _).
%total {} (set`add-commutes-no-ne/L _ _ _ _ _ _).

- : set`add-commutes-no-ne U1 U2 _ U3 U4
    <- nat`eq?-total E?
    <- set`add-commutes-no-ne/L U1 U2 E? _ U3 U4.

%worlds () (set`add-commutes-no-ne _ _ _ _ _).
%total {} (set`add-commutes-no-ne _ _ _ _ _).


%theorem set`unit-union-same
  : forall* {N}
    exists {U: set`union (set/1 N) (set/1 N) (set/1 N)}
    true.

- : set`unit-union-same (set`union/= set`union/L nat`eq/).

%worlds () (set`unit-union-same _).
%total { } (set`unit-union-same _).


%theorem set`unit-union-same2
  : forall* {N1} {N2} {S}
    forall {U: set`union (set/1 N1) (set/1 N2) S}
    {E: nat`eq N1 N2}
    exists {E: set`eq S (set/1 N1)}
    true.

- : set`unit-union-same2 (set`union/= _ nat`eq/) nat`eq/ set`eq/.

- : set`unit-union-same2 (set`union/< _ P) NE SE
    <- nat`plus-implies-gt P nat`eq/ GT'
    <- nat`gt-respects-eq GT' nat`eq/ NE GT
    <- nat`gt-anti-reflexive GT F
    <- set`false-implies-eq F SE.

- : set`unit-union-same2 (set`union/> _ P) NE SE
    <- nat`plus-implies-gt P nat`eq/ GT'
    <- nat`gt-respects-eq GT' NE nat`eq/ GT
    <- nat`gt-anti-reflexive GT F
    <- set`false-implies-eq F SE.

%worlds () (set`unit-union-same2 _ _ _).
%total { } (set`unit-union-same2 _ _ _).


%theorem set`remove-empty-implies-equal
  : forall* {S1} {S2}
    forall {S1/0=S2: set`remove S1 set/0 S2}
    exists {S1=S2: set`eq S1 S2}
    true.

%worlds () (set`remove-empty-implies-equal _ _).
%trustme %total { } (set`remove-empty-implies-equal _ _).


% extra theorems about nat

%theorem nat`plus-implies-gt-contradiction
  : forall* {N1} {N2}
    forall {P: nat`plus (s N1) N2 N2}
    exists {F: void}
    true.

- : nat`plus-implies-gt-contradiction P F
    <- nat`plus-implies-gt P nat`eq/ GT
    <- nat`gt-anti-reflexive GT F.

%worlds () (nat`plus-implies-gt-contradiction _ _).
%total {} (nat`plus-implies-gt-contradiction _ _).


%theorem ge-succ-implies-succ
  : forall* {N1} {N2}
    forall {GE: nat`ge N1 (s N2)}
    exists {N3} {E: nat`eq N1 (s N3)}
    true.

- : ge-succ-implies-succ (nat`ge/= nat`eq/) _ nat`eq/.

- : ge-succ-implies-succ (nat`ge/> GT) _ EQ
    <- nat`gt-implies-positive GT _ EQ.

%worlds () (ge-succ-implies-succ _ _ _).
%total (G) (ge-succ-implies-succ G _ _).


%theorem ge-self-succ-contradiction
  : forall* {N}
    forall {N>=N: nat`ge N (s N)}
    exists {F:void}
    true.

- : ge-self-succ-contradiction (nat`ge/> GT) F
    <- nat`gt-transitive GT (nat`gt/1) GT'
    <- nat`gt-anti-reflexive GT' F.

- : ge-self-succ-contradiction (nat`ge/= EQ) F
    <- nat`succ-contradiction EQ F.

%worlds () (ge-self-succ-contradiction _ _).
%total { } (ge-self-succ-contradiction _ _).


%theorem pair2nat-total-s
  : forall {N} {M}
    exists {K} {SN+M=SK: pair2nat (pair/ (s N) M) (s K)}
    true.

%theorem pair2nat-total-s/L
  : forall {N} {M} {Q} {SN+M=SK: pair2nat (pair/ (s N) M) Q}
    exists {K} {SN+M=SK: pair2nat (pair/ (s N) M) (s K)}
    true.

%theorem pair2nat-total-s/F
  : forall* {N} {M}
    forall {F:void}
    exists {K} {SN+M=SK: pair2nat (pair/ (s N) M) (s K)}
    true.

- : pair2nat-total-s/L N M z SN+M=Z K SN+M=SK
    <- nat2pair-deterministic/0 SN+M=Z PE
    <- pair-eq-implies-eq PE E1 E2
    <- nat`eq-symmetric E1 E1S
    <- nat`eq-contradiction E1S F
    <- pair2nat-total-s/F F K SN+M=SK.

- : pair2nat-total-s/L N M (s K) SN+M=SK K SN+M=SK.

- : pair2nat-total-s N M K SN+M=SK
    <- pair2nat-total SN+M=Q
    <- pair2nat-total-s/L N M Q SN+M=Q K SN+M=SK.

%worlds () (pair2nat-total-s/F _ _ _).
%total { } (pair2nat-total-s/F _ _ _).

%worlds () (pair2nat-total-s/L _ _ _ _ _ _).
%total { } (pair2nat-total-s/L _ _ _ _ _ _).

%worlds () (pair2nat-total-s _ _ _ _).
%total { } (pair2nat-total-s _ _ _ _).


% permission transformation shortcuts

%abbrev equiv/swap
  : equiv ((A , B) , C) ((A , C) , B)
    = (equiv/transitive3
        (equiv/symmetric equiv/associate)
        (equiv/combine equiv/reflexive equiv/commute)
        (equiv/associate)).

%abbrev equiv/move-to-back-2 : equiv (A , B) (B , A) = equiv/commute.

%abbrev equiv/move-to-back-3
  : equiv (A , (B , C)) (B , (C , A))
    = (equiv/transitive equiv/reorder (equiv/combine equiv/reflexive equiv/move-to-back-2)).

%abbrev equiv/move-to-back-4
  : equiv (A , (B , (C , D))) (B , (C , (D , A)))
    = (equiv/transitive equiv/reorder (equiv/combine equiv/reflexive equiv/move-to-back-3)).

%abbrev equiv/move-to-back-5
  : equiv (A , (B , (C , (D , E)))) (B , (C , (D , (E , A))))
    = (equiv/transitive equiv/reorder (equiv/combine equiv/reflexive equiv/move-to-back-4)).

%abbrev equiv/move-to-back-6
  : equiv (A , (B , (C , (D , (E , F))))) (B , (C , (D , (E , (F , A)))))
    = (equiv/transitive equiv/reorder (equiv/combine equiv/reflexive equiv/move-to-back-5)).

%abbrev equiv/swap-middle
  : equiv ((A , B) , (C , D)) ((A , C) , (B , D))
    = equiv/transitive3
      (equiv/symmetric equiv/associate)
      (equiv/combine equiv/reflexive equiv/reorder)
      (equiv/associate).

%abbrev implies/nonlinear2empty
  : implies (unitperm (nonlinear G)) empty
    = (implies/trans
        (implies/nonlinear bimplies/tt)
        (implies/true2empty)).

%theorem pullout-fldperm-scale
  : forall* {CP} {PF} {Pi1} {Pi2} {Q}
    forall {I: {x:object} implies (one-predcall CP x)
                 (unitperm (nonlinear (nested (PF x) x all)))}
    exists {I: {x:object}
               implies
               (combine (scale Q (nonnull-unique-perm x CP))
                 (combine
                   (unitperm
                     (encumbered
                       (scale Q (nonnull-unique-perm x CP)) Pi1)) Pi2))
               (combine (scale Q (PF x))
                 (combine (unitperm (encumbered (scale Q (PF x)) Pi1)) Pi2))}
    true.

- : pullout-fldperm-scale IMP
    ([r] implies/trans9
      (implies/combine
        (implies/equiv
          (equiv/transitive
            (equiv/distribute)
            (equiv/commute)))
        (implies/combine
          (implies/trans
            (implies/equiv-encumbered
              (equiv/transitive
                (equiv/distribute)
                (equiv/combine
                  (equiv/reflexive)
                  (equiv/transitive
                    (equiv/distribute)
                    (equiv/commute))))
              (equiv/reflexive))
            (implies/combine-assoc-encumbered))
          (implies/reflexive)))
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/combine
        (implies/reflexive)
        (implies/trans
          (implies/equiv equiv/associate)
          (implies/combine
            (implies/linear-modus-ponens)
            (implies/reflexive))))
      (implies/combine
        (implies/trans3
          (implies/equiv equiv/distribute)
          (implies/combine
            (implies/reflexive)
            (implies/trans
              (implies/scale-from-formula)
              (implies/duplicate)))
          (implies/equiv equiv/associate))
        (implies/combine
          (implies/combine-assoc-encumbered)
          (implies/reflexive)))
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/combine
        (implies/reflexive)
        (implies/trans
          (implies/equiv equiv/associate)
          (implies/combine
            (implies/trans
              (implies/combine
                (implies/scale-into-formula)
                (implies/reflexive))
              (implies/linear-modus-ponens))
            (implies/reflexive))))
      (implies/combine
        (implies/trans6
          (implies/equiv equiv/commute)
          (implies/combine
            (implies/trans
              (IMP r)
              (implies/scale-into-formula))
            (implies/reflexive))
          (implies/equiv (equiv/symmetric equiv/distribute))
          (implies/scale implies/carve)
          (implies/equiv equiv/distribute)
          (implies/combine
            (implies/reflexive)
            (implies/scale-distribute-encumbered)))
        (implies/reflexive))
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/combine
        (implies/reflexive)
        (implies/trans
          (implies/equiv equiv/associate)
          (implies/combine
            (implies/chain-implication)
            (implies/reflexive))))).

%worlds (objvar) (pullout-fldperm-scale _ _).
%total {} (pullout-fldperm-scale _ _).


%theorem pullout-fldperm
  : forall* {CP} {PF} {Pi1} {Pi2}
    forall {I: {x:object} implies (one-predcall CP x)
                 (unitperm (nonlinear (nested (PF x) x all)))}
    exists {I: {x:object}
               implies
               (combine (nonnull-unique-perm x CP)
                 (combine
                   (unitperm
                     (encumbered
                       (nonnull-unique-perm x CP) Pi1)) Pi2))
               (combine (PF x)
                 (combine (unitperm (encumbered (PF x) Pi1)) Pi2))}
    true.

- : pullout-fldperm IMP
    ([x] implies/trans3
      (implies/combine
        (implies/equiv (equiv/symmetric equiv/one))
        (implies/combine
          (implies/equiv-encumbered (equiv/symmetric equiv/one) equiv/reflexive)
          (implies/reflexive)))
      (IMP2 x)
      (implies/combine
        (implies/equiv (equiv/one))
        (implies/combine
          (implies/equiv-encumbered (equiv/one) equiv/reflexive)
          (implies/reflexive))))
    <- pullout-fldperm-scale IMP IMP2.

%worlds (objvar) (pullout-fldperm _ _).
%total { } (pullout-fldperm _ _).


%abbrev gen-objequal-self
  : {o} implies empty (unitperm (nonlinear (disj (objequal o o) (neg t))))
    = [o] implies/trans
      (implies/empty2true)
      (implies/nonlinear
        (bimplies/trans
          (bimplies/objequal-reflexive)
          (bimplies/trans
            (bimplies/add-negneg)
            (bimplies/neg
              (bimplies/conj-weaken/false)
              (bool`ne/FT))))).

%abbrev gen-objequal-self-cond
  : {o} implies empty (unitperm (conditional (objequal o o) empty
                          (unitperm (nonlinear f))))
    = ([o] implies/trans4
        (implies/empty2true)
        (implies/nonlinear bimplies/objequal-reflexive)
        (implies/equiv (equiv/symmetric equiv/identity))
        (implies/cond-intro)).

%abbrev add-encumber
  : implies (combine (unitperm (encumbered Pi1 Pi2)) Pi3)
              (unitperm (encumbered Pi1 (Pi2 , Pi3)))
    = (implies/trans
        (implies/combine
          (implies/reflexive)
          (implies/trans3
            (implies/equiv (equiv/symmetric equiv/identity))
            (implies/combine
              (implies/reflexive)
              (implies/trans3
                (implies/self-implication)
                (implies/equiv-encumbered
                  (equiv/commute)
                  (equiv/reflexive))
                (implies/combine-assoc-encumbered)))
            (implies/linear-modus-ponens)))
        (implies/chain-implication)).

%abbrev repack-fldperm
  : {v} implies (scale Q (unitperm (basic O F v)))
    (unitperm (encumbered (scale Q (Pi v))
                (scale Q (unitperm (precise-exists O F ([v] (Pi v)))))))
    = [v]
      (implies/trans3
        (implies/equiv (equiv/symmetric equiv/identity))
        (implies/combine
          (implies/reflexive)
          (implies/trans5
            (implies/equiv (equiv/symmetric equiv/zero))
            (implies/scale (implies/gen-pack-encumber v))
            (implies/scale-distribute-encumbered)
            (implies/equiv-encumbered
              (equiv/distribute)
              (equiv/reflexive))
            (implies/combine-assoc-encumbered)))
        (implies/linear-modus-ponens)).


%abbrev disj-to-objequal
  : {o}{r} bimplies true (disj (objequal o r) f) (objequal o r)
    = ([o][r] bimplies/trans
        (bimplies/neg
          (bimplies/trans
            (bimplies/conj/XX
              (bimplies/reflexive)
              (bimplies/rem-negneg))
            (bimplies/conj-true))
          (bool`ne/FT))
        (bimplies/rem-negneg)).

%abbrev cond-to-objequal
  : {o}{r} implies
    (unitperm (conditional (objequal o r)
                empty (unitperm (nonlinear f))))
    (unitperm (nonlinear (objequal o r)))
    = ([o][r] implies/trans5
        (implies/cond-gen-inner)
        (implies/cond-inner
          (bimplies/reflexive)
          (bimplies/reflexive)
          (implies/reflexive)
          (implies/trans
            (implies/equiv equiv/commute)
            (implies/combine
              (implies/contradiction)
              (implies/trans
                (implies/nonlinear bimplies/tt)
                (implies/true2empty)))))
        (implies/cond-pull)
        (implies/combine implies/reflexive implies/cond-equal)
        (implies/equiv equiv/identity)).

%abbrev objequal-to-disj
  : {o}{r} bimplies true (objequal o r) (disj (objequal o r) f)
    = [o][r] bimplies/trans
      (bimplies/add-negneg)
      (bimplies/neg
        (bimplies/conj-weaken/false)
        (bool`ne/FT)).

% extra theorems about permission

%theorem object-preserves-eq :
	forall* {N1} {N2}
	forall {E:nat`eq N1 N2}
	exists {OE:object`eq (object/ N1) (object/ N2)}
	true.

- : object-preserves-eq nat`eq/ object`eq/.

%worlds (objvar) (object-preserves-eq _ _).
%total { } (object-preserves-eq _ _).


%theorem equiv-respects-object-eq
  : forall* {O1} {O2}
    forall {PF: object -> permission} {E: object`eq O1 O2}
    exists {PFE: equiv (PF O1) (PF O2)}
    true.

- : equiv-respects-object-eq _ object`eq/ equiv/reflexive.

%worlds (objvar) (equiv-respects-object-eq _ _ _).
%total { } (equiv-respects-object-eq _ _ _).


%theorem equiv-respects-object-nat-eq
  : forall* {O1} {O2} {N1} {N2}
    forall {PF: object -> nat -> permission}
    {OE: object`eq O1 O2} {NE: nat`eq N1 N2}
    exists {EQV: equiv (PF O1 N1) (PF O2 N2)}
    true.

- : equiv-respects-object-nat-eq _ object`eq/ nat`eq/ equiv/reflexive.

%worlds (objvar) (equiv-respects-object-nat-eq _ _ _ _).
%total { } (equiv-respects-object-nat-eq _ _ _ _).


%theorem false-implies-transform
  : forall* {K} {O1:output K} {O2:output K}
    forall {F:void}
    exists {T: transform O1 O2}
    true.

%worlds () (false-implies-transform _ _).
%total {} (false-implies-transform _ _).


%theorem implies-respects-permission-eq
  : forall* {P1} {P2} {P3} {P4}
    forall {Pi1=>Pi2: implies P1 P2}
    {P1=P3: permission`eq P1 P3}
    {P2=P4: permission`eq P2 P4}
    exists {P3=>P4: implies P3 P4}
    true.

- : implies-respects-permission-eq I permission`eq/ permission`eq/ I.

%worlds (objvar) (implies-respects-permission-eq _ _ _ _).
%total {} (implies-respects-permission-eq _ _ _ _).


%theorem permission`eq-implies-equiv
  : forall* {Pi1} {Pi2}
    forall {EQ: permission`eq Pi1 Pi2}
    exists {EQV: equiv Pi1 Pi2}
    true.

- : permission`eq-implies-equiv permission`eq/ equiv/reflexive.

%worlds (objvar | fracvar) (permission`eq-implies-equiv _ _).
%total {} (permission`eq-implies-equiv _ _).


%theorem permission`combine-preserves-eq
  : forall* {Pi1} {Pi2} {Pi3} {Pi4}
    forall {EQ: permission`eq Pi1 Pi3}
    {EQ: permission`eq Pi2 Pi4}
    exists {EQ: permission`eq (Pi1 , Pi2) (Pi3 , Pi4)}
    true.

- : permission`combine-preserves-eq
    permission`eq/ permission`eq/ permission`eq/.

%worlds (objvar) (permission`combine-preserves-eq _ _ _).
%total {} (permission`combine-preserves-eq _ _ _).


% Need "scale" because there is no "equiv/scale"
%theorem permission`precise-exists-respects-eq
  : forall* {Pi1} {Pi2} {F1} {F2} {O1} {O2}
    forall {OE: object`eq O1 O2} {FE: nat`eq F1 F2}
    {E: {x} permission`eq (Pi1 x) (Pi2 x)}
    exists {EQV: permission`eq
                 (unitperm (precise-exists O1 F1 Pi1))
                 (unitperm (precise-exists O2 F2 Pi2))}
    true.

- : permission`precise-exists-respects-eq
    object`eq/ nat`eq/ ([_] permission`eq/) (permission`eq/).

%worlds (objvar) (permission`precise-exists-respects-eq _ _ _ _).
%total {} (permission`precise-exists-respects-eq _ _ _ _).


%theorem permission`implies-respects-eq-left
  : forall* {P1} {P2} {P}
    forall {EQ: permission`eq P1 P2}
    {IMP: implies P1 P}
    exists {IMP: implies P2 P}
    true.

- : permission`implies-respects-eq-left permission`eq/ IMP IMP.

%worlds () (permission`implies-respects-eq-left _ _ _).
%total {} (permission`implies-respects-eq-left _ _ _).


%theorem permission`implies-respects-eq-right
  : forall* {P1} {P2} {P}
    forall {EQ: permission`eq P1 P2}
    {IMP: implies P P1}
    exists {IMP: implies P P2}
    true.

- : permission`implies-respects-eq-right permission`eq/ IMP IMP.

%worlds () (permission`implies-respects-eq-right _ _ _).
%total {} (permission`implies-respects-eq-right _ _ _).


%theorem permission`apply-object-preserves-eq
  : forall* {PF:object -> permission} {PF'} {O} {O'}
    forall {PFE: {o} permission`eq (PF o) (PF' o)}
    {OE: object`eq O O'}
    exists {PE: permission`eq (PF O) (PF' O')}
    true.

- : permission`apply-object-preserves-eq ([_] permission`eq/) object`eq/
    permission`eq/.

%worlds (objvar) (permission`apply-object-preserves-eq _ _ _).
%total {} (permission`apply-object-preserves-eq _ _ _).


%theorem permission`apply-object-implies*
  : forall* {PF:object -> permission} {PF'} {O'}
    forall {O} {PFE: {o} implies (PF o) (PF' o)}
    {OE: object`eq O O'}
    exists {PE: implies (PF O) (PF' O')}
    true.

- : permission`apply-object-implies* O IMP object`eq/ (IMP O).

%worlds (objvar) (permission`apply-object-implies* _ _ _ _).
%total { } (permission`apply-object-implies* _ _ _ _).

%abbrev permission`apply-object-implies = permission`apply-object-implies* _.


%theorem clspred-equal-implies-one-predcall-equiv
  : forall* {CP1} {CP2}
    forall {PE: predicate`eq CP1 CP2}
    exists {EQV: {x} equiv (one-predcall CP1 x) (one-predcall CP2 x)}
    true.

- : clspred-equal-implies-one-predcall-equiv predicate`eq/ ([_] equiv/reflexive).

%worlds (objvar) (clspred-equal-implies-one-predcall-equiv _ _).
%total { } (clspred-equal-implies-one-predcall-equiv _ _).


%theorem permission-respects-object-eq
  : forall* {O1} {O2}
    forall {PF: object -> permission} {EQ: object`eq O1 O2}
    exists {EQV: equiv (PF O1) (PF O2)}
    true.

- : permission-respects-object-eq _ object`eq/ equiv/reflexive.

%worlds (objvar) (permission-respects-object-eq _ _ _).
%total { } (permission-respects-object-eq _ _ _).
