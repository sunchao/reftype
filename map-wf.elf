%%% Well-Formed Map: all values are well-formed.
%%% $Id: map-wf.elf,v 1.2 2013/05/28 19:09:43 csun Exp csun $


%%% Definition

wf : map -> type.

wf/0 : wf map/0.

wf/+ : data`wf D
       -> wf M
       -> wf (map/+ _ D M).



%%% Theorems

false-implies-wf : void -> wf M -> type.
%mode +{V} +{M} -{W:wf M} false-implies-wf V W.

%worlds () (false-implies-wf _ _).
%total { } (false-implies-wf _ _).


wf-respects-eq
  : wf M
    -> eq M MP
    -> wf MP
    -> type.
%mode wf-respects-eq +W +E -WP.

- : wf-respects-eq W eq/ W.

%worlds () (wf-respects-eq _ _ _).
%total { } (wf-respects-eq _ _ _).


wf-inversion
  : wf (map/+ _ D M)
    -> data`wf D
    -> wf M
    -> type.
%mode wf-inversion +W -DW -WP.

- : wf-inversion (wf/+ DW MW) DW MW.

%worlds () (wf-inversion _ _ _).
%total { } (wf-inversion _ _ _).


update-preserves-wf
  : wf M 
    -> data`wf D
    -> update M N D MP
    -> wf MP
    -> type.
%mode update-preserves-wf +MW1 +DW +U -MW2.

- : update-preserves-wf wf/0 DW _ (wf/+ DW wf/0).

- : update-preserves-wf
    (wf/+ DW MW) DWP (update/= NE) (wf/+ DWP MW).

- : update-preserves-wf
    (wf/+ DW MW) DWP (update/< P)
    (wf/+ DWP (wf/+ DW MW)).

- : update-preserves-wf
    (wf/+ DW MW) DWP (update/> UD P) (wf/+ DW MWP)
    <- update-preserves-wf MW DWP UD MWP.

%worlds () (update-preserves-wf _ _ _ _).
%total (U) (update-preserves-wf _ _ U _).



fresh-update-preserves-wf-converse
  : wf MP
    -> fresh M N
    -> update M N D MP
    -> wf M
    -> set`wf D
    -> type.
%mode fresh-update-preserves-wf-converse +W1 +F +U -W2 -W3.

- : fresh-update-preserves-wf-converse 
    (wf/+ WF-S wf/0) fresh/0 update/0 wf/0 WF-S.

- : fresh-update-preserves-wf-converse
    WP (fresh/< GT) U (wf/+ DW W) DW2
    <- nat`gt-implies-plus GT _ P
    <- update/<-inversion U P EQ
    <- eq-symmetric EQ EQx
    <- wf-respects-eq WP EQx WPx
    <- wf-inversion WPx DW2 Wx
    <- wf-inversion Wx DW W.

- : fresh-update-preserves-wf-converse
    WP (fresh/> F P) U (wf/+ DW2 W1) DW1
    <- update/>-inversion U P _ UP EQ
    <- eq-symmetric EQ EQx
    <- wf-respects-eq WP EQx WPx
    <- wf-inversion WPx DW2 W2
    <- fresh-update-preserves-wf-converse W2 F UP W1 DW1.
      
%worlds () (fresh-update-preserves-wf-converse _ _ _ _ _).
%total (F) (fresh-update-preserves-wf-converse _ F _ _ _).
    

shift-preserves-wf 
  : wf M
    -> shift N M MP
    -> wf MP
    -> type.
%mode shift-preserves-wf +W1 +S -W2.

- : shift-preserves-wf wf/0 _ wf/0.

- : shift-preserves-wf (wf/+ MW DW)
    (shift/+ P) (wf/+ MW DW).

%worlds () (shift-preserves-wf _ _ _).
%total  {} (shift-preserves-wf _ _ _).


shift-preserves-wf-converse
  : wf MP 
    -> shift N M MP
    -> wf M
    -> type.
%mode shift-preserves-wf-converse +WP +S -W.

- : shift-preserves-wf-converse wf/0 _ wf/0.
   
- : shift-preserves-wf-converse
    (wf/+ DW W) (shift/+ P) (wf/+ DW W).

%worlds () (shift-preserves-wf-converse _ _ _).
%total (S) (shift-preserves-wf-converse _ S _).


wf-lookup-implies-wf
  : wf M
    -> lookup M N D
    -> data`wf D
    -> type.
%mode wf-lookup-implies-wf +MW +L -DW.

- : wf-lookup-implies-wf
    (wf/+ DW MW) (lookup/= nat`eq/) DW.

- : wf-lookup-implies-wf
    (wf/+ _ MW) (lookup/> L _) DWP
    <- wf-lookup-implies-wf MW L DWP.

%worlds () (wf-lookup-implies-wf _ _ _).
%total (W) (wf-lookup-implies-wf W _ _).


%{%
#ifdef DATA_JOIN_PRESERVES_WF
%}%

join-preserves-wf
  : wf M1 
    -> wf M2 
    -> join M1 M2 M3
    -> wf M3
    -> type.
%mode join-preserves-wf +W1 +W2 +J -W3.

join-preserves-wf/L
  : {N1} size M1 N1
    -> {N2} size M2 N2
    -> wf M1 
    -> wf M2 
    -> join M1 M2 M3
    -> wf M3
    -> type.
%mode join-preserves-wf/L +N1 +SZ1 +N2 +SZ2 +W1 +W2 +J -W3.            

- : join-preserves-wf/L _ _ _ _ _ MW join/L MW.

- : join-preserves-wf/L _ _ _ _ MW _ join/R MW.

- : join-preserves-wf/L _ (size/+ SZ1) _ (size/+ SZ2)
    (wf/+ DW1 MW1) (wf/+ DW2 MW2) 
    (join/= J U nat`eq/) (wf/+ DW3 MW3)
    <- join-preserves-wf/L _ SZ1 _ SZ2 MW1 MW2 J MW3
    <- data`join-preserves-wf DW1 DW2 U DW3.

- : join-preserves-wf/L _ (size/+ SZ1) _ (size/+ SZ2)
    (wf/+ DW1 MW1) MW2 (join/< J P) MW3
    <- nat`plus-swap-succ P P1
    <- nat`plus-commutative P1 P2
    <- shift-total SH1
    <- shift-preserves-wf MW1 SH1 MW1P
    <- shift-preserves-size SZ1 SH1 SZ1S
    <- shift-preserves-join J SH1 (shift/+ P2) _ SH3 JS
    <- join-preserves-wf/L  _ SZ1S _ (size/+ SZ2) MW1P MW2 JS MW3P
    <- shift-implies-update SH3 UD
    <- update-preserves-wf MW3P DW1 UD MW3.

- : join-preserves-wf/L _ (size/+ SZ1) _ (size/+ SZ2) 
    MW1 (wf/+ DW2 MW2) (join/> J P) MW3
    <- nat`plus-swap-succ P P1
    <- nat`plus-commutative P1 P2
    <- shift-total SH2
    <- shift-preserves-wf MW2 SH2 MW2P
    <- shift-preserves-size SZ2 SH2 SZ2S
    <- shift-preserves-join J (shift/+ P2) SH2 _ SH3 JS
    <- join-preserves-wf/L _ (size/+ SZ1) _ SZ2S MW1 MW2P JS MW3P
    <- shift-implies-update SH3 UD
    <- update-preserves-wf MW3P DW2 UD MW3.

- : join-preserves-wf W1 W2 J W3
    <- size-total SZ1
    <- size-total SZ2
    <- join-preserves-wf/L _ SZ1 _ SZ2 W1 W2 J W3.

%worlds () (join-preserves-wf/L _ _ _ _ _ _ _ _).
%total {N1 N2} (join-preserves-wf/L N1 _ N2 _ _ _ _ _).

%worlds () (join-preserves-wf _ _ _ _).
%total  {} (join-preserves-wf _ _ _ _).

%{%
#endif
%}%


%{%
#ifdef DATA_NOT_WF
%}%

wf-lookup-nwf-implies-false
  : wf M
    -> lookup M N D
    -> data`nwf D
    -> void
    -> type.
%mode wf-lookup-nwf-implies-false +MW +L +NWF -V.

- : wf-lookup-nwf-implies-false 
    (wf/+ DW MW) (lookup/= nat`eq/) DNW V
    <- data`wf-nwf-contradiction DW DNW V.

- : wf-lookup-nwf-implies-false
    (wf/+ _ MW) (lookup/> L P) DNW F
    <- wf-lookup-nwf-implies-false MW L DNW F.

%worlds () (wf-lookup-nwf-implies-false _ _ _ _).
%total (MW) (wf-lookup-nwf-implies-false MW _ _ _).

%{%
#endif
%}%
