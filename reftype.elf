%%% Reference Type
%%% $Id: reftype.elf,v 1.1 2013/03/04 18:07:49 csun Exp csun $


%%% non-nullness

nonnull		: type.		%name nonnull NN.

nonnull/yes 	: nonnull.

nonnull/may 	: nonnull.


nonnull`eq	: nonnull -> nonnull -> type.

nonnull`eq/	: nonnull`eq NN NN.


%%% annotation

annot		: type.		%name annot A.

annot/unique	: annot.

annot/shared	: annot.

annot/borrow	: annot.	% borrow shall NOT be used on fields


%%% equality

annot`eq	: annot -> annot -> type.

annot`eq/	: annot`eq A A.


%%% annotated type

ty		: type.		%name ty T.

ty/		: nonnull -> annot -> nat -> ty.

ty/null		: ty.


%%% reference targets

reftgts : type.

reftgts/unique : set -> tgtmap -> reftgts.

reftgts/shared : reftgts.

%%% reference type

reftype : type.

reftype/ : ty -> reftgts -> reftype.

reftype/null : reftype.


%%% theorems

%theorem ty-eq-inversion :
    forall* {NN1} {NN2} {A1} {A2} {N1} {N2}
    forall  {T1=T2: ty`eq (ty/ NN1 A1 N1) (ty/ NN2 A2 N2)}
    exists  {EQ: nonnull`eq NN1 NN2} {EQ: annot`eq A1 A2}
            {EQ: nat`eq N1 N2}
    true.

- : ty-eq-inversion ty`eq/ nonnull`eq/ annot`eq/ nat`eq/.

%worlds () (ty-eq-inversion _ _ _ _).
%total  {} (ty-eq-inversion _ _ _ _).
   

%%% abbreviations

%abbrev nn	= nonnull.
%abbrev nn/yes	= nonnull/yes.
%abbrev nn/may	= nonnull/may.