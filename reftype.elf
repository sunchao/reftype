% Reference Type


%%% Definitions

% non-nullness

nonnull	    	: type.
%name nonnull NN nn.

nonnull/yes 	: nonnull.
nonnull/may 	: nonnull.


nonnull`eq	: nonnull -> nonnull -> type.

nonnull`eq/	: nonnull`eq NN NN.


% annotation

annot     		: type.		%name annot A.

annot/unique	: annot.
annot/shared	: annot.
annot/borrow	: annot.	% borrow CANNOT be used on fields


% equality

annot`eq	: annot -> annot -> type.

annot`eq/	: annot`eq A A.


% annotated type

ty    		: type.		%name ty T.

ty/	    	: nonnull -> annot -> nat -> ty.
ty/null		: ty.


% reference type

targets        : type. %name targets GS.

targets`eq : targets -> targets -> type.
targets`eq/ : targets`eq GS GS.

targets/unique : set -> tgtmap -> bool -> targets.
targets/shared : targets.


reftype : type.	%name reftype RT.

reftype/     : nonnull -> nat -> targets -> reftype.
reftype/null : reftype.


reftype`eq : reftype -> reftype -> type.

reftype`eq/ : reftype`eq RT RT.



%%% Theorems

%theorem targets/unique-preserves-eq
  : forall* {S1} {S2} {G1} {G2} {B1} {B2}
    forall {E: set`eq S1 S2} {E: tgtmap`eq G1 G2}
    {E: bool`eq B1 B2}
    exists {E: targets`eq (targets/unique S1 G1 B1) (targets/unique S2 G2 B2)}
    true.

- : targets/unique-preserves-eq set`eq/ tgtmap`eq/ bool`eq/ targets`eq/.

%worlds () (targets/unique-preserves-eq _ _ _ _).
%total {} (targets/unique-preserves-eq _ _ _ _).


%%% Abbreviations

%abbrev nn	= nonnull.
%abbrev nn/yes	= nonnull/yes.
%abbrev nn/may	= nonnull/may.