%%%%% consistency-thms.elf
%%%%% theorems about consistency between clsmap, fldmap, methmap, and oflist
%%%%% Chao Sun
%%%%% $Id: consistency.thm,v 1.1 2013/03/04 21:46:21 csun Exp csun $
%%%%% Jun 17, 2010


% theorems about shift

%theorem shift-preserves-clsmap-fldmap :
        forall* {CM} {FM1} {FM2} {N}
        forall  {CM-FM1: clsmap-fldmap CM FM1}
            		{SH: fldmap`shift N FM1 FM2}
        exists  {CM-FM2: clsmap-fldmap CM FM2}
        true.

- : shift-preserves-clsmap-fldmap clsmap-fldmap/0 _ clsmap-fldmap/0.

- : shift-preserves-clsmap-fldmap
     (clsmap-fldmap/null CM-FM1) _ (clsmap-fldmap/null CM-FM1).

- : shift-preserves-clsmap-fldmap 
     (clsmap-fldmap/+ CM-FM1 IN) _ (clsmap-fldmap/+ CM-FM1 IN).

%worlds () (shift-preserves-clsmap-fldmap _ _ _).
%total  {} (shift-preserves-clsmap-fldmap _ _ _).


% This theorem says if under a "bigger" clsmap CM0, CM 
% is well-defined, and class C in CM has fldmap FM, then all
% classes in FM is well-defined under CM0

%theorem lookup-implies-clsmap-fldmap : 
        forall* {M} {CM} {FM} {C}
        forall  {M-CM: clsmap-clsmap M CM}
                {L: clsmap`lookup CM C FM}
        exists  {M-FM: clsmap-fldmap M FM}
        true.

- : lookup-implies-clsmap-fldmap (clsmap-clsmap/+ _ _ M-FM _)
     (clsmap`lookup/= _) M-FM.

- : lookup-implies-clsmap-fldmap (clsmap-clsmap/+ M-CMP SH _ _)
     (clsmap`lookup/> L P0) M-FM
     <- nat`plus-swap-succ P0 P1
     <- nat`plus-commutative P1 P2
     <- clsmap`shift-preserves-lookup* L SH P2 L2
     <- lookup-implies-clsmap-fldmap M-CMP L2 M-FM.

%worlds () (lookup-implies-clsmap-fldmap _ _ _).
%total  (M-CM) (lookup-implies-clsmap-fldmap M-CM _ _).


%theorem lookup-implies-clsmap-ty :
        forall* {CM} {FM} {F} {T}
        forall  {CM-FM: clsmap-fldmap CM FM}
                {FML: fldmap`lookup FM F T}
        exists  {CM-NT : clsmap-ty CM T}
        true.

- : lookup-implies-clsmap-ty (clsmap-fldmap/null _) _ clsmap-ty/null.

- : lookup-implies-clsmap-ty (clsmap-fldmap/+ CM-FM N1-IN) 
     (fldmap`lookup/= _) (clsmap-ty/notnull N1-IN).

- : lookup-implies-clsmap-ty (clsmap-fldmap/+ CM-FM _) 
     (fldmap`lookup/> LP _) CM-T
     <- lookup-implies-clsmap-ty CM-FM LP CM-T.

- : lookup-implies-clsmap-ty (clsmap-fldmap/null CM-FM)
     (fldmap`lookup/> LP _) CM-T
     <- lookup-implies-clsmap-ty CM-FM LP CM-T.

%worlds () (lookup-implies-clsmap-ty _ _ _).
%total  (CM-FM) (lookup-implies-clsmap-ty CM-FM _ _).


%theorem lookup-implies-clsmap-methty :
        forall* {CM} {MM} {MT} {M}
        forall  {CM-MM: clsmap-methmap CM MM}
                {MM-LP: methmap`lookup MM M MT}
        exists  {CM-MT: clsmap-methty CM MT}
        true.

- : lookup-implies-clsmap-methty
     (clsmap-methmap/meth _ _ CM-MT _) (methmap`lookup/= _) CM-MT.

- : lookup-implies-clsmap-methty
     (clsmap-methmap/const _ _ (CM-MT) CML) (methmap`lookup/= _) 
     (clsmap-methty/args CM-MT (clsmap-ty/notnull (clsmap`domain?/in CML))).

- : lookup-implies-clsmap-methty
     (clsmap-methmap/meth CM-MMP N<<MM=MMP _ _) 
     (methmap`lookup/> MML P1) CM-MT
     <- nat`plus-swap-succ P1 P2
     <- nat`plus-commutative P2 P3
     <- methmap`shift-preserves-lookup* MML N<<MM=MMP P3 MMPL
     <- lookup-implies-clsmap-methty CM-MMP MMPL CM-MT.

- : lookup-implies-clsmap-methty
     (clsmap-methmap/const CM-MMP N<<MM=MMP _ _)
     (methmap`lookup/> MML P1) CM-MT
     <- nat`plus-swap-succ P1 P2
     <- nat`plus-commutative P2 P3
     <- methmap`shift-preserves-lookup* MML N<<MM=MMP P3 MMPL
     <- lookup-implies-clsmap-methty CM-MMP MMPL CM-MT.

%worlds (objvar) (lookup-implies-clsmap-methty _ _ _).
%total  (L) (lookup-implies-clsmap-methty L _ _).


%theorem cxt-lookup-implies-clsmap-ty : 
    forall* {CM} {B: cxt} {T} {O}
    forall  {CM-B: clsmap-cxt CM B}
            {B-L: cxt-lookup B O T}
    exists  {CM-T: clsmap-reftype CM T}
    true.

- : cxt-lookup-implies-clsmap-ty
    (clsmap-cxt/cons CM-T _) cxt-lookup/hit CM-T.

- : cxt-lookup-implies-clsmap-ty
    (clsmap-cxt/cons _ CM-B) (cxt-lookup/miss B-L) CM-T
    <- cxt-lookup-implies-clsmap-ty CM-B B-L CM-T.

%worlds (objvar) (cxt-lookup-implies-clsmap-ty _ _ _).
%total (CM-B) (cxt-lookup-implies-clsmap-ty CM-B _ _).


%theorem calltyping-implies-clsmap-ty :
    forall* {CM} {L} {AO} {MT} {T} {XM}
    forall  {CM-MT: clsmap-methty CM MT}
            {RCTYP: ref-calltyping L CM AO MT (out/expr T XM)}
    exists  {CM-T: clsmap-reftype CM T}
    true.

%worlds () (calltyping-implies-clsmap-ty _ _ _).
%trustme %total (CM-MT) (calltyping-implies-clsmap-ty CM-MT _ _).

    
%theorem typing-implies-clsmap-ty :
    forall* {CM} {MM} {B: cxt} {E} {T} {L1} {L2} {XM}
    forall  {CM-CM: clsmap-clsmap CM CM}
            {CM-MM: clsmap-methmap CM MM}
            {CM-B : clsmap-cxt CM B}
            {TYP: ref-typing L1 CM MM B E (out/expr T XM) L2}
    exists  {CM-T: clsmap-reftype CM T}
    true.

%worlds (objvar) (typing-implies-clsmap-ty _ _ _ _ _).
%trustme %total  (TYP) (typing-implies-clsmap-ty _ _ _ TYP _).


%{% This theorem says if we have a reftyping, then the tgtmap in its
  output, after removing the special 0.0 target, is leq to efxmap in the
  same output. %}%

%theorem typing-implies-tgtmap-leq-efxmap : 
    forall* {L1} {L2} {CM} {MM} {GM} {XM} {B} {T} {S} {E:expr}
    forall  {RTYP: ref-typing L1 CM MM B E
		   (out/expr (reftype/ T (reftgts/unique S GM)) XM) L2}
    exists  {GM<=XM: tgtmap-leq-efxmap GM XM}
    true.

% GM3<=XM3 <- XM3=>GM3P GM3<=GM3P
% - : typing-implies-tgtmap-leq-efxmap
%     (ref-typing/read/unique XM1UXM3=XM2 GM3=>XM3 GM1UGM3=GM4
%       S1+F=>GM3 FM->F=FC CM->C=FM TYP-E)
%     (tgtmap-leq-efxmap/ GM4<=GM4P XM2=>GM4P)
%     <- typing-implies-tgtmap-leq-efxmap 
%       TYP-E (tgtmap-leq-efxmap/ GM1<=GM1P XM1=>GM1P)
%     <- tgtmap2efxmap-implies-efxmap2tgtmap GM3=>XM3 XM3=>GM3
%     <- efxmap`join-implies-leq XM1UXM3=XM2 XM1<=XM2 XM3<=XM2
%     <- efxmap2tgtmap-total XM2=>GM4P
%     <- efxmap2tgtmap-preserves-efxmap-leq 
%       XM1<=XM2 XM1=>GM1P XM2=>GM4P GM1P<=GM4P
%     <- efxmap2tgtmap-preserves-efxmap-leq
%       XM3<=XM2 XM3=>GM3 XM2=>GM4P GM3<=GM4P
%     <- tgtmap`leq-transitive GM1<=GM1P GM1P<=GM4P GM1<=GM4P
%     <- tgtmap`join-is-lub GM1UGM3=GM4 GM1<=GM4P GM3<=GM4P GM4<=GM4P.

%worlds () (typing-implies-tgtmap-leq-efxmap _ _).
%trustme %total (TYP) (typing-implies-tgtmap-leq-efxmap TYP _).

