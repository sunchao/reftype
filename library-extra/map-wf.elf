%%% Well-Formed Map: all values are well-formed.
%%% $Id: map-wf.elf,v 1.5 2013/06/18 15:25:42 csun Exp csun $


%%% Definition

wf : map -> type.

wf/0 : wf map/0.

wf/+ : data`size D (s N)
       -> wf M
       -> wf (map/+ _ D M).


%%% Theorems

false-implies-wf : void -> wf M -> type.
%mode +{V} +{M} -{W:wf M} false-implies-wf V W.

%worlds () (false-implies-wf _ _).
%total { } (false-implies-wf _ _).


wf-respects-eq
  : wf M
    -> eq M MP
    -> wf MP
    -> type.
%mode wf-respects-eq +W +E -WP.

- : wf-respects-eq W eq/ W.

%worlds () (wf-respects-eq _ _ _).
%total { } (wf-respects-eq _ _ _).


wf-inversion
  : wf (map/+ _ D M)
    -> data`size D (s N)
    -> wf M
    -> type.
%mode wf-inversion +W -SZS -WP.

- : wf-inversion (wf/+ SZS WF) SZS WF.

%worlds () (wf-inversion _ _ _).
%total { } (wf-inversion _ _ _).


update-preserves-wf
  : wf M 
    -> data`size D (s K)
    -> update M N D MP
    -> wf MP
    -> type.
%mode update-preserves-wf +WF1 +SZS +U -WF2.

- : update-preserves-wf wf/0 SZS _ (wf/+ SZS wf/0).

- : update-preserves-wf
    (wf/+ SZS WF) SZSP (update/= NE) (wf/+ SZSP WF).

- : update-preserves-wf
    (wf/+ SZS WF) SZSP (update/< P)
    (wf/+ SZSP (wf/+ SZS WF)).

- : update-preserves-wf
    (wf/+ SZS WF) SZSP (update/> UD P) (wf/+ SZS WFP)
    <- update-preserves-wf WF SZSP UD WFP.

%worlds () (update-preserves-wf _ _ _ _).
%total (U) (update-preserves-wf _ _ U _).


fresh-update-preserves-wf-converse
  : wf MP
    -> fresh M N
    -> update M N D MP
    -> wf M
    -> data`size D (s K)
    -> type.
%mode fresh-update-preserves-wf-converse +W1 +F +U -W2 -W3.

- : fresh-update-preserves-wf-converse 
    (wf/+ WF-S wf/0) fresh/0 update/0 wf/0 WF-S.

- : fresh-update-preserves-wf-converse
    WP (fresh/< GT) U (wf/+ SZS W) SZS2
    <- nat`gt-implies-plus GT _ P
    <- update/<-inversion U P EQ
    <- eq-symmetric EQ EQx
    <- wf-respects-eq WP EQx WPx
    <- wf-inversion WPx SZS2 Wx
    <- wf-inversion Wx SZS W.

- : fresh-update-preserves-wf-converse
    WP (fresh/> F P) U (wf/+ SZS2 W1) SZS1
    <- update/>-inversion U P _ UP EQ
    <- eq-symmetric EQ EQx
    <- wf-respects-eq WP EQx WPx
    <- wf-inversion WPx SZS2 W2
    <- fresh-update-preserves-wf-converse W2 F UP W1 SZS1.
      
%worlds () (fresh-update-preserves-wf-converse _ _ _ _ _).
%total (F) (fresh-update-preserves-wf-converse _ F _ _ _).
    

shift-preserves-wf 
  : wf M
    -> shift N M MP
    -> wf MP
    -> type.
%mode shift-preserves-wf +W1 +S -W2.

- : shift-preserves-wf wf/0 _ wf/0.

- : shift-preserves-wf (wf/+ WF SZS)
    (shift/+ P) (wf/+ WF SZS).

%worlds () (shift-preserves-wf _ _ _).
%total  {} (shift-preserves-wf _ _ _).


shift-preserves-wf-converse
  : wf MP 
    -> shift N M MP
    -> wf M
    -> type.
%mode shift-preserves-wf-converse +WP +S -W.

- : shift-preserves-wf-converse wf/0 _ wf/0.
   
- : shift-preserves-wf-converse
    (wf/+ SZS W) (shift/+ P) (wf/+ SZS W).

%worlds () (shift-preserves-wf-converse _ _ _).
%total (S) (shift-preserves-wf-converse _ S _).


wf-lookup-implies-non-empty
  : wf M
    -> lookup M N D
    -> data`size D (s K)
    -> type.
%mode wf-lookup-implies-non-empty +WF +L -SZS.

- : wf-lookup-implies-non-empty
    (wf/+ SZS WF) (lookup/= nat`eq/) SZS.

- : wf-lookup-implies-non-empty
    (wf/+ _ WF) (lookup/> L _) SZSP
    <- wf-lookup-implies-non-empty WF L SZSP.

%worlds () (wf-lookup-implies-non-empty _ _ _).
%total (W) (wf-lookup-implies-non-empty W _ _).


wf-lookup-empty-implies-false
  : wf M
    -> lookup M N D
    -> data`size D z
    -> void
    -> type.
%mode wf-lookup-empty-implies-false +WF +L +SZ -V.

- : wf-lookup-empty-implies-false 
    (wf/+ SZS WF) (lookup/= nat`eq/) SZZ V
    <- data`size-unique SZZ SZS data`eq/ Z=SN
    <- nat`eq-contradiction Z=SN V.

- : wf-lookup-empty-implies-false
    (wf/+ _ WF) (lookup/> L P) SZ F
    <- wf-lookup-empty-implies-false WF L SZ F.

%worlds () (wf-lookup-empty-implies-false _ _ _ _).
%total (WF) (wf-lookup-empty-implies-false WF _ _ _).


% seems missing from library

nat`ge-succ-implies-succ
  : nat`ge N1 (s N2)
    -> {N3} nat`eq N1 (s N3)
    -> type.
%mode nat`ge-succ-implies-succ +GE -N -EQ.

- : nat`ge-succ-implies-succ (nat`ge/= nat`eq/) _ nat`eq/.

- : nat`ge-succ-implies-succ (nat`ge/> GT) _ EQ
    <- nat`gt-implies-positive GT _ EQ.
 
%worlds () (nat`ge-succ-implies-succ _ _ _).
%total (GE) (nat`ge-succ-implies-succ GE _ _).


join-preserves-wf
  : wf M1 
    -> wf M2 
    -> join M1 M2 M3
    -> wf M3
    -> type.
%mode join-preserves-wf +W1 +W2 +J -W3.

join-preserves-wf/L
  : {N1} size M1 N1
    -> {N2} size M2 N2
    -> wf M1 
    -> wf M2 
    -> join M1 M2 M3
    -> wf M3
    -> type.
%mode join-preserves-wf/L +N1 +SZ1 +N2 +SZ2 +W1 +W2 +J -W3.            

- : join-preserves-wf/L _ _ _ _ _ WF join/L WF.

- : join-preserves-wf/L _ _ _ _ WF _ join/R WF.

- : join-preserves-wf/L _ (size/+ SZ1) _ (size/+ SZ2)
    (wf/+ SZS1 WF1) (wf/+ SZS2 WF2) 
    (join/= J U nat`eq/) (wf/+ SZS3 WF3)
    <- join-preserves-wf/L _ SZ1 _ SZ2 WF1 WF2 J WF3
    <- data`join-implies-leq U D1<=D D2<=D
    <- data`size-total SZS
    <- data`leq-implies-size-le D1<=D SZS1 SZS N2>=N1
    <- nat`ge-succ-implies-succ N2>=N1 _ EQ
    <- data`size-respects-eq SZS data`eq/ EQ SZS3.

- : join-preserves-wf/L _ (size/+ SZ1) _ (size/+ SZ2)
    (wf/+ SZS1 WF1) WF2 (join/< J P) WF3
    <- nat`plus-swap-succ P P1
    <- nat`plus-commutative P1 P2
    <- shift-total SH1
    <- shift-preserves-wf WF1 SH1 WF1P
    <- shift-preserves-size SZ1 SH1 SZ1S
    <- shift-preserves-join J SH1 (shift/+ P2) _ SH3 JS
    <- join-preserves-wf/L  _ SZ1S _ (size/+ SZ2) WF1P WF2 JS WF3P
    <- shift-implies-update SH3 UD
    <- update-preserves-wf WF3P SZS1 UD WF3.

- : join-preserves-wf/L _ (size/+ SZ1) _ (size/+ SZ2) 
    WF1 (wf/+ SZS2 WF2) (join/> J P) WF3
    <- nat`plus-swap-succ P P1
    <- nat`plus-commutative P1 P2
    <- shift-total SH2
    <- shift-preserves-wf WF2 SH2 WF2P
    <- shift-preserves-size SZ2 SH2 SZ2S
    <- shift-preserves-join J (shift/+ P2) SH2 _ SH3 JS
    <- join-preserves-wf/L _ (size/+ SZ1) _ SZ2S WF1 WF2P JS WF3P
    <- shift-implies-update SH3 UD
    <- update-preserves-wf WF3P SZS2 UD WF3.

- : join-preserves-wf W1 W2 J W3
    <- size-total SZ1
    <- size-total SZ2
    <- join-preserves-wf/L _ SZ1 _ SZ2 W1 W2 J W3.

%worlds () (join-preserves-wf/L _ _ _ _ _ _ _ _).
%total {N1 N2} (join-preserves-wf/L N1 _ N2 _ _ _ _ _).

%worlds () (join-preserves-wf _ _ _ _).
%total  {} (join-preserves-wf _ _ _ _).


