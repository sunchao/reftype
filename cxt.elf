% Explicit Type Context
% $Id$

% definition

loc-cxt : type. %name loc-cxt LB.

shared-cxt : type. %name shared-cxt SB.

cxt : type. %name cxt B.

cxt/ : loc-cxt -> shared-cxt -> cxt.


% equalities

loc-cxt-eq : loc-cxt -> loc-cxt -> type.

loc-cxt-eq/ : loc-cxt-eq LB LB.


shared-cxt-eq : shared-cxt -> shared-cxt -> type.

shared-cxt-eq/ : shared-cxt-eq SB SB.


cxt-eq : cxt -> cxt -> type.

cxt-eq/ : cxt-eq (cxt/ LB1 SB1) (cxt/ LB2 SB2)
          <- loc-cxt-eq LB1 LB2
          <- shared-cxt-eq SB1 SB2.


% constructors 

loc-cxt/nil : loc-cxt.

loc-cxt/cons : object -> nat -> ty -> loc-cxt -> loc-cxt.


shared-cxt/nil : shared-cxt.

shared-cxt/cons : object -> ty -> shared-cxt -> shared-cxt.


% lookups 

shared-cxt-lookup : shared-cxt -> object -> ty -> type.

shared-cxt-lookup/hit : shared-cxt-lookup (shared-cxt/cons O T _) O T.

shared-cxt-lookup/miss 
  : shared-cxt-lookup (shared-cxt/cons _ _ SB) O T
    <- shared-cxt-lookup SB O T.

loc-cxt-lookup : loc-cxt -> object -> ty -> type.

loc-cxt-lookup/hit : loc-cxt-lookup (loc-cxt/cons O _ T _) O T.

loc-cxt-lookup/miss 
  : loc-cxt-lookup (loc-cxt/cons _ _ _ LB) O T
    <- loc-cxt-lookup LB O T.

loc-cxt-lookup-loc : loc-cxt -> nat -> object -> ty -> type.

loc-cxt-lookup-loc/hit : loc-cxt-lookup-loc (loc-cxt/cons O L T _) L O T.

loc-cxt-lookup-loc/miss
  : loc-cxt-lookup-loc (loc-cxt/cons _ _ _ LB) L O T
    <- loc-cxt-lookup-loc LB L O T.


% lookup object

cxt-lookup : cxt -> object -> ty -> type.

cxt-lookup/shared 
  : cxt-lookup (cxt/ LB SB) O T
    <- shared-cxt-lookup SB O T.

cxt-lookup/loc
  : cxt-lookup (cxt/ LB SB) O T
    <- loc-cxt-lookup LB O T.


% lookup loc

cxt-lookup-loc : cxt -> nat -> object -> ty -> type.

cxt-lookup-loc/
  : cxt-lookup-loc (cxt/ LB _) L O T
    <- loc-cxt-lookup-loc LB L O T.


% all locations in loc-cxt are ordered

loc-cxt-ordered : loc-cxt -> type.

loc-cxt-ordered-h : nat -> loc-cxt -> type.

loc-cxt-ordered-h/nil : loc-cxt-ordered-h _ loc-cxt/nil.

loc-cxt-ordered-h/cons
  : loc-cxt-ordered-h L1 (loc-cxt/cons _ L2 _ LB)
    <- nat`gt L1 L2 
    <- loc-cxt-ordered-h L2 LB.

loc-cxt-ordered/nil : loc-cxt-ordered loc-cxt/nil.

loc-cxt-ordered/cons
  : loc-cxt-ordered (loc-cxt/cons _ L _ LB)
    <- loc-cxt-ordered-h L LB.


cxt-ordered : cxt -> type.

cxt-ordered/
  : cxt-ordered (cxt/ LB _)
    <- loc-cxt-ordered LB.


% theorems

false-implies-object-eq 
  : {V:void} {O1:object} {O2}
    object`eq O1 O2
    -> type.

%mode false-implies-object-eq +V +O1 +O2 -E.
%worlds (objvar) (false-implies-object-eq _ _ _ _).
%total {} (false-implies-object-eq _ _ _ _).


false-implies-ty-eq
  : {V:void} {T1} {T2}
    ty`eq T1 T2
    -> type.

%mode false-implies-ty-eq +V +T1 +T2 -E.
%worlds (objvar) (false-implies-ty-eq _ _ _ _).
%total {} (false-implies-ty-eq _ _ _ _).