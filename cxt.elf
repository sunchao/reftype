%%% context

%%% definition

cxt : nat -> type.	%name cxt B.


%%% equality 

cxt`eq : cxt N -> cxt N -> type.

cxt`eq/ : cxt`eq B B.



%%% constructor

cxt/nil : cxt z.

cxt/cons : object -> ty -> cxt N -> cxt (s N).



%%% lookup operation

cxt-lookup : cxt N -> nat -> object -> ty -> type.

cxt-lookup/hit : cxt-lookup (cxt/cons O T (B:cxt L)) L O T.

cxt-lookup/miss
  : cxt-lookup (cxt/cons _ _ (B:cxt L)) M O T
    <- nat`lt M L
    <- cxt-lookup B M O T.


%%% lookup type

cxt-lookup-ty : cxt N -> nat -> object -> nat -> type.

cxt-lookup-ty/ : cxt-lookup-ty B L O C <- cxt-lookup B L O (ty/ _ _ C).
    
				       

%%% lookup object

cxt-lookup-obj : cxt N -> object -> ty -> type.

cxt-lookup-obj/hit : cxt-lookup-obj (cxt/cons O T B) O T.

cxt-lookup-obj/miss
  : cxt-lookup-obj (cxt/cons O1 _ B) O2 T
    <- cxt-lookup-obj B O2 T.



%%% theorems

%theorem false-implies-object-eq :
	forall* {O1:object} {O2}
	forall  {F:void}
	exists  {EQ: object`eq O1 O2}
	true.

%worlds (objvar) (false-implies-object-eq _ _).
%total  {} (false-implies-object-eq _ _).


%theorem false-implies-ty-eq :
	forall* {T1} {T2}
	forall  {F:void}
	exists  {EQ: ty`eq T1 T2}
	true.

%worlds (objvar) (false-implies-ty-eq _ _).
%total  {} (false-implies-ty-eq _ _).


% %theorem cxt/cons-preserves-eq :
% 	forall* {N} {B1:cxt N} {B2:cxt N}
% 		{O1} {O2} {T1} {T2} {D1} {D2}
% 	forall  {E: cxt`eq (cxt/cons O1 (refty/ T1 D1) B1) 
% 		     (cxt/cons O2 (refty/ T2 D2) B2)}
% 	exists  {EO: object`eq O1 O2} {ET: ty`eq T1 T2} 
% 		{EM: bd-eq D1 D2} {EB: cxt`eq B1 B2} 
% 	true.

% - : cxt/cons-preserves-eq cxt`eq/ object`eq/ ty`eq/ bd-eq/ cxt`eq/.

% %worlds (objvar) (cxt/cons-preserves-eq _ _ _ _ _).
% %total  {} (cxt/cons-preserves-eq _ _ _ _ _).

     
% %theorem cxt-nth-deterministic :
% 	forall* {N} {B1:cxt N} {B2:cxt N}
% 		{L1} {L2} {O1} {O2} 
% 		{T1} {T2} {D1} {D2}
% 	forall  {NTH1: cxt-nth B1 L1 O1 (refty/ T1 D1)}
% 		{NTH2: cxt-nth B2 L2 O2 (refty/ T2 D2)}
% 		{EB: cxt`eq B1 B2} {EL: nat`eq L1 L2}
% 	exists  {OEQ: object`eq O1 O2}
% 		{TEQ: ty`eq T1 T2}
% 		{GEQ: bd-eq D1 D2}
% 	true.

% - : cxt-nth-deterministic (cxt-nth/hit _) (cxt-nth/hit _) cxt`eq/ nat`eq/
%      object`eq/ ty`eq/ bd-eq/.

% - : cxt-nth-deterministic
%      (cxt-nth/miss NTH1 _) (cxt-nth/miss NTH2 _) BEQ LEQ OEQ TEQ GEQ
%      <- cxt/cons-preserves-eq BEQ _ _ _ BEQ'
%      <- cxt-nth-deterministic NTH1 NTH2 BEQ' LEQ OEQ TEQ GEQ.

% % impossible cases
% - : cxt-nth-deterministic (cxt-nth/hit EQ) (cxt-nth/miss _ NE) _ _ OEQ TEQ GEQ
%      <- nat`eq-ne-implies-false EQ NE F
%      <- false-implies-object-eq F OEQ
%      <- false-implies-ty-eq F TEQ
%      <- tgtmap`false-implies-eq F GEQ.
     
% - : cxt-nth-deterministic (cxt-nth/miss _ NE) (cxt-nth/hit EQ) _ _ OEQ TEQ GEQ
%      <- nat`eq-ne-implies-false EQ NE F
%      <- false-implies-object-eq F OEQ
%      <- false-implies-ty-eq F TEQ
%      <- tgtmap`false-implies-eq F GEQ.
     
% %worlds (objvar) (cxt-nth-deterministic _ _ _ _ _ _ _).
% %total  (N) (cxt-nth-deterministic N _ _ _ _ _ _).