%%% Type Context
%%% $Id: cxt.elf,v 1.1 2013/03/04 21:24:37 csun Exp csun $

%%% definition

cxt : type.	%name cxt B.


%%% equality 

cxt`eq : cxt -> cxt -> type.
cxt`eq/ : cxt`eq B B.


vtype : type.	%name vtype VT.
vtype/unique : nat -> vtype.
vtype/shared : vtype.

%%% constructor

cxt/nil : cxt.
cxt/cons : object -> vtype -> ty -> cxt -> cxt.

%{% wellformed context:
  1. in each reftype, if its unique, then it should only
     have a singleton set and empty tgtmap.
  2. the nat in each reftype/unique is in decreasing order,
     from outer context to inner context. %}%


%%% lookup object

cxt-lookup : cxt -> object -> vtype -> ty -> type.

cxt-lookup/hit : cxt-lookup (cxt/cons O VT T B) O VT T.

cxt-lookup/miss
  : cxt-lookup (cxt/cons O _ _ B) O' VT T
    <- cxt-lookup B O' VT T.


%%% lookup location

cxt-lookup-index : cxt -> nat -> object -> ty -> type.

cxt-lookup-index/hit
  : cxt-lookup-index (cxt/cons O (vtype/unique N) T _) N O T.

cxt-lookup-index/miss/unique : cxt-lookup-index
    (cxt/cons _ (vtype/unique M) _ B) N O T
    <- cxt-lookup-index B N O T.

cxt-lookup-index/miss/shared : cxt-lookup-index
    (cxt/cons _ vtype/shared _ B) N O T
    <- cxt-lookup-index B N O T.


%%% theorems

%theorem false-implies-object-eq :
	forall* {O1:object} {O2}
	forall  {F:void}
	exists  {EQ: object`eq O1 O2}
	true.

%worlds (objvar) (false-implies-object-eq _ _).
%total  {} (false-implies-object-eq _ _).


%theorem false-implies-ty-eq :
	forall* {T1} {T2}
	forall  {F:void}
	exists  {EQ: ty`eq T1 T2}
	true.

%worlds (objvar) (false-implies-ty-eq _ _).
%total  {} (false-implies-ty-eq _ _).