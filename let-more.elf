%theorem reftyping-ok/restore/L2/LF
  : forall* {Pi} {PM} {FT} {O} {F}
    forall {V: void}
    exists {TF} {FT=>TF: ty2perm PM FT TF}
    {IMP: equiv Pi
          (unitperm (conditional (objequal O null) empty (fldperm O F TF)))}
    true.

%worlds (gtermvar) (reftyping-ok/restore/L2/LF _ _ _ _).
%total { } (reftyping-ok/restore/L2/LF _ _ _ _).


%theorem reftyping-ok/restore/L2/L
  : forall* {CM} {PM} {B} {N} {F} {S} {O} {NN} {A} {C} {Pi} {FM} {FT}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {BL: cxt`lookup B (s N) (cxt-info/ O (ty/ NN A C))}
    {S+F=K: set+nat2set (set/1 (s N)) F S}
    {S=>Pi: capset2perm CM PM B S Pi}
    {CML: clsmap`lookup CM C FM}
    {FML: fldmap`lookup FM F FT}
    exists {TF} {FT=>TF: ty2perm PM FT TF}
    {IMP: equiv Pi
          (unitperm (conditional (objequal O null) empty (fldperm O F TF)))}
    true.

- : reftyping-ok/restore/L2/L CM-CM CM2PM (BL:cxt`lookup B (s N) (cxt-info/ O (ty/ NN A C)))
    (set+nat2set/U S'+F=Q' N+F=K N!<S' S'+N=S Q'+K=Q)
    Q=>Pi CML FML _ T2PF
    (equiv/transitive3
      (equiv/symmetric EQV)
      (equiv/combine equiv/reflexive Pi'=E)
      (equiv/identity))
    <- set`not-member-add-emptyset-implies-eq N!<S' S'+N=S S=E (N2=N:nat`eq Nk (s N))
    <- set+nat2set-preserves-not-member S'+F=Q' N!<S' N+F=K K!<Q'
    <- set+nat2set-unique S'+F=Q' set+nat2set/0 S=E nat`eq/ Q'=E
    <- lookup-implies-clsmap-fldmap CM-CM CML CM-FM
    <- lookup-implies-clsmap-ty CM-FM FML CM-T
    <- clsmap-ty-implies-ty2perm CM2PM CM-T _ T2PF
    <- nat`eq-symmetric N2=N N=N2
    <- cxt`lookup-respects-eq BL cxt`eq/ N=N2 cxt-info`eq/ BL2
    <- capset2perm/U-inversion* Q=>Pi K!<Q' Q'+K=Q N+F=K BL2 (create-fldperm/ CML FML T2PF)
      Pi' Q'=>Pi' EQV
    <- capset2perm-equiv Q'=>Pi' capset2perm/0 clsmap`eq/ predmap`eq/ cxt`eq/ Q'=E Pi'=E.

- : reftyping-ok/restore/L2/L CM-CM CM2PM (BL:cxt`lookup B (s N) (cxt-info/ O (ty/ NN A C)))
    (set+nat2set/U S'+F=Q' (N2+F=K:pair2nat (pair/ Nk F) z) N!<S' S'+N=S Q'+K=Q)
    Q=>Pi CML FML _ T2PF EQV
    <- set`not-member-add-emptyset-implies-eq N!<S' S'+N=S S=E (N2=N:nat`eq Nk (s N))
    <- pair-preserves-eq N2=N nat`eq/ N2F=NF
    <- pair2nat-total-s _ _ _ N+F=K
    <- pair2nat-unique N2+F=K N+F=K N2F=NF K-EQ
    <- nat`eq-contradiction K-EQ V
    <- reftyping-ok/restore/L2/LF V _ T2PF EQV.

%worlds (gtermvar) (reftyping-ok/restore/L2/L _ _ _ _ _ _ _ _ _ _).
%total { } (reftyping-ok/restore/L2/L _ _ _ _ _ _ _ _ _ _).


%theorem reftyping-ok/restore/L2/L2
  : forall* {CM} {PM} {B} {PiK}
    forall {K=>PiK: capset2perm CM PM B (set/1 shared-tgt) PiK}
    exists {IMP: equiv PiK (unitperm (basic null all null))}
    true.

- : reftyping-ok/restore/L2/L2
    (capset2perm/z Q'=>Pi' Z!<Q' Q'+Z=Q)
    (equiv/transitive
      (equiv/combine equiv/reflexive Pi'=E)
      (equiv/identity))
    <- set`not-member-add-emptyset-implies-eq Z!<Q' Q'+Z=Q Q'=E _
    <- capset2perm-equiv Q'=>Pi' capset2perm/0 clsmap`eq/ predmap`eq/ cxt`eq/
      Q'=E Pi'=E.

- : reftyping-ok/restore/L2/L2
    (capset2perm/U Q'=>Pi' N+F=SK BL CF N!<Q' Q'+N=Q) EQV
    <- set`not-member-add-emptyset-implies-eq N!<Q' Q'+N=Q Q'=E EQ
    <- nat`eq-symmetric EQ EQ'
    <- nat`eq-contradiction EQ' V
    <- permission`false-implies-equiv V EQV.

%worlds (gtermvar) (reftyping-ok/restore/L2/L2 _ _).
%total { } (reftyping-ok/restore/L2/L2 _ _).


%theorem reftyping-ok/restore/L2
  : forall* {CM} {MM} {PM} {W} {B} {O} {N} {T} {C0} {G0} {K0} {F} {K} {K1}
    {PiB} {H0} {PiH0} {PiK0} {FM} {FNN} {FC}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {MM2W: methmap2progtype CM PM MM W}
    {BL: cxt`lookup-obj B O (s N) T}
    {T2RT: ty2reftype (s N) T (reftype/ nn/yes C0 G0)}
    {CML: clsmap`lookup CM C0 FM}
    {FML: fldmap`lookup FM F (ty/ FNN annot/unique FC)}
    {MG: make-tgts-and-caps K0 G0 F (targets/unique set/0 K false) K1}
    {B=>PiB: cxt2perm PM B PiB}
    {H0=>PiH0: make-encumbered CM PM B H0 PiH0}
    {K0=>PiK0: capset2perm CM PM B K0 PiK0}
    exists {NK} {TF} {PiK} {PiK1}
    {K0=K+K1:set`combine K K1 K0}
    {SZ-K: set`size K (s NK)}
    {K=>PiK: capset2perm CM PM B K PiK}
    {K1=>PiK1: capset2perm CM PM B K1 PiK1}
    {T2TF: ty2perm PM (ty/ FNN annot/unique FC) TF}
    {TYP: typing W (PiB , (PiH0 , PiK0)) (lit O)
                 (output/expr O
                   (combine PiH0
                     (combine PiB
                       (combine (fperm O F TF)
                         (combine (unitperm (encumbered (fperm O F TF) PiK)) PiK1)))))}
    true.

- : reftyping-ok/restore/L2 CM-CM CM2PM MM2W
    (cxt`lookup-obj/ (BL:cxt`lookup B (s N) (cxt-info/ O _)))
    ty2reftype/shared CML FML
    (make-tgts-and-caps/shared K0-K=K1)
    (B=>PiB:cxt2perm PM B PiB)
    (H0=>PiH0:make-encumbered CM PM B H0 PiH0)
    (K0=>PiK0:capset2perm CM PM B K0 PiK0) _ _ _ _ K0-K=K1 (set`size/+ set`size/0)
    K=>PiK K1=>PiK1
    (ty2perm/ PMLF NN2P A2P)
    (tTrans2
      (tObjLoc)
      (transform/implies
        (implies/trans7
          (implies/combine
            (implies/trans
              (IMP)
              (implies/combine
                (implies/trans
                  (implies/combine implies/reflexive implies/cond-neg)
                  (implies/cond-elim))
                (implies/reflexive)))
            (implies/combine implies/reflexive
              (implies/trans
                (implies/equiv PiK0<=>PiK+PiK1)
                (implies/combine
                  (implies/equiv EQV) implies/reflexive))))
          (implies/combine implies/reflexive
            (implies/reorder))
          (implies/equiv equiv/swap-middle)
          (implies/combine
            (implies/trans6
              (implies/equiv equiv/swap)
              (implies/combine implies/carve (IMP2 O))
              (implies/equiv equiv/swap)
              (implies/combine
                (implies/trans
                  (implies/commute)
                  (implies/carve))
                (implies/reflexive))
              (implies/symmetric-associate)
              (implies/combine implies/reflexive
                (implies/trans
                  (implies/chain-implication)
                  (implies/equiv-encumbered
                    (equiv/reflexive)
                    (equiv/symmetric EQV)))))
            (implies/reflexive))
          (implies/reorder)
          (implies/combine implies/reflexive
            (implies/trans
              (implies/reorder)
              (implies/combine implies/reflexive
                (implies/symmetric-associate))))
          (implies/reorder))))
    <- set`split-implies-permission-combine
      K0-K=K1 K0=>PiK0 PiK PiK1 K=>PiK K1=>PiK1 PiK0<=>PiK+PiK1
    <- reftyping-ok/restore/L2/L2 K=>PiK EQV
    <- cxt2perm-lookup-shared-can-duplicate B=>PiB BL _
      (ty2perm/ PML nn2perm/yes annot2perm/shared) IMP
    <- fldperm-can-lookup CM2PM PML CML FML _ _ _ A2P NN2P PMLF IMP2.

- : reftyping-ok/restore/L2 CM-CM CM2PM MM2W
    (cxt`lookup-obj/ (BL:cxt`lookup B (s N) (cxt-info/ O _)))
    ty2reftype/unique CML FML
    (make-tgts-and-caps/unique S+F=K E+K=KP K0-K=K1)
    (B=>PiB:cxt2perm PM B PiB)
    (H0=>PiH0:make-encumbered CM PM B H0 PiH0)
    (K0=>PiK0:capset2perm CM PM B K0 PiK0) _ _ _ _ K0-K=K1 SZ-K K=>PiK K1=>PiK1 T2TF
    (tTrans2
      (tObjLoc)
      (transform/implies
        (implies/trans4
          (implies/combine
            (implies/trans IMP implies/commute)
            (implies/combine implies/reflexive
              (implies/trans
                (implies/equiv PiK0<=>PiK+PiK1)
                (implies/combine
                  (implies/trans
                    (implies/symmetric-identity)
                    (implies/combine
                      (implies/equiv EQV)
                      (implies/self-implication)))
                  (implies/reflexive)))))
          (implies/symmetric-associate)
          (implies/combine implies/reflexive
            (implies/trans
              (implies/reorder)
              (implies/combine implies/reflexive
                (implies/trans3
                  (implies/associate)
                  (implies/combine
                    (implies/trans3
                      (implies/combine implies/duplicate implies/reflexive)
                      (implies/equiv equiv/swap-middle)
                      (implies/combine
                        (implies/trans
                          (implies/combine implies/reflexive implies/cond-neg)
                          (implies/cond-elim))
                        (implies/trans
                          (implies/cond-assoc-encumbered/false)
                          (implies/equiv-encumbered
                            (equiv/reflexive)
                            (equiv/symmetric EQV)))))
                    (implies/reflexive))
                  (implies/symmetric-associate)))))
          (implies/reorder))))
    <- set`split-implies-permission-combine
      K0-K=K1 K0=>PiK0 PiK PiK1 K=>PiK K1=>PiK1 PiK0<=>PiK+PiK1
    <- reftyping-ok/restore/L2/L CM-CM CM2PM BL S+F=K K=>PiK CML FML _ T2TF EQV
    <- cxt2perm-duplicate-notnull-info B=>PiB BL IMP
    <- set+nat2set-preserves-size S+F=K (set`size/+ set`size/0) SZ-K.

- : reftyping-ok/restore/L2 CM-CM CM2PM MM2W
    (cxt`lookup-obj/ (BL:cxt`lookup B (s N) (cxt-info/ O _)))
    ty2reftype/borrow CML FML
    (make-tgts-and-caps/unique S+F=K E+K=KP K0-K=K1)
    (B=>PiB:cxt2perm PM B PiB)
    (H0=>PiH0:make-encumbered CM PM B H0 PiH0)
    (K0=>PiK0:capset2perm CM PM B K0 PiK0) _ _ _ _ K0-K=K1 SZ-K K=>PiK K1=>PiK1 T2TF
    (tTrans2
      (tObjLoc)
      (transform/implies
        (implies/trans4
          (implies/combine
            (implies/trans IMP implies/commute)
            (implies/combine implies/reflexive
              (implies/trans
                (implies/equiv PiK0<=>PiK+PiK1)
                (implies/combine
                  (implies/trans
                    (implies/symmetric-identity)
                    (implies/combine
                      (implies/equiv EQV)
                      (implies/self-implication)))
                  (implies/reflexive)))))
          (implies/symmetric-associate)
          (implies/combine implies/reflexive
            (implies/trans
              (implies/reorder)
              (implies/combine implies/reflexive
                (implies/trans3
                  (implies/associate)
                  (implies/combine
                    (implies/trans3
                      (implies/combine implies/duplicate implies/reflexive)
                      (implies/equiv equiv/swap-middle)
                      (implies/combine
                        (implies/trans
                          (implies/combine implies/reflexive implies/cond-neg)
                          (implies/cond-elim))
                        (implies/trans
                          (implies/cond-assoc-encumbered/false)
                          (implies/equiv-encumbered
                            (equiv/reflexive)
                            (equiv/symmetric EQV)))))
                    (implies/reflexive))
                  (implies/symmetric-associate)))))
          (implies/reorder))))
    <- set`split-implies-permission-combine
      K0-K=K1 K0=>PiK0 PiK PiK1 K=>PiK K1=>PiK1 PiK0<=>PiK+PiK1
    <- reftyping-ok/restore/L2/L CM-CM CM2PM BL S+F=K K=>PiK CML FML _ T2TF EQV
    <- cxt2perm-duplicate-notnull-info B=>PiB BL IMP
    <- set+nat2set-preserves-size S+F=K (set`size/+ set`size/0) SZ-K.

%worlds (gtermvar) (reftyping-ok/restore/L2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total { } (reftyping-ok/restore/L2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).


%theorem reftyping-ok/restore/L6
  : forall* {PM} {B0} {B1} {PiB1} {PiB0} {N} {T}
    forall {B1=>PiB1: {x} cxt2perm PM (B1 x) (PiB1 x)}
    {B0=>PiB0: cxt2perm PM B0 PiB0}
    {N!<B0: cxt`fresh B0 N}
    {B0+N=B1: {x} cxt`update B0 N (cxt-info/ x T) (B1 x)}
    exists {PF} {T2PF: ty2perm2 PM T PF}
    {EQV: {x} equiv (PiB1 x) ((PF x) , PiB0)}
    true.

- : reftyping-ok/restore/L6 B1=>PiB1 B0=>PiB0 N!<B0 B0+N=B1 _ T2PF
    ([x] equiv/transitive
      (EQV x)
      (equiv/combine (PF-EQV x x)
        (equiv/transitive (PiB0F<=>PiB0' x) (PiB0'<=>PiB0))))
    <- ({x} cxt2perm/U-inversion (B1=>PiB1 x) N!<B0 (B0+N=B1 x)
         (PiB0F x) (B0=>PiB0F x) _ (T2PFF x) (EQV x))
    <- cxt2perm-no-var B0=>PiB0F PiB0' PiB0F=PiB0' B0=>PiB0'
    <- ({x} permission`eq-implies-equiv (PiB0F=PiB0' x) (PiB0F<=>PiB0' x))
    <- cxt2perm-equiv B0=>PiB0' B0=>PiB0 predmap`eq/ cxt`eq/ PiB0'<=>PiB0
    <- ty2perm2-no-var T2PFF _ PF-EQ T2PF
    <- ({x}{o} permission`eq-implies-equiv (PF-EQ x o) (PF-EQV x o)).


%worlds (gtermvar) (reftyping-ok/restore/L6 _ _ _ _ _ _ _).
%total { } (reftyping-ok/restore/L6 _ _ _ _ _ _ _).


%theorem reftyping-ok/restore/L3/L
  : forall* {CM} {PM} {FS} {RT} {V0}  {FNN} {FC} {T} {PF} {V1} {V}
    forall {SUB: subtype CM FS RT V0 (ty/ FNN annot/unique FC) V1 V}
    {RT2T: reftype2ty RT T}
    {T2PF: ty2perm PM T ([x] PF x)}
    exists {PF2} {T2PF2: ty2perm PM (ty/ FNN annot/unique FC) ([x] PF2 x)}
    {IMP: {x} implies (PF x) (PF2 x)}
    true.

- : reftyping-ok/restore/L3/L
    (subtype/ NN-LEQ (sub-annot/unique _ _ _ _ _ _ _))
    (reftype2ty/unique) T2PF _ T2PF2 IMP
    <- nn-leq-implies-permission-leq T2PF NN-LEQ _ T2PF2 IMP.

- : reftyping-ok/restore/L3/L
    (subtype/ NN-LEQ (sub-annot/fresh _))
    (reftype2ty/fresh) T2PF _ T2PF2 IMP
    <- nn-leq-implies-permission-leq T2PF NN-LEQ _ T2PF2 IMP.

%worlds (gtermvar) (reftyping-ok/restore/L3/L _ _ _ _ _ _).
%total { } (reftyping-ok/restore/L3/L _ _ _ _ _ _).


%theorem reftyping-ok/restore/L3
  : forall* {CM} {PM} {FS} {V0} {V} {V1} {FNN} {FC}
    {B: object -> cxt} {Out} {RT} {PiB} {FTF}
    forall {CM2PM: clsmap2predmap CM PM}
    {B=>PiB: {x} cxt2perm PM (B x) (PiB x)}
    {T2PF: ty2perm PM (ty/ FNN annot/unique FC) FTF}
    {CM-B-R: {x} clsmap-result CM (B x) (result/expr RT V0)}
    {SUB: subtype CM FS RT V0 (ty/ FNN annot/unique FC) V1 V}
    {R=>O: {x} result2output CM PM (B x) (result/expr RT V0) (Out x)}
    exists {PiV}
    {V=>PiV: {x} env2input CM PM (B x) V (PiV x)}
    {TRANS: {o} transform (Out o)
            (output/exists [x]
              (output/expr x
                (combine (FTF x) (combine (PiB o) (PiV o)))))}
    true.

- : reftyping-ok/restore/L3 CM2PM B=>PiB T2PF ([x] CM-B-R x) SUB ([x] R=>O x)
    _ ([x] env2input/ (H1=>PiH1 x) (K1=>PiK1 x))
    ([o] transform/trans3
      (TRANS o)
      (transform/inside [x] transform/rem-unused)
      (transform/inside [x]
        (transform/implies
          (implies/trans3
            (implies/equiv equiv/roll3)
            (implies/combine
              (implies/trans (implies/equiv (EQV o x)) (IMP x))
              (implies/equiv equiv/roll2))
            (implies/combine (implies/equiv (PF-EQV x))
              (implies/combine (implies/equiv (PiB'<=>PiB o)) implies/reflexive))))))
    <- ({x} make-before-write-format CM2PM (CM-B-R x) SUB
         not-borrow/unique (R=>O x) _ (TRANS x)
         (before-write-format/expr (H1=>PiH1 x) (B=>PiB' x) (K1=>PiK1 x) RT2T (T2PF1F x)))
    <- ty2perm-no-var T2PF1F _ EQ T2PF1
    <- ({o}{v} permission`eq-implies-equiv (EQ o v) (EQV o v))
    <- reftyping-ok/restore/L3/L SUB RT2T T2PF1 _ T2PF' IMP
    <- ({x} cxt2perm-equiv (B=>PiB' x) (B=>PiB x) predmap`eq/ cxt`eq/ (PiB'<=>PiB x))
  <- ty2perm-deterministic T2PF' T2PF predmap`eq/ ty`eq/ PF-EQ
  <- ({x} permission`eq-implies-equiv (PF-EQ x) (PF-EQV x)).

%worlds (gtermvar) (reftyping-ok/restore/L3 _ _ _ _ _ _ _ _ _).
%total { } (reftyping-ok/restore/L3 _ _ _ _ _ _ _ _ _).


%theorem reftyping-ok/restore/L31
  : forall* {CM} {PM} {FS} {V0} {V} {V1} {FNN} {FC}
    {B} {Out} {RT} {PiB} {FTF}
    forall {CM2PM: clsmap2predmap CM PM}
    {B=>PiB: cxt2perm PM B PiB}
    {T2PF: ty2perm PM (ty/ FNN annot/unique FC) FTF}
    {CM-B-R: clsmap-result CM B (result/expr RT V0)}
    {SUB: subtype CM FS RT V0 (ty/ FNN annot/unique FC) V1 V}
    {R=>O: result2output CM PM B (result/expr RT V0) Out}
    exists {PiV}
    {V=>PiV: env2input CM PM B V PiV}
    {TRANS: transform Out
            (output/exists [x]
              (output/expr x
                (combine (FTF x) (combine PiB PiV))))}
    true.

- : reftyping-ok/restore/L31 CM2PM B=>PiB T2PF CM-B-R SUB R=>O
    _ (env2input/ H1=>PiH1 K1=>PiK1)
    (transform/trans3
      (TRANS)
      (transform/inside [x] transform/rem-unused)
      (transform/inside [x]
        (transform/implies
          (implies/trans3
            (implies/equiv equiv/roll3)
            (implies/combine
              (implies/trans (implies/equiv equiv/reflexive) (IMP x))
              (implies/equiv equiv/roll2))
            (implies/combine (implies/equiv (PF-EQV x))
              (implies/combine (implies/equiv (PiB'<=>PiB)) implies/reflexive))))))
    <- make-before-write-format CM2PM CM-B-R SUB
      not-borrow/unique R=>O _ TRANS
      (before-write-format/expr H1=>PiH1 B=>PiB' K1=>PiK1 RT2T T2PF1)
    <- reftyping-ok/restore/L3/L SUB RT2T T2PF1 _ T2PF' IMP
    <- cxt2perm-equiv B=>PiB' B=>PiB predmap`eq/ cxt`eq/ PiB'<=>PiB
    <- ty2perm-deterministic T2PF' T2PF predmap`eq/ ty`eq/ PF-EQ
    <- ({x} permission`eq-implies-equiv (PF-EQ x) (PF-EQV x)).

%worlds (gtermvar) (reftyping-ok/restore/L31 _ _ _ _ _ _ _ _ _).
%total { } (reftyping-ok/restore/L31 _ _ _ _ _ _ _ _ _).


%theorem reftyping-ok/restore/L1
  : forall* {CM} {PM} {B0} {F} {FTF} {K1} {PiK1} {H0} {PiH0} {PiB0} {N} {FM}
    {FNN} {FC} {B1} {FFM} {H1} {FS} {K2} {K3}
    forall {O} {PiK} {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {FML: fldmap`lookup FM F (ty/ FNN annot/unique FC)}
    {T2PF: ty2perm PM (ty/ FNN annot/unique FC) FTF}
    {H0=>PiH0: make-encumbered CM PM B0 H0 PiH0}
    {B0=>PiB0: cxt2perm PM B0 PiB0}
    {K1=>PiK1: capset2perm CM PM B0 K1 PiK1}
    {N!<B0: cxt`fresh B0 (s N)}
    {B0+N=B1: {x} cxt`update B0 (s N) (cxt-info/ x (ty/ FNN annot/unique FC)) (B1 x)}
    {N!<H0: set`not-member H0 (s N)}
    {H0+N=H1: set`add H0 (s N) H1}
    {CML: clsmap`lookup CM FC FFM}
    {FFM-DM=FS: fldmap`domain FFM FS}
    {N+FS=K2: nat+set2set (s N) FS K2}
    {K1+K2=K3: set`combine K1 K2 K3}
    exists {PiH1} {PiB1} {PiK3}
    {B1=>PiB1: {x} cxt2perm PM (B1 x) (PiB1 x)}
    {H1=>PiH1: {x} make-encumbered CM PM (B1 x) H1 (PiH1 x)}
    {K3=>PiK3: {x} capset2perm CM PM (B1 x) K3 (PiK3 x)}
    {TRANS: transform
            (output/expr O
              (combine PiH0
                (combine PiB0
                  (combine (fperm O F FTF)
                    (combine (unitperm (encumbered (fperm O F FTF) PiK)) PiK1)))))
            (output/exists [x]
              (output/expr O
                (combine (unitperm (basic O F x))
                  (combine (unitperm (encumbered (fperm O F FTF) PiK))
                    (combine (PiB1 x)
                      (combine (PiH1 x) (PiK3 x)))))))}
    true.

- : reftyping-ok/restore/L1 _ _ CM-CM CM2PM _ FT=>FTF
    (H0=>PiH0:make-encumbered CM PM B0 H0 PiH0)
    (B0=>PiB0:cxt2perm PM B0 PiB0)
    (B0+K1=>PiK1:capset2perm CM PM B0 K1 PiK1)
    N!<B0 B0+N=B1 N!<H0 H0+N=H1 CML FFM-DM=FS N+FS=K2 K1+K2=K3 _ _ PiK3
    ([x] cxt2perm/U B0=>PiB0 N!<B0 (B0+N=B1 x) (ty2perm2/unique FT=>FTF-B))
    ([x] make-encumbered/U (B1+H0=>PiH0 x) (B1->N x) CML PML FFM-DM=FS FS=>PF N!<H0 H0+N=H1)
    B1+K3=>PiK3
    (transform/trans3
      (transform/implies
        (implies/trans
          (implies/equiv equiv/roll3)
          (implies/combine
            (implies/equiv (equiv/symmetric equiv/one))
            (implies/reflexive))))
      (transform/skolem)
      (transform/inside [rf]
        (transform/implies
          (implies/trans3
            (implies/combine
              (implies/trans
                (implies/equiv equiv/one)
                (implies/combine implies/reflexive (IMP0 rf)))
              implies/reflexive)
            (implies/symmetric-associate)
            (implies/combine implies/reflexive
              (implies/trans4
                (implies/combine
                  (implies/symmetric-associate)
                  (implies/reorder))
                (implies/equiv equiv/swap-middle)
                (implies/combine
                  (implies/reflexive)
                  (implies/trans
                    (implies/equiv equiv/swap-middle)
                    (implies/combine implies/reflexive
                      (implies/trans
                        (implies/reorder)
                        (implies/combine implies/reflexive
                          (implies/trans3
                            (implies/combine (IMP1 rf) implies/reflexive)
                            (implies/commute)
                            (implies/equiv (PiK1+PiK2<=>PiK3 rf))))))))
                (implies/equiv equiv/roll3)))))))
    <- clsmap2predmap-implies-predmap-lookup CM2PM CML _ PML
    <- letRefTyping-helper/base/unique/L4L1** CM-CM CM2PM CML PML FFM-DM=FS FT=>FTF
      _ _ FS=>PF FT=>FTF-B IMP0
    <- ({x} cxt`update-implies-lookup (B0+N=B1 x) (B1->N x))
    <- letRefTyping-helper/base/unique/L4L2* CML FS=>PF B1->N N+FS=K2 _ B1+K2=>PiK2 IMP1 _
    <- cxt`fresh-update-preserves-capset2perm B0+K1=>PiK1 N!<B0 B0+N=B1 B1+K1=>PiK1
    <- cxt`fresh-update-preserves-make-encumbered H0=>PiH0 N!<B0 B0+N=B1 B1+H0=>PiH0
    <- ({x} set`split-implies-permission-combine-converse K1+K2=K3 (B1+K1=>PiK1 x) (B1+K2=>PiK2 x)
         (PiK3 x) (B1+K3=>PiK3 x) (PiK1+PiK2<=>PiK3 x)).

%worlds (gtermvar) (reftyping-ok/restore/L1 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total { } (reftyping-ok/restore/L1 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).