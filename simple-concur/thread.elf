%%%%% thread.elf
%%%%% Thread definition
%%%%% John Boyland

%{%
A thread is implemented as a pair of 
(1) a set of known write keys
(2) the PC (an expresion).
%}%




%%%% Functor use



%abbrev expr`eq = term`eq.
%abbrev expr`eq/ = term`eq/.

%%%%% thread.elf
%%%%% a pseudo-functor
%%%%% John Boyland

%{%
We require the following definitions:
  set : equality type.
  expr : equality type.
The result is an equality type too.
%}%




%%%% Definitions



thread : type.

thread/ : set -> expr -> thread.


eq : thread -> thread -> type.

eq/ : eq P P.



%%%% Theorems



%%% theorems about eq



%theorem false-implies-eq :
	forall* {X1} {X2}
	forall {F:void}
	exists {E:eq X1 X2}
	true.

%worlds (%{nothing}%) (false-implies-eq _ _).
%total { } (false-implies-eq _ _).


%theorem meta-eq :
	forall {X1} {X2} {E:eq X1 X2}
	true.

- : meta-eq _ _ eq/.

%worlds (%{nothing}%) (meta-eq _ _ _).
%total { } (meta-eq _ _ _).
%reduces X = Y (meta-eq X Y _).

	
%theorem eq-reflexive : 
	forall {X} 
	exists {E:eq X X} 
	true.

- : eq-reflexive _ eq/.

%worlds (%{nothing}%) (eq-reflexive _ _).
%total { } (eq-reflexive _ _).


%theorem eq-symmetric : 
	forall* {X} {Y}
	forall {E:eq X Y}
	exists {F:eq Y X}
	true.

- : eq-symmetric (eq/) (eq/).

%worlds (%{nothing}%) (eq-symmetric _ _).
%total { } (eq-symmetric _ _).


%theorem eq-transitive : 
	forall* {X} {Y} {Z}
	forall {E1:eq X Y} {E2:eq Y Z}
	exists {F:eq X Z}
	true.

- : eq-transitive (eq/) (eq/) (eq/).

%worlds (%{nothing}%) (eq-transitive _ _ _).
%total { } (eq-transitive _ _ _).



%theorem thread-eq-implies-eq :
	forall* {D1a} {D1b} {D2a} {D2b}
        forall {E:eq (thread/ D1a D2a) (thread/ D1b D2b)}
	exists {E1:set`eq D1a D1b}
               {E2:expr`eq D2a D2b}
	true.

- : thread-eq-implies-eq eq/ set`eq/ expr`eq/.

%worlds () (thread-eq-implies-eq _ _ _).
%total { } (thread-eq-implies-eq _ _ _).


%theorem thread-preserves-eq :
	forall* {D1a} {D1b} {D2a} {D2b}
	forall {E1:set`eq D1a D1b}
               {E2:expr`eq D2a D2b}
        exists {E:eq (thread/ D1a D2a) (thread/ D1b D2b)}
	true.

- : thread-preserves-eq set`eq/ expr`eq/ eq/.

%worlds () (thread-preserves-eq _ _ _).
%total { } (thread-preserves-eq _ _ _).





%%%% Auxialiary Definitions



%abbrev writekey = nat.


%abbrev onewritekey = [W] (set/+ W set/0).




%%%% Exports



%abbrev thread`thread = thread.
%abbrev thread`thread/ = thread/.
%abbrev thread`eq = eq.
%abbrev thread`eq/ = eq/.
%abbrev thread`false-implies-eq = false-implies-eq.
%abbrev thread`meta-eq = meta-eq.
%abbrev thread`eq-reflexive = eq-reflexive.
%abbrev thread`eq-symmetric = eq-symmetric.
%abbrev thread`eq-transitive = eq-transitive.
%abbrev thread`thread-eq-implies-eq = thread-eq-implies-eq.
%abbrev thread`thread-preserves-eq = thread-preserves-eq.
%abbrev thread`writekey = writekey.
%abbrev thread`onewritekey = onewritekey.
