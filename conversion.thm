%%% Theorems about converting from reftype to permission type.

%theorem join-no-effect-no-change
  : forall {XX}
    exists {J: effects`join no-effect XX XX}
    true.

- : join-no-effect-no-change _
    (effects`join/ set`union/L shared-efx`join/L efxmap`join/L set`disjoint/L
      efxmap`restrict/0 RM set`disjoint/L DM efxmap`domain/0)
    <- set`remove-total RM
    <- efxmap`domain-total DM.

%worlds () (join-no-effect-no-change _ _).
%total {} (join-no-effect-no-change _ _).
 
    
%theorem reftyping-ok/expr-helper
  : forall* {CM} {PM} {MM} {W} {B} {E} {RT} {XX1} {XX2} {XX}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CM-B: clsmap-cxt CM B}
    {MM2W: methmap2progtype CM PM MM W}
    {RTYP: reftyping CM MM B E (result/expr RT XX1)}
    {CM-B-XX2: clsmap-cxt-effects CM B XX2}
    {NC-XX2: effects`no-consume XX2}
    {XM2+XX1=XX: effects`join XX1 XX2 XX}
    exists {Pi} {Out} {XX2I: effects2input CM PM B XX Pi}
    {XX2O: effects2output CM PM B RT XX Out}
    {TYP: typing W Pi E Out}
    true.
 
- : reftyping-ok/expr-helper CM-CM CM2PM CM-B _
    (reftyping/lit ty2reftype/shared _ BL)
    (clsmap-cxt-effects/ CM-B-XM B-S)
    (effects`no-consume/ NC-XM) XX1+XX2=XX %{=>}%
    _ _ XX=>Pi XX=>Out 
    (tTrans2
      (tObjLoc)
      (transform/trans
        (transform/implies
          (implies/trans3
            (implies/equiv (equiv/symmetric equiv/associate))
            (implies/combine
              (implies/trans3
                (implies/equiv equiv/identity)
                (IMP)
                (implies/equiv equiv/commute))
              (implies/reflexive))
            (implies/equiv (equiv/symmetric equiv/associate))))
        (transform/gen-exists _)))
    <- shared-efx2perm-total SX=>Pi4
    <- clsmap-cxt-efxmap-implies-efxmap2perm CM-CM CM2PM CM-B-XM _ T+XM=>Pi3
    <- efxmap`no-consume-same-permission NC-XM T+XM=>Pi3 F+XM=>Pi3
    <- clsmap-cxt-implies-cxt2perm CM-CM CM2PM CM-B _ B=>Pi1
    <- clsmap-cxt-lookup-implies-ty2perm CM-B BL B=>Pi1 _ T2PF IMP
    <- join-no-effect-no-change _ XX1+XX2=XX2
    <- effects`join-unique XX1+XX2=XX2 XX1+XX2=XX effects`eq/ effects`eq/ XX2=XX
    <- effects2input-respects-eq (effects2input/ SX=>Pi4 T+XM=>Pi3 set2perm/0 B=>Pi1)
      XX2=XX permission`eq/ XX=>Pi
    <- effects2output-respects-eq (effects2output/shared T2PF SX=>Pi4 F+XM=>Pi3 B=>Pi1)
      nonnull`eq/ nat`eq/ targets`eq/ XX2=XX XX=>Out.
      
- : reftyping-ok/expr-helper CM-CM CM2PM CM-B MM2W
    (reftyping/lit ty2reftype/borrow _ BL)
    (clsmap-cxt-effects/ CM-B-XM B-S)
    (effects`no-consume/ NC-XM) XX1+XX2=XX %{=>}%
    _ _ XX=>Pi XX=>Out
    (tTrans2
      (tObjLoc)
      (transform/trans
        (transform/implies
          (implies/trans3
            (implies/equiv (equiv/symmetric equiv/associate))
            (implies/combine
              (implies/trans3
                (implies/equiv equiv/identity)
                (IMP)
                (implies/equiv equiv/commute))
              (implies/trans
                (implies/equiv
                  (equiv/transitive
                    (equiv/symmetric equiv/identity)
                    (equiv/commute)))
                (implies/combine
                  (gen-objequal-self _)
                  (implies/reflexive))))
            (implies/equiv (equiv/symmetric equiv/associate))))
        (transform/gen-exists _)))
    <- shared-efx2perm-total SX=>Pi4
    <- clsmap-cxt-efxmap-implies-efxmap2perm CM-CM CM2PM CM-B-XM _ T+XM=>Pi3
    <- efxmap`no-consume-same-permission NC-XM T+XM=>Pi3 F+XM=>Pi3
    <- clsmap-cxt-implies-cxt2perm CM-CM CM2PM CM-B _ B=>Pi1
    <- clsmap-cxt-lookup-implies-ty2perm CM-B BL B=>Pi1 _ T2PF IMP
    <- join-no-effect-no-change _ XX1+XX2=XX2
    <- effects`join-unique XX1+XX2=XX2 XX1+XX2=XX effects`eq/ effects`eq/ XX2=XX
    <- effects2input-respects-eq (effects2input/ SX=>Pi4 T+XM=>Pi3 set2perm/0 B=>Pi1)
      XX2=XX permission`eq/ XX=>Pi
    <- effects2output-respects-eq
      (effects2output/unique/0f T2PF SX=>Pi4 F+XM=>Pi3
        ([_] (set2facts/U set2facts/0 set`update/0 set`not-member/0)) B=>Pi1
        tgtmap`size/0 (set`size/+ set`size/0)) nonnull`eq/ nat`eq/
      targets`eq/ XX2=XX XX=>Out.

- : reftyping-ok/expr-helper CM-CM CM2PM CM-B MM2W
    (reftyping/read RTYP-E CML FML MG XX11+XX12=XX1) CM-B-XX2 NC-XX2 XX1+XX2=XX
    _ _ XX=>Pi XX=>Out2 TYP
    <- reftyping-implies-good-result
      CM-CM CM-B RTYP-E (good-result/expr WF-XX11 GS-XX11 CM-B-XX11 CM-B-GS _)
    <- make-targets-and-effects-no-consume efx`not-consume/read MG NC-XX12
    <- make-targets-and-effects-consistent
      CML FML CM-B-GS MG CM-B-GS' CM-B-XX12 GS'-XX12 WF-XX12
    <- effects`join-associative XX11+XX12=XX1 XX1+XX2=XX XX3 XX12+XX2=XX3 XX11+XX3=XX
    <- effects`join-preserves-no-consume NC-XX12 NC-XX2 XX12+XX2=XX3 NC-XX3
    <- effects`join-no-consume-commutative NC-XX2 XX12+XX2=XX3 XX2+XX12=XX3
    <- effects`join-associative-converse
      XX2+XX12=XX3 XX11+XX3=XX XX4 XX11+XX2=XX4 XX4+XX12=XX
    <- join-preserves-clsmap-cxt-effects CM-B-XX11 CM-B-XX2 XX11+XX2=XX4 CM-B-XX4
    <- join-preserves-clsmap-cxt-effects CM-B-XX12 CM-B-XX2 XX12+XX2=XX3 CM-B-XX3
    <- reftyping-ok/expr-helper CM-CM CM2PM CM-B MM2W RTYP-E CM-B-XX3 NC-XX3 XX11+XX3=XX
      _ _ XX=>Pi XX=>Out TYP-E
    <- effects`no-consume-implies-wf NC-XX2 WF-XX2
    <- effects`join-implies-leq WF-XX11 WF-XX2 XX11+XX2=XX4 XX11<=XX4 XX2<=XX4
    <- effects`join-preserves-wf WF-XX11 WF-XX2 XX11+XX2=XX4 WF-XX4
    <- leq-preserves-targets-effects GS-XX11 XX11<=XX4 G-XX4
    <- reftyping-ok/read _ CM-CM CM2PM CM-B-GS WF-XX4 CM-B-XX4 CM-B-XX12 G-XX4
      XX=>Pi XX=>Out TYP-E CML FML MG XX4+XX12=XX _ XX=>Out2 TYP.

%worlds () (reftyping-ok/expr-helper _ _ _ _ _ _ _ _ _ _ _ _ _).
%trustme %total (T) (reftyping-ok/expr-helper _ _ _ _ T _ _ _ _ _ _ _ _).