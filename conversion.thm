%%% Theorems about conversion

%theorem wf-clsmap-lookup-implies-wf-fldmap :
	forall*	{M} {N} {D}
	forall	{A: wf-clsmap M}
		{L: clsmap`lookup M N D}
	exists	{R: wf-fldmap D}
	true.

%worlds () (wf-clsmap-lookup-implies-wf-fldmap _ _ _).
%trustme %total { } (wf-clsmap-lookup-implies-wf-fldmap _ _ _).

%theorem wf-fldmap-lookup-implies-not-borrowed
  : forall* {FM} {F} {NN} {A} {C}
    forall {WF: wf-fldmap FM}
    {FML: fldmap`lookup FM F (ty/ NN A C)}
    exists {NB: not-borrowed A}
    true.

%worlds () (wf-fldmap-lookup-implies-not-borrowed _ _ _).
%trustme %total { } (wf-fldmap-lookup-implies-not-borrowed _ _ _).


%theorem reftyping-ok/expr-helper/write/L4
  : forall* {Z} {F} {PF}
    forall {EQ: rat`eq Z one}
    exists {EQV: {x} equiv
                 (ffperm (fraction/ Z) x F PF)
                 (unitperm (precise-exists x F PF))}
    true.

- : reftyping-ok/expr-helper/write/L4 rat`eq/ ([_] equiv/one).

%worlds () (reftyping-ok/expr-helper/write/L4 _ _).
%total { } (reftyping-ok/expr-helper/write/L4 _ _).


%theorem reftyping-ok/expr
  : forall* {CM} {PM} {MM} {W} {E} {N} {R} {ENV}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CM-B-ENV: clsmap-env CM ENV}
    {RTYP: reftyping N CM MM ENV E R}
    exists {Pi} {Out} {XX2I: env2input CM PM ENV Pi}
    {XX2O: result2output CM PM R Out}
    {TYP: typing W Pi E Out}
    true.

- : reftyping-ok/expr (CM-CM:clsmap-clsmap CM CM)
    CM2PM CM-ENV (reftyping/read RTYP-E CML FML MG CF ENV-M)
    Pi Out ENV=>Pi R=>Out2 TYP
    <- reftyping-ok/expr CM-CM CM2PM CM-ENV RTYP-E _ _ ENV=>Pi R=>Out TYP-E
    <- reftyping-implies-clsmap-result CM-CM CM-ENV RTYP-E CM-R
    <- reftyping-ok/read _ CM-CM CM2PM CM-R ENV=>Pi R=>Out TYP-E CML FML MG CF
      ENV-M _ R=>Out2 TYP.

%worlds () (reftyping-ok/expr _ _ _ _ _ _ _ _ _).
%total (T) (reftyping-ok/expr _ _ _ T _ _ _ _ _).