%%% consistency relation between clsmap, methmap and fldmap


% ============================ clsmap-ty ==================================
% check if a type is in clsmap
% =========================================================================

clsmap-ty : clsmap -> ty -> type.

clsmap-ty/notnull : clsmap-ty CM (ty/ _ _ C)
                    <- clsmap`lookup CM C _.

clsmap-ty/null : clsmap-ty CM ty/null.


% ============================ clsmap-methty ==============================
% check if all types appear in methty is also in clsmap
% =========================================================================

clsmap-methty : clsmap -> methty -> type.

clsmap-methty/base : clsmap-methty CM (methty/base T _)
                     <- clsmap-ty CM T.

clsmap-methty/args : clsmap-methty CM (methty/arg T _ _ A)
                     <- clsmap-ty CM T
                     <- clsmap-methty CM A.

% =========================================================================


% ============================ clsmap-fldmap ==============================
% check if a fldmap is consistent with a clsmap.
% =========================================================================

clsmap-fldmap : clsmap -> fldmap -> type.

clsmap-fldmap/0 : clsmap-fldmap _ fldmap/0.

clsmap-fldmap/+ : clsmap-fldmap CM (fldmap/+ _ T FM)
                  <- clsmap-ty CM T
                  <- clsmap-fldmap CM FM.

% =========================================================================


% ============================ clsmap-clsmap ==============================
% check if a clsmap is consistent with itself.
% =========================================================================

clsmap-clsmap : clsmap -> clsmap -> type.

clsmap-clsmap/0 : clsmap-clsmap _ clsmap`map/0.

clsmap-clsmap/+ : clsmap-clsmap CM0 (clsmap`map/+ C FM CM)
                  <- clsmap`lookup CM0 C FM
                  <- clsmap-fldmap CM0 FM
                  <- clsmap`shift C CM CMS
                  <- clsmap-clsmap CM0 CMS.

% =========================================================================


% ============================ clsmap-methmap =============================
% check if a clsmap is consistent with a methmap
% =========================================================================

clsmap-methmap : clsmap -> methmap -> type.

clsmap-methmap/0 : clsmap-methmap _ methmap`map/0.

clsmap-methmap/meth
  : clsmap-methmap CM (methmap`map/+ N MT MM)
    <- clsmap`fresh CM N
    <- clsmap-methty CM MT
    <- methmap`shift N MM MMS
    <- clsmap-methmap CM MMS.

clsmap-methmap/const
  : clsmap-methmap CM
    (methmap`map/+ N (methty/arg (ty/ nonnull/yes _ N) _ _ MT) MM)
    <- clsmap`lookup CM N _
    <- clsmap-methty CM MT
    <- methmap`shift N MM MMS
    <- clsmap-methmap CM MMS.

% =========================================================================


% =========================== clsmap-cxt ==================================
% Consistency between clsmap and explicit context.
% All entries in the context should be either shared or
% borrowed.
% =========================================================================

clsmap-cxt : clsmap -> cxt -> type.

clsmap-cxt/nil : clsmap-cxt _ cxt/nil.

clsmap-cxt/cons/b
  : clsmap-cxt CM (cxt/cons O (ty/ NN annot/borrow C) B)
    <- clsmap-ty CM (ty/ NN annot/borrow C)
    <- clsmap-cxt CM B.

clsmap-cxt/cons/s
  : clsmap-cxt CM (cxt/cons O (ty/ NN annot/shared C) B)
    <- clsmap-ty CM (ty/ NN annot/shared C)
    <- clsmap-cxt CM B.

% =========================================================================



% ============================ Good Result ================================
% Result from reftyping has to be internally consistent and
% in a good format. This is defined below.
% =========================================================================


% ============================ clsmap-cxt-tgtmap ==========================
% Since tgtmap is a mapping from objects to set of fields, this relation
% says each set of fields has to be some subset of the domain of the fldmap
% that the object corresponds to.
% =========================================================================

clsmap-cxt-tgtmap : clsmap -> cxt -> tgtmap -> type.

clsmap-cxt-tgtmap/0 : clsmap-cxt-tgtmap _ _ tgtmap/0.

clsmap-cxt-tgtmap/U : clsmap-cxt-tgtmap CM B GM
                      <- clsmap-cxt-tgtmap CM B GM'
                      <- tgtmap`fresh GM' N
                      <- tgtmap`update GM' N S GM
                      <- cxt`lookup B (object/ N) (ty/ _ _ C)
                      <- clsmap`lookup CM C FM
                      <- fldmap`domain FM FS
                      <- set`leq S FS.

% =========================================================================


% ============================ clsmap-cxt-efxmap ==========================
% Same as clsmap-cxt-efxmap, here we require the domain of each inner-efxmap
% to be a subset of the corresponding fldmap's domain. 
% =========================================================================

clsmap-cxt-efxmap : clsmap -> cxt -> efxmap -> type.

clsmap-cxt-efxmap/0 : clsmap-cxt-efxmap _ _ efxmap/0.

clsmap-cxt-efxmap/U : clsmap-cxt-efxmap CM B XM
                      <- clsmap-cxt-efxmap CM B XM'
                      <- efxmap`fresh XM' N
                      <- efxmap`update XM' N M XM
                      <- cxt`lookup B (object/ N) (ty/ _ _ C)
                      <- clsmap`lookup CM C FM
                      <- fldmap`domain FM FS
                      <- inner-efxmap`domain M MS
                      <- set`leq MS FS.

% =========================================================================


% ============================ cxt-set ====================================
% This relation says all entries in set are also in context.
% =========================================================================

cxt-set : cxt -> set -> type.

cxt-set/0 : cxt-set _ set/0.

cxt-set/U : cxt-set B S
             <- set`not-member S' N
             <- set`add S' N S
             <- cxt`lookup B (object/ N) _
             <- cxt-set B S'.

% =========================================================================


% ============================ same-class =================================
% This relation says that all entries (locations) in the set are of the
% same class.
% =========================================================================

same-class : cxt -> set -> nat -> type.

same-class/0 : same-class _ set/0 _.

same-class/U : same-class B S C
               <- same-class B S' C
               <- set`not-member S' N
               <- set`add S' N S
               <- cxt`lookup B (object/ N) (ty/ _ _ C).

% =========================================================================


% ============================ clsmap-cxt-targets =========================
% A wrapper on same-class and clsmap-cxt-tgtmap.
% =========================================================================

clsmap-cxt-targets : clsmap -> cxt -> nat -> targets -> type.

clsmap-cxt-targets/shared : clsmap-cxt-targets _ _ _ targets/shared.

clsmap-cxt-targets/unique : clsmap-cxt-targets CM B C (targets/unique S GM _)
                            <- tgtmap`domain GM GS
                            <- set`disjoint S GS
                            <- cxt-set B S
                            <- same-class B S C
                            <- clsmap-cxt-tgtmap CM B GM.

% =========================================================================


% ============================ clsmap-cxt-effects =========================
% Uses clsmap-cxt-efxmap and cxt-set. Also requires that the efxmap
% and set in effects are disjoint.
% =========================================================================

clsmap-cxt-effects : clsmap -> cxt -> effects -> type.

clsmap-cxt-effects/ : clsmap-cxt-effects CM B (effects/ M X S)
                      <- cxt-set B S
                      <- clsmap-cxt-efxmap CM B M.

% =========================================================================


% ============================ targets-effects ============================
% Targets and effects has to be consistent with each other.
% =========================================================================

shared-efx-not-none : shared-efx -> type.

shared-efx-not-none/read : shared-efx-not-none shared-efx/read.

shared-efx-not-none/write : shared-efx-not-none shared-efx/write.


shared-efx-relation : bool -> shared-efx -> type.

shared-efx-relation/t : shared-efx-relation true SX <- shared-efx-not-none SX.

shared-efx-relation/f : shared-efx-relation false _.


targets-effects : targets -> effects -> type.

targets-effects/unique
  : targets-effects (targets/unique S G B) (effects/ M X C)
    <- tgtmap`leq-efxmap G M
    <- select-tgtmap M G M1 M2
    <- efxmap`no-consume M2
    <- shared-efx-relation B X.

targets-effects/shared : targets-effects (targets/shared) _.

% =========================================================================


good-result : clsmap -> cxt -> result K -> type.

good-result/expr : good-result CM B (result/expr (reftype/ _ C G) XX)
                   <- clsmap`lookup CM C FM
                   <- clsmap-cxt-targets CM B C G
                   <- clsmap-cxt-effects CM B XX
                   <- targets-effects G XX
                   <- effects`wf XX.

good-result/cond : good-result CM B (result/cond XX)
                   <- clsmap-cxt-effects CM B XX.

good-result/args/0 : good-result CM B (result/args/0 XX)
                     <- clsmap-cxt-effects CM B XX.

good-result/args/+ : good-result CM B (result/args/+ RT AR)
                     <- good-result CM B AR.

% =========================================================================