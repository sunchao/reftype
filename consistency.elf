%%% consistency relation between clsmap, methmap and fldmap

%%% check if a type is in clsmap

clsmap-ty : clsmap -> ty -> type.

clsmap-ty/notnull
  : clsmap-ty CM (ty/ _ _ C)
    <- clsmap`lookup CM C _.

clsmap-ty/null : clsmap-ty CM ty/null.



% check if all types appear in methty is also in clsmap

clsmap-methty : clsmap -> methty -> type.

% nothing to check for shared effect
clsmap-methty/base
  : clsmap-methty CM (methty/base T _)
    <- clsmap-ty CM T.

% should we worried that effect sets are not
% subsets of class's field set?
clsmap-methty/args
  : clsmap-methty CM (methty/arg T _ _ A)
    <- clsmap-ty CM T
    <- clsmap-methty CM A.


% check if a fldmap is consistent with a clsmap

clsmap-fldmap : clsmap -> fldmap -> type.

clsmap-fldmap/0 : clsmap-fldmap _ fldmap/0.

clsmap-fldmap/+
  : clsmap-fldmap CM (fldmap/+ _ T FM)
    <- clsmap-ty CM T
    <- clsmap-fldmap CM FM.


% check if a clsmap is consistent with itself

clsmap-clsmap : clsmap -> clsmap -> type.

clsmap-clsmap/0 : clsmap-clsmap _ clsmap`map/0.

clsmap-clsmap/+
  : clsmap-clsmap CM0 (clsmap`map/+ C FM CM)
    <- clsmap`lookup CM0 C FM
    <- clsmap-fldmap CM0 FM
    <- clsmap`shift C CM CMS
    <- clsmap-clsmap CM0 CMS.


% check if a clsmap is consistent with a methmap

clsmap-methmap : clsmap -> methmap -> type.

clsmap-methmap/0 : clsmap-methmap _ methmap`map/0.

clsmap-methmap/meth
  : clsmap-methmap CM (methmap`map/+ N MT MM)
    <- clsmap`fresh CM N
    <- clsmap-methty CM MT
    <- methmap`shift N MM MMS
    <- clsmap-methmap CM MMS.

clsmap-methmap/const
  : clsmap-methmap CM
    (methmap`map/+ N (methty/arg (ty/ nonnull/yes _ N) _ _ MT) MM)
    <- clsmap`lookup CM N _
    <- clsmap-methty CM MT
    <- methmap`shift N MM MMS
    <- clsmap-methmap CM MMS.


% consistency between clsmap and context

clsmap-cxt : clsmap -> cxt -> type.

clsmap-cxt/nil : clsmap-cxt _ cxt/nil.

clsmap-cxt/cons
  : cxt`fresh BP N
    -> cxt`update BP N (cxtv/ O T) B
    -> clsmap-ty CM T
    -> clsmap-cxt CM BP
    -> clsmap-cxt CM B.


% consistency between location set and cxt
% All locations in set must be of same class.

cxt-class-set : cxt -> nat -> set -> type.

cxt-class-set/0 : cxt-class-set _ _ set/0.

cxt-class-set/U
  : set`not-member SP N
    -> set`add SP N S
    -> cxt`lookup B N (cxtv/ _ (ty/ _ _ C))
    -> cxt-class-set B C SP
    -> cxt-class-set B C S.



% for each entry (L -> M) in efxmap, L must be in cxt, and M must
% be consistent with SOME fldmap in clsmap.

clsmap-cxt-efxmap : clsmap -> cxt -> efxmap -> type.

clsmap-cxt-efxmap/0 : clsmap-cxt-efxmap _ _ efxmap/0.

clsmap-cxt-efxmap/U
  : efxmap`fresh XMP N
    -> efxmap`update XMP N M XM
    -> cxt`lookup B N (cxtv/ _ (ty/ _ _ C))
    -> clsmap`lookup CM C FM
    -> fldmap`domain FM FS
    -> inner-efxmap`domain M MS
    -> set`leq MS FS
    -> clsmap-cxt-efxmap CM B XMP
    -> clsmap-cxt-efxmap CM B XM.


clsmap-cxt-tgtmap : clsmap -> cxt -> tgtmap -> type.

clsmap-cxt-tgtmap/0 : clsmap-cxt-tgtmap _ _ tgtmap/0.

clsmap-cxt-tgtmap/U
  : clsmap-cxt-tgtmap CM B GMP
    -> tgtmap`fresh GMP N
    -> tgtmap`update GMP N S GM
    -> cxt`lookup B N (cxtv/ _ (ty/ _ _ C))
    -> clsmap`lookup CM C FM
    -> fldmap`domain FM FS
    -> set`leq S FS
    -> clsmap-cxt-tgtmap CM B GM.


clsmap-cxt-reftype : clsmap -> cxt -> reftype -> type.

clsmap-cxt-reftype/shared
  : clsmap-cxt-reftype CM B (reftype/ _ C targets/shared)
    <- clsmap`lookup CM C _.

clsmap-cxt-reftype/unique
  : clsmap-cxt-reftype CM B (reftype/ _ C (targets/unique S GM _))
    <- cxt-class-set B C S
    <- clsmap-cxt-tgtmap CM B GM
    <- clsmap`lookup CM C FM.