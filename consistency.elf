%%% consistency relation between clsmap, methmap and fldmap
%%% Chao Sun
%%% $Id: consistency.elf,v 1.2 2013/03/22 23:09:41 csun Exp $
%%% Created at Feb, 8th 2012

%%% check if a type is in clsmap

clsmap-ty : clsmap -> ty -> type.

clsmap-ty/notnull : clsmap-ty CM (ty/ _ _ C) 
		    <- clsmap`domain? CM C true.

clsmap-ty/null : clsmap-ty CM ty/null.


clsmap-reftype : clsmap -> reftype -> type.

clsmap-reftype/notnull
   : clsmap-reftype CM (reftype/ T _) 
     <- clsmap-ty CM T.

clsmap-reftype/null : clsmap-reftype _ (reftype/null).


%%% check if all types appear in methty is also in clsmap

clsmap-methty : clsmap -> methty -> type.

clsmap-methty/base
   : clsmap-methty CM (methty/base T) 
      <- clsmap-ty CM T.

clsmap-methty/args
   : clsmap-methty CM (methty/arg A T _ _)
      <- clsmap-ty CM T
      <- clsmap-methty CM A.


%%% check if a fldmap is consistent with a clsmap

clsmap-fldmap : clsmap -> fldmap -> type.

clsmap-fldmap/0 : clsmap-fldmap _ fldmap/0.

clsmap-fldmap/null
   : clsmap-fldmap CM (fldmap/+ _ ty/null FM)
      <- clsmap-fldmap CM FM.

clsmap-fldmap/+
   : clsmap-fldmap CM (fldmap/+ F (ty/ _ _ C) FM)
      <- clsmap`domain? CM C true
      <- clsmap-fldmap CM FM.


%%% check if a clsmap is consistent with itself

clsmap-clsmap : clsmap -> clsmap -> type.

clsmap-clsmap/0 : clsmap-clsmap _ clsmap`map/0.

clsmap-clsmap/+
   : clsmap-clsmap CM0 (clsmap`map/+ C FM CM)
      <- clsmap`lookup CM0 C FM
      <- clsmap-fldmap CM0 FM
      <- clsmap`shift C CM CM'
      <- clsmap-clsmap CM0 CM'.


%%% check if a clsmap is consistent with a methmap

clsmap-methmap : clsmap -> methmap -> type.

clsmap-methmap/0 : clsmap-methmap _ methmap`map/0.

clsmap-methmap/meth
   : clsmap-methmap CM (methmap`map/+ N MT MM)
      <- clsmap`fresh CM N
      <- clsmap-methty CM MT
      <- methmap`shift N MM MM'
      <- clsmap-methmap CM MM'.

clsmap-methmap/const
   : clsmap-methmap CM
      (methmap`map/+ N (methty/arg MT (ty/ nonnull/yes _ N) _ _) MM)
      <- clsmap`lookup CM N _
      <- clsmap-methty CM MT
      <- methmap`shift N MM MM'
      <- clsmap-methmap CM MM'.


%%% consistency between clsmap and context

clsmap-cxt : clsmap -> cxt -> type.

clsmap-cxt/nil : clsmap-cxt _ cxt/nil.

clsmap-cxt/cons
  : clsmap-cxt CM (cxt/cons _ _ T B)
    <- clsmap-cxt CM B
    <- clsmap-ty CM T.


%%% consistency between (object) set and cxt

cxt-set : cxt -> set -> type.

cxt-set/0 : cxt-set _ set/0.

cxt-set/+ : cxt-set B (set/+ N S)
	    <- cxt-lookup-index B N _ _
	    <- set`shift N S SP
	    <- cxt-set B SP.

fldmap-inner-efxmap : fldmap -> inner-efxmap -> type.

fldmap-inner-efxmap/0 : fldmap-inner-efxmap _ inner-efxmap/0.

fldmap-inner-efxmap/+
  : fldmap-inner-efxmap FM (inner-efxmap/+ F _ M)
    <- fldmap`lookup FM F _
    <- inner-efxmap`shift F M MP
    <- fldmap-inner-efxmap FM MP.

cxt-efxmap : cxt -> clsmap -> efxmap -> type.

cxt-efxmap/0 : cxt-efxmap _ _ efxmap/0.

cxt-efxmap/+
  : cxt-efxmap B CM (efxmap/+ L M XM)
    <- cxt-lookup-index B L _ (ty/ _ _ C)
    <- clsmap`lookup CM C FM
    <- fldmap-inner-efxmap FM M
    <- efxmap`shift L XM XMP
    <- cxt-efxmap B CM XMP.



% Theorems

% fldmap-inner-efxmap

%theorem shift-preserves-fldmap-inner-efxmap :
    forall* {N} {FM} {FMP} {M} {MP}
    forall  {FM-M: fldmap-inner-efxmap FM M}
            {SH: fldmap`shift N FM FMP}
            {SH: inner-efxmap`shift N M MP}
    exists  {FMP-MP: fldmap-inner-efxmap FMP MP}
    true.

- : shift-preserves-fldmap-inner-efxmap 
    fldmap-inner-efxmap/0 _ _ fldmap-inner-efxmap/0.

- : shift-preserves-fldmap-inner-efxmap 
    (fldmap-inner-efxmap/+ FM-MP SH FM-L) SH-FM
    (inner-efxmap`shift/+ P) (fldmap-inner-efxmap/+ FMP-MP SH' FMP-L)
    <- fldmap`shift-preserves-lookup* FM-L SH-FM P FMP-L
    <- inner-efxmap`shift-total SH-M
    <- shift-preserves-fldmap-inner-efxmap FM-MP SH-FM SH-M FMP-MP
    <- nat`plus-swap-succ P P1
    <- nat`plus-commutative P1 P2
    <- inner-efxmap`shifts-add SH SH-M P2 SH'.

%worlds () (shift-preserves-fldmap-inner-efxmap _ _ _ _).
%total (I) (shift-preserves-fldmap-inner-efxmap I _ _ _).

