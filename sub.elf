%%% subtyping

%% sub-annotating

subtype-annot : tgtmap -> efxmap -> annot -> annot -> efxmap -> type.

subtype-annot/refl/unique
   : subtype-annot GM XM annot/unique _ XM'
      <- tgtmap2efxmap GM efx/consume XM1
      <- efxmap`join XM XM1 XM'.

% no way to say something like:
% forall annot that are NOT unique...

subtype-annot/refl/shared : subtype-annot _ XM annot/shared annot/shared XM.

%%% TODO: change to efx/expose later.
subtype-annot/unique2shared
  : subtype-annot GM XM annot/unique annot/shared XM'
     <- tgtmap2efxmap GM efx/consume XM1
     <- efxmap`join XM XM1 XM'.


%% sub-nonnull

subtype-nn : nn -> nn -> type.

subtype-nn/refl : subtype-nn NN NN.

subtype-nn/yn : subtype-nn nn/yes nn/may.


%% sub-targeting

subtype-tgts : set -> set -> type.

%%% this should be wrong, but for the moment I just leave it here..

subtype-tgts/ : subtype-tgts S1 S2 <- set`leq S1 S2.


%% subtyping

subtype : efxmap -> refty -> ty -> efxmap -> type.

subtype/
  : subtype XM1 (refty/ (ty/ NN1 A1 N1) S1) (ty/ NN2 A2 N2) XM2
    <- nat`eq N1 N2
    <- subtype-annot GM1 XM1 A1 A2 XM2
    <- subtype-nn NN1 NN2.

subtype/null : subtype XM (refty/ ty/null _) (ty/ nn/may _ _) XM.
