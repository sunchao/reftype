%%% converting *map to permission


%%% Definitions

%abbrev fracperm = fraction -> permission.


set2facts : cxt -> object -> set -> formula -> type.

set2facts/0 : set2facts _ _ set/0 f.

set2facts/U
  : set`not-member SP N
    -> set`add SP N S
    -> cxt`lookup B N (cxtv/ O' _)
    -> set2facts B O SP G
    -> set2facts B O S (disj (objequal O O') G).


apply-efx : bool -> efx -> permission -> fracperm -> type.

apply-efx/read : apply-efx _ efx/read Pi ([f] (scale f Pi)).

apply-efx/write : apply-efx _ efx/write Pi ([_] Pi).

apply-efx/consume/true : apply-efx true efx/consume Pi ([_] Pi).

apply-efx/consume/false : apply-efx false efx/consume Pi ([_] empty).


%{ efxmap to permission.
The boolean is used to control whether converted
permission is input or output.
Entry 0.0 should be converted to shared permission.
clsmap should contain a special key 0, which maps
to a special fldmap. }%


inner-efxmap2perm : bool -> object -> fldmap -> predmap ->
  inner-efxmap -> fracperm -> type.

inner-efxmap2perm/0 : inner-efxmap2perm _ _ _ _ inner-efxmap/0 ([_] empty).

inner-efxmap2perm/U
  : inner-efxmap`fresh MP F
    -> inner-efxmap`update MP F X M
    -> fldmap`lookup FM F T
    -> ty2perm PM T PF
    -> apply-efx P X (unitperm (precise-exists O F PF)) Pi1
    -> inner-efxmap2perm P O FM PM MP Pi2
    -> inner-efxmap2perm P O FM PM M ([f] (Pi1 f), Pi2 f).


%{ converting a efxmap to fractional permissions
note that here to make this judgment total, we need
to have the context consistent with the clsmap. }%

efxmap2perm : bool -> clsmap -> predmap -> cxt ->
  efxmap -> fracperm -> type.

efxmap2perm/0 : efxmap2perm _ _ _ _ efxmap/0 ([_] empty).

efxmap2perm/U
  : efxmap`fresh XMP N
    -> efxmap`update XMP N M XM
    -> cxt`lookup B N (cxtv/ O (ty/ _ _ C))
    -> clsmap`lookup CM C FM
    -> inner-efxmap2perm P O FM PM M Pi1
    -> efxmap2perm P CM PM B XMP Pi2
    -> efxmap2perm P CM PM B XM ([f] (Pi1 f) , Pi2 f).


%abbrev nested-perm : object -> permission =
    [r] (unitperm (nonlinear (nested (allperm r) null all))).

maybe-efx2perm : maybe-efx -> fracperm -> type.

maybe-efx2perm/nothing : maybe-efx2perm maybe-efx/nothing ([_] empty).

maybe-efx2perm/just
  : maybe-efx2perm (maybe-efx/just X) PF
    <- apply-efx true X (unitperm (basic null all null)) PF.


effects2input : clsmap -> predmap -> cxt -> effects -> fracperm -> type.

effects2input/
  : efxmap2perm true CM PM B XM ([f] Pi1 f)
    -> maybe-efx2perm MX ([f] Pi2 f)
    -> effects2input CM PM B (effects/ XM MX) ([f] Pi1 f , Pi2 f).


%{
06-16-13: efxmap may contain inner-efxmap/0 as value. Do we need to
remove them first? Maybe not, since tgtmap in reftype should definitely
be well-formed.
}%

effects2output : clsmap -> predmap -> cxt ->
    reftype -> effects -> (fraction -> expr-output) -> type.

effects2output/shared
  : efxmap2perm false CM PM B XM ([f] Pi1 f)
    -> maybe-efx2perm MX ([f] Pi2 f)
    -> ty2perm PM (ty/ NN annot/shared C) PF
    -> effects2output CM PM B
      (reftype/ NN C targets/shared) (effects/ XM MX)
      ([f] output/exists [r]
        (output/expr r
          (combine (scale f (PF r))
            (combine (Pi1 f) (Pi2 f))))).

effects2output/unique/0f
  : tgtmap`size GM z
    -> efxmap2perm false CM PM B XM ([f] Pi1 f)
    -> ({r} set2facts B r S (GF r))
    -> maybe-efx2perm MX ([f] Pi2 f)
    -> ty2perm PM (ty/ NN annot/borrow C) PF
    -> effects2output CM PM B
      (reftype/ NN C (targets/unique S GM false)) (effects/ XM MX)
      ([f] output/exists [r]
        (output/expr r
          (combine (scale f (PF r))
            (combine (unitperm (nonlinear (GF r)))
              (combine (Pi1 f) (Pi2 f)))))).

effects2output/unique/0t
  : tgtmap`size GM z
    -> efxmap2perm false CM PM B XM ([f] Pi1 f)
    -> ({r} set2facts B r S (GF r))
    -> maybe-efx2perm MX ([f] Pi2 f)
    -> ty2perm PM (ty/ NN annot/unique C) PF
    -> effects2output CM PM B
      (reftype/ NN C (targets/unique S GM true)) (effects/ XM MX)
      ([f] output/exists [r]
        (output/expr r
          (combine (Pi1 f)
            (combine (scale f (PF r))
              (unitperm
                (encumbered
                  (scale f (PF r)) (Pi2 f))))))).

effects2output/unique/+f
  : tgtmap`size GM (s _)
    -> efxmap`remove-tgtmap XM GM XM1 XM2
    -> efxmap2perm false CM PM B XM1 ([f] Pi1 f)
    -> efxmap2perm false CM PM B XM2 ([f] Pi2 f)
    -> ({r} set2facts B r S (GF r))
    -> maybe-efx2perm MX ([f] Pi3 f)
    -> ty2perm PM (ty/ NN annot/unique C) PF
    -> effects2output CM PM B
      (reftype/ NN C (targets/unique S GM false)) (effects/ XM MX)
      ([f] output/exists [o]
        (output/exists [r]
          (output/expr o
            (combine (unitperm (nonlinear (disj (objequal o r) (GF o))))
              (combine (scale f (PF r))
                (combine (unitperm (encumbered (scale f (PF r)) (Pi2 f)))
                  (combine (Pi1 f) (Pi3 f)))))))).

effects2output/unique/+t
  : tgtmap`size GM (s _)
    -> efxmap`remove-tgtmap XM GM XM1 XM2
    -> efxmap2perm false CM PM B XM1 ([f] Pi1 f)
    -> efxmap2perm false CM PM B XM2 ([f] Pi2 f)
    -> ({r} set2facts B r S (GF r))
    -> maybe-efx2perm MX ([f] Pi3 f)
    -> ty2perm PM (ty/ NN annot/unique C) PF
    -> predmap`lookup PM C CP
    -> effects2output CM PM B
      (reftype/ NN C (targets/unique S GM true)) (effects/ XM MX)
      ([f] output/exists [o]
        (output/exists [r]
          (output/expr o
            (combine (unitperm (nonlinear (disj (objequal o r) (GF o))))
              (combine (scale f (PF r))
                (combine
                  (unitperm
                    (encumbered
                      (scale f (PF r)) (combine (Pi2 f) (Pi3 f))))
                  (Pi1 f))))))).


%{ Context => Permission
Here for unique references, we need to generate encumbered permission
for all fields of its class. This is because we carve the field permissions
out of *all* permission before we check method body, and use each
field permission individually. But, in case we want to consume a unique
parameter, we need to get back the all permission, with the encumbered
permission. }%

fldmap2perm : predmap -> fldmap -> object -> permission -> type.

fldmap2perm/0 : fldmap2perm _ fldmap/0 _ empty.

fldmap2perm/U
  : fldmap2perm PM FMP O Pi
    -> fldmap`fresh FMP F
    -> fldmap`update FMP F T FM
    -> ty2perm PM T PF
    -> fldmap2perm PM FM O (unitperm (precise-exists O F PF) , Pi).


cxt2perm : clsmap -> predmap -> cxt -> permission -> type.

cxt2perm/0 : cxt2perm _ _ cxt/nil empty.

cxt2perm/U/unique
  : cxt2perm CM PM BP Pi
    -> cxt`fresh BP N
    -> cxt`update BP N (cxtv/ O (ty/ NN annot/unique C)) B
    -> clsmap`lookup CM C FM
    -> ({o} fldmap2perm PM FM o (AF o))
    -> nn2perm NN AF PF
    -> predmap`lookup PM C CP
    -> cxt2perm CM PM B ((PF CP O) , Pi).

cxt2perm/U/shared
  : cxt2perm CM PM BP Pi
    -> cxt`fresh BP N
    -> cxt`update BP N (cxtv/ O (ty/ NN annot/shared C)) B
    -> ty2perm PM (ty/ NN annot/shared C) PF
    -> cxt2perm CM PM B ((PF O) , Pi).

cxt2perm/U/borrow
  : cxt2perm CM PM BP Pi
    -> cxt`fresh BP N
    -> cxt`update BP N (cxtv/ O (ty/ NN annot/borrow C)) B
    -> ty2perm PM (ty/ NN annot/borrow C) PF
    -> cxt2perm CM PM B ((PF O) , Pi).

cxt2perm/U/null
  : cxt2perm CM PM BP Pi
    -> cxt`fresh BP N
    -> cxt`update BP N (cxtv/ O ty/null) B
    -> cxt2perm CM PM B (unitperm (nonlinear (objequal O null)) , Pi).


% TODO

methty2proctype* : clsmap -> predmap -> permission
  -> permission -> methty -> proctype -> type.

% TODO

%abbrev methty2proctype
  = [CM][PM][MT][PT] methty2proctype* CM PM empty empty MT PT.

consty2proctype*
  : clsmap -> predmap -> fldmap -> permission ->
  permission -> methty -> (object -> proctype) -> type.

% TODO

%abbrev consty2proctype
   = [CM][PM][FM][CT][PTF] consty2proctype* CM PM FM empty empty CT PTF.


methmap2progtype : clsmap -> predmap -> methmap -> progtype -> type.

env2progtype : clsmap -> methmap -> progtype -> type.

env2progtype/
  : env2progtype CM MM W
    <- clsmap2predmap CM PM
    <- methmap2progtype CM PM MM W.


%%% Theorems

% =========================================
% First, extra permission-related theorems
% =========================================


%theorem permission`eq-implies-equiv
  : forall* {Pi1} {Pi2}
    forall {EQ: permission`eq Pi1 Pi2}
    exists {EQV: equiv Pi1 Pi2}
    true.

- : permission`eq-implies-equiv permission`eq/ equiv/reflexive.

%worlds (objvar | fracvar) (permission`eq-implies-equiv _ _).
%total {} (permission`eq-implies-equiv _ _).


%theorem permission`combine-preserves-eq
  : forall* {Pi1} {Pi2} {Pi3} {Pi4}
    forall {EQ: permission`eq Pi1 Pi3}
    {EQ: permission`eq Pi2 Pi4}
    exists {EQ: permission`eq (Pi1 , Pi2) (Pi3 , Pi4)}
    true.

- : permission`combine-preserves-eq
    permission`eq/ permission`eq/ permission`eq/.

%worlds (objvar) (permission`combine-preserves-eq _ _ _).
%total {} (permission`combine-preserves-eq _ _ _).


%theorem permission`implies-respects-eq-left
  : forall* {P1} {P2} {P}
    forall {EQ: permission`eq P1 P2}
    {IMP: implies P1 P}
    exists {IMP: implies P2 P}
    true.

- : permission`implies-respects-eq-left permission`eq/ IMP IMP.

%worlds () (permission`implies-respects-eq-left _ _ _).
%total {} (permission`implies-respects-eq-left _ _ _).


%theorem permission`implies-respects-eq-right
  : forall* {P1} {P2} {P}
    forall {EQ: permission`eq P1 P2}
    {IMP: implies P P1}
    exists {IMP: implies P P2}
    true.

- : permission`implies-respects-eq-right permission`eq/ IMP IMP.

%worlds () (permission`implies-respects-eq-right _ _ _).
%total {} (permission`implies-respects-eq-right _ _ _).



% ================
% false-implies-XX
% ================

%theorem false-implies-set2facts
  : forall* {B} {O} {S} {G}
    forall {V:void}
    exists {S=>G: set2facts B O S G}
    true.

%worlds () (false-implies-set2facts _ _).
%total {} (false-implies-set2facts _ _).


%theorem false-implies-apply-efx
  : forall* {B} {X} {Pi} {Pi2}
    forall {V:void}
    exists {AP: apply-efx B X Pi Pi2}
    true.

%worlds () (false-implies-apply-efx _ _).
%total {} (false-implies-apply-efx _ _).

%theorem false-implies-inner-efxmap2perm
  : forall* {P} {O} {FM} {PM} {M} {Pi}
    forall {V:void}
    exists {M=>Pi: inner-efxmap2perm P O FM PM M Pi}
    true.

%worlds (fracvar) (false-implies-inner-efxmap2perm _ _).
%total {} (false-implies-inner-efxmap2perm _ _).


%theorem false-implies-efxmap2perm
  : forall* {CM} {PM} {B} {XM} {P} {Pi}
    forall  {V: void}
    exists  {XM=>Pi: efxmap2perm P CM PM B XM Pi}
    true.

%worlds (fracvar) (false-implies-efxmap2perm _ _).
%total {} (false-implies-efxmap2perm _ _).


% ================================
% totality (constructive) theorems
% ================================

%theorem cxt-class-set-implies-set2facts
  : forall* {O} {B} {S} {C}
    forall {B-S: cxt-class-set B C S}
    exists {G} {S=>G: set2facts B O S G}
    true.

- : cxt-class-set-implies-set2facts cxt-class-set/0 f set2facts/0.

- : cxt-class-set-implies-set2facts
    (cxt-class-set/U NM A L B-SP) _ (set2facts/U NM A L SP=>G)
    <- cxt-class-set-implies-set2facts B-SP _ SP=>G.

%worlds (objvar) (cxt-class-set-implies-set2facts _ _ _).
%total (S-B) (cxt-class-set-implies-set2facts S-B _ _).


%theorem apply-efx-total*
  : forall {P} {X} {Pi}
    exists {PF} {AP: apply-efx P X Pi PF}
    true.

- : apply-efx-total* _ efx/read _ _ apply-efx/read.

- : apply-efx-total* _ efx/write _ _ apply-efx/write.

- : apply-efx-total* true efx/consume Pi ([_] Pi) apply-efx/consume/true.

- : apply-efx-total* false efx/consume Pi ([_] empty) apply-efx/consume/false.

%worlds (fracvar | objvar) (apply-efx-total* _ _ _ _ _).
%total {} (apply-efx-total* _ _ _ _ _).

%abbrev apply-efx-total = apply-efx-total* _ _ _ _.


%theorem maybe-efx2perm-total*
  : forall {MX}
    exists {Pi} {MX=>Pi: maybe-efx2perm MX Pi}
    true.

- : maybe-efx2perm-total* maybe-efx/nothing _ maybe-efx2perm/nothing.

- : maybe-efx2perm-total* (maybe-efx/just _) _ (maybe-efx2perm/just AP)
    <- apply-efx-total AP.

%worlds (objvar) (maybe-efx2perm-total* _ _ _).
%total {} (maybe-efx2perm-total* _ _ _).

%abbrev maybe-efx2perm-total = maybe-efx2perm-total* _ _.


%{ fldmap2perm is NOT total - the field map has to be
consistent with the clsmap. }%

%theorem clsmap-fldmap-implies-fldmap2perm
  : forall* {CM} {PM} {FM} {O}
    forall {CM2PM: clsmap2predmap CM PM}
    {CM-FM: clsmap-fldmap CM FM}
    exists {Pi:permission} {FM=>Pi: fldmap2perm PM FM O Pi}
    true.

%theorem clsmap-fldmap-implies-fldmap2perm/L
  : forall* {CM} {PM} {FM} {O}
    forall {N} {SZ: fldmap`size FM N}
    {CM2PM: clsmap2predmap CM PM}
    {CM-FM: clsmap-fldmap CM FM}
    exists {Pi:permission} {FM=>Pi: fldmap2perm PM FM O Pi}
    true.

- : clsmap-fldmap-implies-fldmap2perm/L
    _ fldmap`size/0 _ clsmap-fldmap/0 _ fldmap2perm/0.

- : clsmap-fldmap-implies-fldmap2perm/L _ (fldmap`size/+ SZ)
    CM2PM (clsmap-fldmap/+ CM-FMP CM-T) _ (fldmap2perm/U FMS=>PS F U T2PF)
    <- fldmap`shift-total SH-FMP=FMS
    <- fldmap`shift-preserves-size SZ SH-FMP=FMS SZS
    <- shift-preserves-clsmap-fldmap CM-FMP SH-FMP=FMS CM-FMS
    <- fldmap`shift-implies-fresh SH-FMP=FMS F
    <- fldmap`shift-implies-update SH-FMP=FMS U
    <- clsmap-ty-implies-ty2perm CM2PM CM-T _ T2PF
    <- clsmap-fldmap-implies-fldmap2perm/L _ SZS CM2PM CM-FMS _ FMS=>PS.

- : clsmap-fldmap-implies-fldmap2perm CM2PM CM-FM P FM2P
    <- fldmap`size-total SZ
    <- clsmap-fldmap-implies-fldmap2perm/L _ SZ CM2PM CM-FM P FM2P.

%worlds (objvar) (clsmap-fldmap-implies-fldmap2perm/L _ _ _ _ _ _).
%total (N) (clsmap-fldmap-implies-fldmap2perm/L N _ _ _ _ _).

%worlds (objvar) (clsmap-fldmap-implies-fldmap2perm _ _ _ _).
%total {} (clsmap-fldmap-implies-fldmap2perm _ _ _ _).


%theorem clsmap-cxt-implies-cxt2perm
  : forall* {CM} {PM} {B}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CM-B: clsmap-cxt CM B}
    exists {Pi:permission} {B=>Pi: cxt2perm CM PM B Pi}
    true.

- : clsmap-cxt-implies-cxt2perm _ _ clsmap-cxt/nil _ cxt2perm/0.

- : clsmap-cxt-implies-cxt2perm CM-CM CM2PM
    (clsmap-cxt/cons F (U:cxt`update _ _ (cxtv/ _ (ty/ _ annot/unique _)) _)
      (clsmap-ty/notnull CM-L) CM-BP) _
    (cxt2perm/U/unique BP2PP F U CM-L FM2P NN2P PM-L)
    <- clsmap-cxt-implies-cxt2perm CM-CM CM2PM CM-BP _ BP2PP
    <- lookup-implies-clsmap-fldmap CM-CM CM-L CM-FM
    <- ({o} clsmap-fldmap-implies-fldmap2perm CM2PM CM-FM _ (FM2P o))
    <- nn2perm-total NN2P
    <- clsmap2predmap-implies-predmap-lookup CM2PM CM-L _ PM-L.

- : clsmap-cxt-implies-cxt2perm CM-CM CM2PM
    (clsmap-cxt/cons F (U:cxt`update _ _ (cxtv/ _ (ty/ _ annot/shared _)) _)
      CM-T CM-BP) _ (cxt2perm/U/shared BP2PP F U T2PF)
    <- clsmap-cxt-implies-cxt2perm CM-CM CM2PM CM-BP _ BP2PP
    <- clsmap-ty-implies-ty2perm CM2PM CM-T _ T2PF.

- : clsmap-cxt-implies-cxt2perm CM-CM CM2PM
    (clsmap-cxt/cons F (U:cxt`update _ _ (cxtv/ _ (ty/ _ annot/borrow _)) _)
      CM-T CM-BP) _ (cxt2perm/U/borrow BP2PP F U T2PF)
    <- clsmap-cxt-implies-cxt2perm CM-CM CM2PM CM-BP _ BP2PP
    <- clsmap-ty-implies-ty2perm CM2PM CM-T _ T2PF.

- : clsmap-cxt-implies-cxt2perm CM-CM CM2PM
    (clsmap-cxt/cons F (U:cxt`update _ _ (cxtv/ _ ty/null) _)
      _ CM-BP) _ (cxt2perm/U/null BP2PP F U)
    <- clsmap-cxt-implies-cxt2perm CM-CM CM2PM CM-BP _ BP2PP.

%worlds (objvar) (clsmap-cxt-implies-cxt2perm _ _ _ _ _).
%total (CM-B) (clsmap-cxt-implies-cxt2perm _ _ CM-B _ _).



%theorem domain-leq-implies-inner-efxmap2perm/L
  : forall* {CM} {PM} {C} {FM} {M} {P} {O} {FS} {MS}
    forall {N} {SZ: inner-efxmap`size M N}
    {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CM-L: clsmap`lookup CM C FM}
    {DM-FM: fldmap`domain FM FS}
    {DM-M: inner-efxmap`domain M MS}
    {LE: set`leq MS FS}
    exists {Pi} {M=>Pi: inner-efxmap2perm P O FM PM M Pi}
    true.

- : domain-leq-implies-inner-efxmap2perm/L
    z _ _ _ _ _ _ _ ([_] empty) inner-efxmap2perm/0.

- : domain-leq-implies-inner-efxmap2perm/L (s N) SZ
    CM-CM CM2PM CM->C=FM DM-FM=FS DM-M=MS MS<=FS _
    (inner-efxmap2perm/U N!<MP MP+F+X=M FM->F=T T=>PF X+PF=>Pi1 MP=>Pi2)
    <- inner-efxmap`lookup-implies-fresh-update
      (inner-efxmap`lookup/= nat`eq/) MP N!<MP MP+F+X=M
    <- lookup-implies-clsmap-fldmap CM-CM CM->C=FM CM-FM
    <- inner-efxmap`domain-preserves-lookup
      (inner-efxmap`lookup/= nat`eq/) DM-M=MS N-in-MS
    <- set`member-respects-leq N-in-MS MS<=FS N-in-FS
    <- fldmap`domain-preserves-lookup-converse N-in-FS DM-FM=FS T FM->F=T
    <- lookup-implies-clsmap-ty CM-FM FM->F=T CM-T
    <- clsmap-ty-implies-ty2perm CM2PM CM-T _ T=>PF
    <- apply-efx-total X+PF=>Pi1
    <- inner-efxmap`fresh-update-implies-leq N!<MP MP+F+X=M MP<=M
    <- inner-efxmap`domain-total DM-MP=MPS
    <- inner-efxmap`domain-preserves-leq* MP<=M DM-MP=MPS DM-M=MS MPS<=MS
    <- set`leq-transitive MPS<=MS MS<=FS MPS<=FS
    <- inner-efxmap`fresh-update-increases-size-converse SZ N!<MP MP+F+X=M SZP
    <- domain-leq-implies-inner-efxmap2perm/L N SZP
      CM-CM CM2PM CM->C=FM DM-FM=FS DM-MP=MPS MPS<=FS _ MP=>Pi2.

%worlds (fracvar | objvar)
(domain-leq-implies-inner-efxmap2perm/L _ _ _ _ _ _ _ _ _ _).
%total (N) (domain-leq-implies-inner-efxmap2perm/L N _ _ _ _ _ _ _ _ _).


%theorem domain-leq-implies-inner-efxmap2perm
  : forall* {CM} {PM} {C} {FM} {M} {P} {O} {FS} {MS}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CM-L: clsmap`lookup CM C FM}
    {DM-FM: fldmap`domain FM FS}
    {DM-M: inner-efxmap`domain M MS}
    {LE: set`leq MS FS}
    exists {Pi} {M=>Pi: inner-efxmap2perm P O FM PM M Pi}
    true.

- : domain-leq-implies-inner-efxmap2perm
    CM-CM CM2PM CM-L DM-FM DM-M LE _ M=>Pi
    <- inner-efxmap`size-total SZ
    <- domain-leq-implies-inner-efxmap2perm/L
      _ SZ CM-CM CM2PM CM-L DM-FM DM-M LE _ M=>Pi.

%worlds (fracvar | objvar) (domain-leq-implies-inner-efxmap2perm _ _ _ _ _ _ _ _).
%total {} (domain-leq-implies-inner-efxmap2perm _ _ _ _ _ _ _ _).


%theorem clsmap-cxt-efxmap-implies-efxmap2perm
  : forall* {P} {CM} {PM} {B} {XM}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM} {B-XM: clsmap-cxt-efxmap CM B XM}
    exists {Pi} {XM=>Pi: efxmap2perm P CM PM B XM Pi}
    true.

- : clsmap-cxt-efxmap-implies-efxmap2perm _ _ clsmap-cxt-efxmap/0 _ efxmap2perm/0.

- : clsmap-cxt-efxmap-implies-efxmap2perm CM-CM CM2PM
    (clsmap-cxt-efxmap/U F U BL L DM-FM DM-M LE B-XM)
    ([f] (Pi1 f) , Pi2 f) (efxmap2perm/U F U BL L M2P XM2P)
    <- domain-leq-implies-inner-efxmap2perm
      CM-CM CM2PM L DM-FM DM-M LE Pi1 M2P
    <- clsmap-cxt-efxmap-implies-efxmap2perm CM-CM CM2PM B-XM Pi2 XM2P.

%worlds (fracvar | objvar) (clsmap-cxt-efxmap-implies-efxmap2perm _ _ _ _ _).
%total (T) (clsmap-cxt-efxmap-implies-efxmap2perm _ _ T _ _).


%theorem clsmap-cxt-efxmap-implies-effects2input
  : forall* {CM} {PM} {B} {XM} {MX}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM} {B-XM: clsmap-cxt-efxmap CM B XM}
    exists {Pi} {XX=>Pi: effects2input CM PM B (effects/ XM MX) Pi}
    true.

- : clsmap-cxt-efxmap-implies-effects2input CM-CM CM2PM B-XM _
    (effects2input/ XM=>Pi1 MX=>Pi2)
    <- clsmap-cxt-efxmap-implies-efxmap2perm CM-CM CM2PM B-XM _ XM=>Pi1
    <- maybe-efx2perm-total MX=>Pi2.

%worlds () (clsmap-cxt-efxmap-implies-effects2input _ _ _ _ _).
%total {} (clsmap-cxt-efxmap-implies-effects2input _ _ _ _ _).


%% TODO: GM needs to be wf too!

%theorem clsmap-cxt-efxmap-implies-effects2output
  : forall* {B} {CM} {PM} {XM} {MX}
    forall {RT} {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {B-XM: clsmap-cxt-efxmap CM B XM}
    {WF-XM: efxmap`wf XM}
    {CM-RT: clsmap-cxt-reftype CM B RT}
    exists {Out}
    {XX=>Out: effects2output CM PM B RT (effects/ XM MX) ([f] Out f)}
    true.

- : clsmap-cxt-efxmap-implies-effects2output _
    CM-CM CM2PM B-XM _ (clsmap-cxt-reftype/shared L)
    _ (effects2output/shared XM=>Pi1 MX=>Pi2 T2PF)
    <- clsmap-cxt-efxmap-implies-efxmap2perm CM-CM CM2PM B-XM _ XM=>Pi1
    <- maybe-efx2perm-total MX=>Pi2
    <- clsmap-lookup-implies-ty2perm CM2PM L _ T2PF.

- : clsmap-cxt-efxmap-implies-effects2output
    (reftype/ _ _ (targets/unique S tgtmap/0 false))
    CM-CM CM2PM B-XM _ (clsmap-cxt-reftype/unique CM-L CM-B-GM B-C-S)
    _ (effects2output/unique/0f tgtmap`size/0 XM=>Pi1 ([r] S=>GF r)
        MX=>Pi2 T2PF)
    <- clsmap-cxt-efxmap-implies-efxmap2perm CM-CM CM2PM B-XM _ XM=>Pi1
    <- maybe-efx2perm-total MX=>Pi2
    <- clsmap-lookup-implies-ty2perm CM2PM CM-L _ T2PF
    <- ({r} cxt-class-set-implies-set2facts B-C-S _ (S=>GF r)).

- : clsmap-cxt-efxmap-implies-effects2output
    (reftype/ _ _ (targets/unique S tgtmap/0 true))
    CM-CM CM2PM B-XM _ (clsmap-cxt-reftype/unique CM-L CM-B-GM B-C-S)
    _ (effects2output/unique/0t tgtmap`size/0 XM=>Pi1 ([r] S=>GF r)
        MX=>Pi2 T2PF)
    <- clsmap-cxt-efxmap-implies-efxmap2perm CM-CM CM2PM B-XM _ XM=>Pi1
    <- maybe-efx2perm-total MX=>Pi2
    <- clsmap-lookup-implies-ty2perm CM2PM CM-L _ T2PF
    <- ({r} cxt-class-set-implies-set2facts B-C-S _ (S=>GF r)).


%worlds (objvar) (clsmap-cxt-efxmap-implies-effects2output _ _ _ _ _ _ _ _).
%trustme %total {} (clsmap-cxt-efxmap-implies-effects2output _ _ _ _ _ _ _ _).


% ===================
% uniqueness theorems
% ===================

%% set2facts is NOT unique, but results are "equivalent"

%theorem set2facts-equiv
  : forall* {B1} {B2} {O1} {O2} {S1} {S2} {G1} {G2}
    forall {S1=>G1: set2facts B1 O1 S1 G1}
    {S2=>G2: set2facts B2 O2 S2 G2}
    {E: cxt`eq B1 B2}
    {E: object`eq O1 O2}
    {E: set`eq S1 S2}
    exists {EQV: equiv (unitperm (nonlinear G1)) (unitperm (nonlinear G2))}
    true.

%worlds (objvar | fracvar) (set2facts-equiv _ _ _ _ _ _).
%trustme %total {} (set2facts-equiv _ _ _ _ _ _).


%theorem apply-efx-deterministic
  : forall* {P1} {P2} {X1} {X2} {Pi1} {Pi2} {PF1} {PF2}
    forall {AP1: apply-efx P1 X1 Pi1 PF1}
    {AP2: apply-efx P2 X2 Pi2 PF2}
    {E: bool`eq P1 P2}
    {E: efx`eq X1 X2}
    {E: permission`eq Pi1 Pi2}
    exists {E: {f} permission`eq (PF1 f) (PF2 f)}
    true.

- : apply-efx-deterministic AP1 AP2
    bool`eq/ efx`eq/ permission`eq/ ([_] permission`eq/).

%worlds () (apply-efx-deterministic _ _ _ _ _ _).
%total {} (apply-efx-deterministic _ _ _ _ _ _).

%abbrev apply-efx-unique = apply-efx-deterministic.


%theorem inner-efxmap2perm-equiv
  : forall* {P1} {P2} {O1} {O2} {FM1} {FM2}
    {PM1} {PM2} {M1} {M2} {Pi1} {Pi2}
    forall {M1=>Pi1: inner-efxmap2perm P1 O1 FM1 PM1 M1 Pi1}
    {M2=>Pi2: inner-efxmap2perm P2 O2 FM2 PM2 M2 Pi2}
    {E: bool`eq P1 P2}
    {E: object`eq O1 O2}
    {E: fldmap`eq FM1 FM2}
    {E: predmap`eq PM1 PM2}
    {E: inner-efxmap`eq M1 M2}
    exists {EQV: {f} equiv (Pi1 f) (Pi2 f)}
    true.

%worlds () (inner-efxmap2perm-equiv _ _ _ _ _ _ _ _).
%trustme %total {} (inner-efxmap2perm-equiv _ _ _ _ _ _ _ _).


%theorem efxmap2perm-equiv
  : forall* {P1} {P2} {CM1} {CM2} {PM1} {PM2} {B1} {B2}
    {XM1} {XM2} {Pi1} {Pi2}
    forall {XM1=>Pi1: efxmap2perm P1 CM1 PM1 B1 XM1 Pi1}
    {XM2=>Pi2: efxmap2perm P2 CM2 PM2 B2 XM2 Pi2}
    {E: bool`eq P1 P2} {E: clsmap`eq CM1 CM2}
    {E: predmap`eq PM1 PM2} {E: cxt`eq B1 B2} {E: efxmap`eq XM1 XM2}
    exists {EQV: {f} equiv (Pi1 f) (Pi2 f)}
    true.

%worlds (fracvar) (efxmap2perm-equiv _ _ _ _ _ _ _ _).
%trustme %total {} (efxmap2perm-equiv _ _ _ _ _ _ _ _).


% =======================
% XX-respects-eq theorems
% =======================

%theorem apply-efx-respects-eq
  : forall* {B1} {B2} {X1} {X2} {P1} {P2} {S1} {S2}
    forall {AP: apply-efx B1 X1 P1 S1}
    {E: bool`eq B1 B2} {E: efx`eq X1 X2}
    {E: permission`eq P1 P2} {E: ({f} permission`eq (S1 f) (S2 f))}
    exists {AP: apply-efx B2 X2 P2 S2}
    true.

- : apply-efx-respects-eq apply-efx/read bool`eq/
    efx`eq/ permission`eq/ ([_] permission`eq/) apply-efx/read.

- : apply-efx-respects-eq apply-efx/write bool`eq/
    efx`eq/ permission`eq/ ([_] permission`eq/) apply-efx/write.

- : apply-efx-respects-eq apply-efx/consume/false bool`eq/
    efx`eq/ permission`eq/ ([_] permission`eq/) apply-efx/consume/false.

- : apply-efx-respects-eq apply-efx/consume/true bool`eq/
    efx`eq/ permission`eq/ ([_] permission`eq/) apply-efx/consume/true.

%worlds () (apply-efx-respects-eq _ _ _ _ _ _).
%total {} (apply-efx-respects-eq _ _ _ _ _ _).


%theorem inner-efxmap2perm-respects-eq
  : forall* {P1} {P2} {O1} {O2} {FM1} {FM2}
    {PM1} {PM2} {M1} {M2} {Pi1} {Pi2}
    forall {M1=>Pi1: inner-efxmap2perm P1 O1 FM1 PM1 M1 Pi1}
    {E: bool`eq P1 P2} {O: object`eq O1 O2}
    {E: fldmap`eq FM1 FM2} {E: predmap`eq PM1 PM2}
    {E: inner-efxmap`eq M1 M2} {E: ({f} permission`eq (Pi1 f) (Pi2 f))}
    exists {M2=>Pi2: inner-efxmap2perm P2 O2 FM2 PM2 M2 Pi2}
    true.

- : inner-efxmap2perm-respects-eq M=>Pi bool`eq/ object`eq/ fldmap`eq/
    predmap`eq/ inner-efxmap`eq/ ([_] permission`eq/) M=>Pi.

%worlds (fracvar) (inner-efxmap2perm-respects-eq _ _ _ _ _ _ _ _).
%total {} (inner-efxmap2perm-respects-eq _ _ _ _ _ _ _ _).


%theorem efxmap2perm-respects-eq
  : forall* {CM1} {PM1} {B1} {XM1} {Pi1} {P1}
    {CM2} {PM2} {B2} {XM2} {Pi2} {P2}
    forall  {XM1=>Pi1: efxmap2perm P1 CM1 PM1 B1 XM1 Pi1}
    {E: bool`eq P1 P2} {E: clsmap`eq CM1 CM2} {E: predmap`eq PM1 PM2}
    {E: cxt`eq B1 B2} {E: efxmap`eq XM1 XM2}
    {E: {f} permission`eq (Pi1 f) (Pi2 f)}
    exists  {XM2=>Pi2: efxmap2perm P2 CM2 PM2 B2 XM2 Pi2}
    true.

- : efxmap2perm-respects-eq XM=>Pi bool`eq/ clsmap`eq/ predmap`eq/
    cxt`eq/ efxmap`eq/ ([_] permission`eq/) XM=>Pi.

%worlds (fracvar) (efxmap2perm-respects-eq _ _ _ _ _ _ _ _).
%total {} (efxmap2perm-respects-eq _ _ _ _ _ _ _ _).



% ==========================
% XX-fresh-update-implies-XX
% ==========================


%% fresh-update-implies-equiv-converse

%theorem inner-efxmap`fresh-update-implies-equiv-converse
  : forall* {M} {MP} {F} {X} {P} {O} {FM} {PM} {Pi1}
    forall {FS: inner-efxmap`fresh MP F}
    {U: inner-efxmap`update MP F X M}
    {M=>Pi1: inner-efxmap2perm P O FM PM M Pi1}
    exists {T} {Pi2} {Pi3} {FM-L: fldmap`lookup FM F T}
    {PF} {T2PF: ty2perm PM T PF}
    {AP: apply-efx P X (unitperm (precise-exists O F PF)) Pi2}
    {MP=>Pi3: inner-efxmap2perm P O FM PM MP Pi3}
    {EQV: ({f} equiv (Pi1 f) ((Pi2 f) , Pi3 f))}
    true.

- : inner-efxmap`fresh-update-implies-equiv-converse
    inner-efxmap`fresh/0 inner-efxmap`update/0 %{=>}%
    (inner-efxmap2perm/U
      inner-efxmap`fresh/0 inner-efxmap`update/0
      FM-L T2P AP inner-efxmap2perm/0)
    _ _ _ FM-L _ T2P AP inner-efxmap2perm/0 ([_] equiv/reflexive).

%theorem inner-efxmap`fresh-update-implies-equiv-converse/U
  : forall* {M} {MP} {MS} {F1} {F2} {X1} {X2} {FM} {T2}
    {PM} {PF2} {P} {O} {Pi1} {Pi2} {B}
    forall {FS1: inner-efxmap`fresh MP F1}
    {U1: inner-efxmap`update MP F1 X1 M}
    {FS2: inner-efxmap`fresh MS F2}
    {U2: inner-efxmap`update MS F2 X2 M}
    {FM-L2: fldmap`lookup FM F2 T2}
    {T2PF2: ty2perm PM T2 PF2}
    {AP2: apply-efx P X2 (unitperm (precise-exists O F2 PF2)) Pi1}
    {MS=>Pi2: inner-efxmap2perm P O FM PM MS Pi2}
    {E?: nat`eq? F1 F2 B}
    exists {T1} {FM-L1: fldmap`lookup FM F1 T1}
    {PF1} {T2PF1: ty2perm PM T1 PF1}
    {Pi3} {AP: apply-efx P X1 (unitperm (precise-exists O F1 PF1)) Pi3}
    {Pi4} {MP=>Pi4: inner-efxmap2perm P O FM PM MP Pi4}
    {EQV: ({f} equiv ((Pi1 f) , Pi2 f) ((Pi3 f) , Pi4 f))}
    true.

- : inner-efxmap`fresh-update-implies-equiv-converse/U
    F!<MP MP+F=M F!<MS MS+F=M FM->F T=>PF PF+X1=>P1 MS=>P2
    (nat`eq?/yes) %{=>}% _ FM->F _ T=>PF _ PF+X2=>P1 _ MP=>P2 ([_] equiv/reflexive)
    <- inner-efxmap`fresh-update-cancels F!<MS MS+F=M F!<MP MP+F=M
      nat`eq/ inner-efxmap`eq/ X2=X1 MS=MP
    <- apply-efx-respects-eq
      PF+X1=>P1 bool`eq/ X2=X1 permission`eq/ ([_] permission`eq/) PF+X2=>P1
    <- inner-efxmap2perm-respects-eq
      MS=>P2 bool`eq/ object`eq/ fldmap`eq/ predmap`eq/ MS=MP
      ([_] permission`eq/) MP=>P2.

- : inner-efxmap`fresh-update-implies-equiv-converse/U
     F1!<MP MP+F1=M F2!<MS MS+F2=M FM->F2 T2=>PF2 PF2=>P1 MS=>P2
    (nat`eq?/no F1!=F2) %{=>}% _ FM->F1 _ T1=>PF1 _ PF1=>P3
    _ (inner-efxmap2perm/U F2!<MK MK+F2=MP FM->F2 T2=>PF2 PF2=>P1 MK=>P5)
    ([f] equiv/transitive
      (equiv/combine
        equiv/reflexive (EQV f))
      (equiv/roll2))
    <- inner-efxmap`update-commutes-converse
      MP+F1=M MS+F2=M F1!=F2 MK MK+F2=MP MK+F1=MS
    <- inner-efxmap`update-preserves-fresh-converse F1!<MP MK+F2=MP F1!<MK
    <- inner-efxmap`update-preserves-fresh-converse F2!<MS MK+F1=MS F2!<MK
    <- inner-efxmap`fresh-update-implies-equiv-converse
      F1!<MK MK+F1=MS MS=>P2 _ _ _ FM->F1 _ T1=>PF1 PF1=>P3 MK=>P5 EQV.

- : inner-efxmap`fresh-update-implies-equiv-converse F1!<MP MP+F1=M
    (inner-efxmap2perm/U F2!<MS MS+F2=M T1 T2 T3 T4) _ _ _ Q1 _ Q2 Q3 Q4 EQV
    <- nat`eq?-total EQ?
    <- inner-efxmap`fresh-update-implies-equiv-converse/U
      F1!<MP MP+F1=M F2!<MS MS+F2=M T1 T2 T3 T4 EQ? _ Q1 _ Q2 _ Q3 _ Q4 EQV.

%worlds ()
(inner-efxmap`fresh-update-implies-equiv-converse
  _ _ _ _ _ _ _ _ _ _ _ _)
(inner-efxmap`fresh-update-implies-equiv-converse/U
  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total (T1 T2)
(inner-efxmap`fresh-update-implies-equiv-converse
  _ _ T1 _ _ _ _ _ _ _ _ _)
(inner-efxmap`fresh-update-implies-equiv-converse/U
  _ _ _ _ _ _ _ T2 _ _ _ _ _ _ _ _ _ _).


%theorem efxmap`fresh-update-implies-equiv-converse
  : forall* {CM} {PM} {B} {MP} {N} {D} {P} {M} {Pi3}
    forall {FS: efxmap`fresh MP N}
    {U: efxmap`update MP N D M}
    {M=>Pi3: efxmap2perm P CM PM B M Pi3}
    exists {Pi1} {Pi2}
    {O} {NN} {A} {C} {B-L: cxt`lookup B N (cxtv/ O (ty/ NN A C))}
    {FM} {CM-L: clsmap`lookup CM C FM}
    {D=>Pi1: inner-efxmap2perm P O FM PM D Pi1}
    {MP=>Pi2: efxmap2perm P CM PM B MP Pi2}
    {EQV: ({f} equiv (Pi3 f) ((Pi1 f) , (Pi2 f)))}
    true.

- : efxmap`fresh-update-implies-equiv-converse
    efxmap`fresh/0 efxmap`update/0 %{=>}%
    (efxmap2perm/U
      efxmap`fresh/0 efxmap`update/0
      B-L CM-L DT efxmap2perm/0)
    _ _ _ _ _ _ B-L _ CM-L DT efxmap2perm/0 ([_] equiv/reflexive).

%theorem efxmap`fresh-update-implies-equiv-converse/U
  : forall* {M} {MP} {MS} {N1} {N2} {D1} {D2} {B}
    {O2} {NN2} {A2} {C2} {CM} {FM2} {PM} {Pi1} {P} {Pi2} {IN?}
    forall {FS1: efxmap`fresh MP N1}
    {U1: efxmap`update MP N1 D1 M}
    {FS2: efxmap`fresh MS N2}
    {U2: efxmap`update MS N2 D2 M}
    {B-L2: cxt`lookup B N2 (cxtv/ O2 (ty/ NN2 A2 C2))}
    {CM-L2: clsmap`lookup CM C2 FM2}
    {D2=>Pi1: inner-efxmap2perm P O2 FM2 PM D2 Pi1}
    {MS=>Pi2: efxmap2perm P CM PM B MS Pi2}
    {E?: nat`eq? N1 N2 IN?}
    exists {O1} {NN1} {A1} {C1}
    {B-L1: cxt`lookup B N1 (cxtv/ O1 (ty/ NN1 A1 C1))}
    {FM1} {CM-L1: clsmap`lookup CM C1 FM1}
    {Pi3} {Pi4} {D1=>Pi3: inner-efxmap2perm P O1 FM1 PM D1 Pi3}
    {MP=>Pi4: efxmap2perm P CM PM B MP Pi4}
    {EQV: ({z} equiv ((Pi1 z) , Pi2 z) ((Pi3 z) , Pi4 z))}
    true.

- : efxmap`fresh-update-implies-equiv-converse/U
    N!<MP MP+N=M N!<MS MS+N=M B-L2 CM-L2 M2P2 XM2P2 nat`eq?/yes
    %{=>}% _ _ _ _ B-L2 _ CM-L2 _ _ M2P1 XM2P1 ([_] equiv/reflexive)
    <- efxmap`fresh-update-cancels
      N!<MS MS+N=M N!<MP MP+N=M nat`eq/ efxmap`eq/ D2=D1 MS=MP
    <- inner-efxmap2perm-respects-eq M2P2
      bool`eq/ object`eq/ fldmap`eq/ predmap`eq/
      D2=D1 ([_] permission`eq/) M2P1
    <- efxmap2perm-respects-eq XM2P2
      bool`eq/ clsmap`eq/ predmap`eq/
      cxt`eq/ MS=MP ([_] permission`eq/) XM2P1.

- : efxmap`fresh-update-implies-equiv-converse/U
    N1!<MP MP+N1=M N2!<MS MS+N2=M B->N2 CM->C2 D2=>P1 MS=>P2
    (nat`eq?/no N1!=N2) %{=>}% _ _ _ _ B->N1 _ CM->C1 _ _ D1=>P3
    (efxmap2perm/U N2!<MK MK+N2=MP B->N2 CM->C2 D2=>P1 MK=>P5)
    ([f] equiv/transitive
      (equiv/combine
        equiv/reflexive (EQV f))
      (equiv/roll2))
    <- efxmap`update-commutes-converse
      MP+N1=M MS+N2=M N1!=N2 MK MK+N2=MP MK+N1=MS
    <- efxmap`update-preserves-fresh-converse N1!<MP MK+N2=MP N1!<MK
    <- efxmap`update-preserves-fresh-converse N2!<MS MK+N1=MS N2!<MK
    <- efxmap`fresh-update-implies-equiv-converse
      N1!<MK MK+N1=MS MS=>P2 _ _ _ _ _ _ B->N1 _ CM->C1 D1=>P3 MK=>P5 EQV.

- : efxmap`fresh-update-implies-equiv-converse F1!<MP MP+F1=M
    (efxmap2perm/U F2!<MS MS+F2=M T1 T2 T3 T4) _ _ _ _ _ _ Q1 _ Q2 Q3 Q4 EQV
    <- nat`eq?-total EQ?
    <- efxmap`fresh-update-implies-equiv-converse/U
      F1!<MP MP+F1=M F2!<MS MS+F2=M T1 T2 T3 T4 EQ? _ _ _ _ Q1 _ Q2 _ _ Q3 Q4 EQV.

%worlds (fracvar)
(efxmap`fresh-update-implies-equiv-converse
  _ _ _ _ _  _ _ _ _ _ _ _ _ _ _)
(efxmap`fresh-update-implies-equiv-converse/U
  _ _ _ _ _ _ _ _ _ _ _ _  _ _ _ _ _ _ _ _ _).
%total (T1 T2)
(efxmap`fresh-update-implies-equiv-converse
  _ _ T1 _ _ _ _ _ _ _ _ _  _ _ _)
(efxmap`fresh-update-implies-equiv-converse/U
  _ _ _ _ _ _ _ T2 _ _ _ _ _ _ _ _ _  _ _ _ _).



% ============================================
% theorems about leq - basically:
%
% if XM1 is less or equal than XM2, and
% XM1 ==> Pi1, XM2 ==> Pi2.
% then exists Pi3, such that Pi2 <==> Pi1 , Pi3
%
% =============================================

%theorem can-split-permission
  : forall* {Q1} {Pi}
    forall {Q1<1: rat`lst Q1 one}
    exists {Q2} {ADD: rat`add Q1 Q2 one}
    {EQV: equiv Pi ((scale (fraction/ Q1) Pi) , (scale (fraction/ Q2) Pi))}
    true.

- : can-split-permission (Q1<1:rat`lst Q1 one) Q2 Q1+Q2=1
    (equiv/transitive
      (equiv/symmetric equiv/one)
      (equiv/symmetric (equiv/add Q1+Q2=1)))
    <- rat`grt-implies-add Q1<1 Q2 Q2+Q1=1
    <- rat`add-commutative Q2+Q1=1 Q1+Q2=1.

%worlds () (can-split-permission _ _ _ _).
%total {} (can-split-permission _ _ _ _).


%% This turns out to be unprovable: we have no information
%% about the fraction variable - it could even be greater than 1!

%theorem apply-efx-preserves-permission-leq
  : forall* {X1} {X2} {Pi} {Pi1} {Pi2}
    forall {X1<=X2: efx`leq X1 X2}
    {AP-X1: apply-efx true X1 Pi Pi1}
    {AP-X2: apply-efx true X2 Pi Pi2}
    exists {Pi3}
    {Pi2=>Pi1+Pi3: {f} equiv (Pi2 f) (Pi1 f , Pi3 f)}
    true.

%worlds (fracvar) (apply-efx-preserves-permission-leq _ _ _ _ _).
%trustme %total {} (apply-efx-preserves-permission-leq _ _ _ _ _).


%theorem inner-efxmap`leq-implies-permission-leq
  : forall* {CM} {PM} {FM} {C} {MP} {P} {O} {M} {P1} {MPS} {FS}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CM-L: clsmap`lookup CM C FM}
    {DM-FM=FS: fldmap`domain FM FS}
    {DM-M=MS: inner-efxmap`domain MP MPS}
    {LE: set`leq MPS FS}
    {M=>P1: inner-efxmap2perm P O FM PM M P1}
    {M<=MP: inner-efxmap`leq M MP}
    exists {P2} {P3} {MP=>P2: inner-efxmap2perm P O FM PM MP P2}
    {EQV: ({f} equiv (P2 f) ((P1 f) , (P3 f)))}
    true.

%theorem inner-efxmap`leq-implies-permission-leq/L
  : forall* {CM} {PM} {FM} {C} {M1} {M2} {Pi1} {P} {O} {MS2} {FS}
    forall {N} {SZ: inner-efxmap`size M2 N}
    {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CM-L: clsmap`lookup CM C FM}
    {DM-FM=FS: fldmap`domain FM FS}
    {DM-M2=MS2: inner-efxmap`domain M2 MS2}
    {LE: set`leq MS2 FS}
    {M=>P1: inner-efxmap2perm P O FM PM M1 Pi1}
    {M1<=M2: inner-efxmap`leq M1 M2}
    exists {Pi2} {Pi3} {M2=>Pi2: inner-efxmap2perm P O FM PM M2 Pi2}
    {EQV: ({f} equiv (Pi2 f) ((Pi1 f) , (Pi3 f)))}
    true.

%worlds (fracvar | objvar)
(inner-efxmap`leq-implies-permission-leq/L _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%trustme %total (N)
(inner-efxmap`leq-implies-permission-leq/L N _ _ _ _ _ _ _ _ _ _ _ _ _).

- : inner-efxmap`leq-implies-permission-leq A B C D E G K J _ _ H I
    <- inner-efxmap`size-total SZ
    <- inner-efxmap`leq-implies-permission-leq/L _ SZ A B C D E G K J _ _ H I.

%worlds (fracvar)
(inner-efxmap`leq-implies-permission-leq _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (inner-efxmap`leq-implies-permission-leq _ _ _ _ _ _ _ _ _ _ _ _).


%theorem efxmap`leq-implies-permission-leq/L
  : forall* {XM1} {XM2} {CM} {PM} {B} {P} {Pi1}
    forall {N} {SZ: efxmap`size XM2 N}
    {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {B-XM2: clsmap-cxt-efxmap CM B XM2}
    {XM1=>Pi1: efxmap2perm P CM PM B XM1 Pi1}
    {XM1<=XM2: efxmap`leq XM1 XM2}
    exists {Pi2} {Pi3} {XM2=>Pi2: efxmap2perm P CM PM B XM2 Pi2}
    {EQV: ({f} equiv (Pi2 f) ((Pi1 f) , Pi3 f))}
    true.

- : efxmap`leq-implies-permission-leq/L _ _
    CM-CM CM2PM B-XM2 efxmap2perm/0 efxmap`leq/0 _ _ XM=>Pi
    ([_] equiv/transitive
      (equiv/symmetric equiv/identity)
      (equiv/commute))
    <- clsmap-cxt-efxmap-implies-efxmap2perm CM-CM CM2PM B-XM2 _ XM=>Pi.

%theorem efxmap`leq-implies-permission-leq/U
  : forall* {CM} {PM} {FM} {XM1} {XM2} {XM2P} {FS}
    {P} {N} {M} {B} {O} {NN} {A} {C} {Pi1} {IN?} {MS}
    forall {K} {SZ: efxmap`size XM2 K}
    {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {F: efxmap`fresh XM2P N}
    {U: efxmap`update XM2P N M XM2}
    {B-L: cxt`lookup B N (cxtv/ O (ty/ NN A C))}
    {CM-L: clsmap`lookup CM C FM}
    {DM-FM=FS: fldmap`domain FM FS}
    {DM-M=MS: inner-efxmap`domain M MS}
    {LE: set`leq MS FS}
    {B-XM2P: clsmap-cxt-efxmap CM B XM2P}
    {XM1=>Pi1: efxmap2perm P CM PM B XM1 Pi1}
    {XM1<=XM2: efxmap`leq XM1 XM2}
    {IN?: efxmap`domain? XM1 N IN?}
    exists {Pi2} {Pi3} {XM2=>Pi2: efxmap2perm P CM PM B XM2 Pi2}
    {EQV: ({z} equiv (Pi2 z) ((Pi1 z) , (Pi3 z)))}
    true.

- : efxmap`leq-implies-permission-leq/U _ SZ-XM2
    CM-CM CM2PM N!<XM2P (XM2P+N+M=XM2:efxmap`update XM2P N M XM2)
    B-L CM-L DM-FM DM-M LE B-XM2P XM1=>Pi1 XM1<=XM2
    (efxmap`domain?/out N!<XM1) %{=>}% _ _
    (efxmap2perm/U N!<XM2P XM2P+N+M=XM2 B-L CM-L M=>P XM2P=>P)
    ([f] equiv/transitive
      (equiv/combine equiv/reflexive (EQV f))
      (equiv/roll2))
    <- efxmap`fresh-update2-preserves-leq-converse
      XM1<=XM2 N!<XM1 N!<XM2P XM2P+N+M=XM2 XM1<=XM2P
    <- efxmap`fresh-update-increases-size-converse
      SZ-XM2 N!<XM2P XM2P+N+M=XM2 SZ-XM2P
    <- efxmap`leq-implies-permission-leq/L _ SZ-XM2P
      CM-CM CM2PM B-XM2P XM1=>Pi1 XM1<=XM2P _ _ XM2P=>P EQV
    <- domain-leq-implies-inner-efxmap2perm
      CM-CM CM2PM CM-L DM-FM DM-M LE _ M=>P.

- : efxmap`leq-implies-permission-leq/U _ SZ-XM2
    CM-CM CM2PM N!<XM2P (XM2P+N+M=XM2:efxmap`update XM2P N M XM2)
    B-L CM-L DM-FM DM-M LE B-XM2P XM1=>Pi1 XM1<=XM2
    (efxmap`domain?/in XM1->N=M1) %{=>}% _ _
    (efxmap2perm/U N!<XM2P XM2P+N+M=XM2 B-L CM-L M=>P XM2P=>P2)
    ([f] equiv/transitive3
      (equiv/combine (EQV3 f) (EQV f))
      (equiv/transitive3
        (equiv/symmetric equiv/associate)
        (equiv/combine equiv/reflexive equiv/roll2)
        (equiv/associate))
      (equiv/combine (equiv/symmetric (EQV2 f)) equiv/reflexive))
    <- efxmap`lookup-implies-fresh-update
      XM1->N=M1 XM1P N!<XM1P (XM1P+N+M1=XM1:efxmap`update XM1P N M1 XM1)
    <- efxmap`fresh-update-preserves-leq-converse
      XM1<=XM2 N!<XM1P XM1P+N+M1=XM1 N!<XM2P XM2P+N+M=XM2 XM1P<=XM2P M1<=M
    <- efxmap`fresh-update-increases-size-converse
      SZ-XM2 N!<XM2P XM2P+N+M=XM2 SZ-XM2P
    <- efxmap`fresh-update-implies-equiv-converse
      N!<XM1P XM1P+N+M1=XM1 XM1=>Pi1
      _ _ _ _ _ _ B-L' _ CM-L' M1=>P' XM1P=>Pi1 EQV2
    <- cxt`lookup-unique B-L' B-L cxt`eq/ nat`eq/ CVE
    <- cxtv-eq-inversion CVE OE TE
    <- ty-eq-inversion TE _ _ CE
    <- clsmap`lookup-unique CM-L' CM-L clsmap`eq/ CE FME
    <- inner-efxmap2perm-respects-eq M1=>P' bool`eq/ OE FME
      predmap`eq/ inner-efxmap`eq/ ([_] permission`eq/) M1=>P
    <- efxmap`leq-implies-permission-leq/L _ SZ-XM2P
      CM-CM CM2PM B-XM2P XM1P=>Pi1 XM1P<=XM2P _ _ XM2P=>P2 EQV
    <- inner-efxmap`leq-implies-permission-leq
      CM-CM CM2PM CM-L DM-FM DM-M LE M1=>P M1<=M _ _ M=>P EQV3.

- : efxmap`leq-implies-permission-leq/L _ SZ-XM2 CM-CM CM2PM
    (clsmap-cxt-efxmap/U N!<XM2P (XM2P+N+M=XM2:efxmap`update XM2P N M XM2)
      B->N=C CM->C=FM DM-FM DM-M LE B-XM2P)
    XM1=>Pi1 XM1<=XM2 %{=>}% _ _ XM2=>Pi2 EQV
    <- efxmap`domain?-total IN?
    <- efxmap`leq-implies-permission-leq/U
      _ SZ-XM2 CM-CM CM2PM N!<XM2P XM2P+N+M=XM2 B->N=C CM->C=FM
      DM-FM DM-M LE B-XM2P XM1=>Pi1 XM1<=XM2 IN? _ _ XM2=>Pi2 EQV.

%worlds (fracvar)
(efxmap`leq-implies-permission-leq/L _ _ _ _ _ _ _ _ _ _ _)
(efxmap`leq-implies-permission-leq/U _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total (N1 N2)
(efxmap`leq-implies-permission-leq/U N2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
(efxmap`leq-implies-permission-leq/L N1 _ _ _ _ _ _ _ _ _ _).


% the major theorem

%theorem efxmap`leq-implies-permission-leq
  : forall* {CM} {PM} {B} {XM1} {XM2} {P} {Pi1}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {B-XM2: clsmap-cxt-efxmap CM B XM2}
    {XM1=>Pi1: efxmap2perm P CM PM B XM1 Pi1}
    {XM1<=XM2: efxmap`leq XM1 XM2}
    exists {Pi2} {Pi3} {XM2=>Pi2: efxmap2perm P CM PM B XM2 Pi2}
    {EQV: ({z} equiv (Pi2 z) ((Pi1 z) , (Pi3 z)))}
    true.

- : efxmap`leq-implies-permission-leq CM-CM CM2PM
    B-XM2 XM1=>Pi1 XM1<=XM2 Pi2 Pi3 XM2=>Pi2 EQV
    <- efxmap`size-total SZ
    <- leq-preserves-clsmap-cxt-efxmap B-XM2 XM1<=XM2 B-XM1
    <- efxmap`leq-implies-permission-leq/L _ SZ CM-CM CM2PM
      B-XM2 XM1=>Pi1 XM1<=XM2 _ _ XM2=>Pi2 EQV.

%worlds (fracvar) (efxmap`leq-implies-permission-leq _ _ _ _ _ _ _ _ _).
%total {} (efxmap`leq-implies-permission-leq _ _ _ _ _ _ _ _ _).


% conversed version of the major theorem

%theorem efxmap`leq-implies-permission-leq-converse
  : forall* {B} {P} {Pi2} {CM} {PM} {XM1} {XM2}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {B-XM2: clsmap-cxt-efxmap CM B XM2}
    {XM2=>Pi2: efxmap2perm P CM PM B XM2 Pi2}
    {XM1<=XM2: efxmap`leq XM1 XM2}
    exists {Pi1} {Pi3} {XM1=>Pi1: efxmap2perm P CM PM B XM1 Pi1}
    {EQV: ({f} equiv (Pi2 f) ((Pi1 f) , (Pi3 f)))}
    true.

- : efxmap`leq-implies-permission-leq-converse
    CM-CM CM2PM B-XM2 XM2=>Pi2 XM1<=XM2 Pi1 _ XM1=>Pi1
    ([f] equiv/transitive (equiv/symmetric (EQV2 f)) (EQV1 f))
    <- leq-preserves-clsmap-cxt-efxmap B-XM2 XM1<=XM2 B-XM1
    <- clsmap-cxt-efxmap-implies-efxmap2perm CM-CM CM2PM B-XM1 Pi1 XM1=>Pi1
    <- efxmap`leq-implies-permission-leq
      CM-CM CM2PM B-XM2 XM1=>Pi1 XM1<=XM2 Pi2 Pi3 XM2=>Pi2' EQV1
    <- efxmap2perm-equiv XM2=>Pi2' XM2=>Pi2
       bool`eq/ clsmap`eq/ predmap`eq/ cxt`eq/ efxmap`eq/ EQV2.

%worlds (fracvar)
(efxmap`leq-implies-permission-leq-converse _ _ _ _ _ _ _ _ _).
%total {} (efxmap`leq-implies-permission-leq-converse _ _ _ _ _ _ _ _ _).


%theorem maybe-efx-leq-implies-permission-leq
  : forall* {MX1} {MX2} {P1} {P2}
    forall {LE: maybe-efx`leq MX1 MX2}
    {MX1=>P1: maybe-efx2perm MX1 P1}
    {MX2=>P2: maybe-efx2perm MX2 P2}
    exists {P3}
    {EQV: {f} equiv (P2 f) (P1 f , P3 f)}
    true.

- : maybe-efx-leq-implies-permission-leq
    maybe-efx`leq/1 maybe-efx2perm/nothing maybe-efx2perm/nothing
    _ ([_] equiv/symmetric equiv/identity).

- : maybe-efx-leq-implies-permission-leq
    maybe-efx`leq/1 maybe-efx2perm/nothing
    (maybe-efx2perm/just AP-X) _
    ([_] (equiv/transitive
           (equiv/symmetric equiv/identity)
           (equiv/commute))).

- : maybe-efx-leq-implies-permission-leq
    (maybe-efx`leq/2 X1<=X2) (maybe-efx2perm/just AP-X1)
    (maybe-efx2perm/just AP-X2) _ EQV
    <- apply-efx-preserves-permission-leq X1<=X2 AP-X1 AP-X2 _ EQV.

%worlds () (maybe-efx-leq-implies-permission-leq _ _ _ _ _).
%total (L) (maybe-efx-leq-implies-permission-leq L _ _ _ _).


% =======================================
% deep-disjoint-join-implies-equiv:
%
% If we have two effect maps XM1 and XM2,
%   and if the following condition holds
%
% 1. XM1^XM2
% 2. XM1+XM2 = XM
% 3. XM1 ==> Pi1
% 4. XM2 ==> Pi2
% 5. XM  ==> Pi
%
% then we can derive:
%
% Pi1 , Pi2 <==> Pi
%
% =======================================

%theorem inner-efxmap`disjoint-join-implies-equiv
  : forall* {M1} {M2} {M} {P} {O} {FM} {PM} {Pi1} {Pi2}
    forall {DJ: inner-efxmap`disjoint M1 M2}
    {J: inner-efxmap`join M1 M2 M}
    {M1=>Pi1: inner-efxmap2perm P O FM PM M1 Pi1}
    {M2=>Pi2: inner-efxmap2perm P O FM PM M2 Pi2}
    exists {Pi} {M=>Pi: inner-efxmap2perm P O FM PM M Pi}
    {EQV: ({z} equiv ((Pi1 z) , (Pi2 z)) (Pi z))}
    true.

%theorem inner-efxmap`disjoint-join-implies-equiv/L
  : forall* {M1} {M2} {M} {P} {O} {FM} {PM} {Pi1} {Pi2}
    forall {N1} {SZ1: inner-efxmap`size M1 N1}
    {N2} {SZ2: inner-efxmap`size M2 N2}
    {DJ: inner-efxmap`disjoint M1 M2}
    {J: inner-efxmap`join M1 M2 M}
    {M1=>Pi1: inner-efxmap2perm P O FM PM M1 Pi1}
    {M2=>Pi2: inner-efxmap2perm P O FM PM M2 Pi2}
    exists {Pi} {M=>Pi: inner-efxmap2perm P O FM PM M Pi}
    {EQV: ({z} equiv ((Pi1 z) , (Pi2 z)) (Pi z))}
    true.

- : inner-efxmap`disjoint-join-implies-equiv
    M1^M2 M1UM2=M M1=>Pi1 M2=>Pi2 Pi M=>Pi EQV
    <- inner-efxmap`size-total SZ-M1
    <- inner-efxmap`size-total SZ-M2
    <- inner-efxmap`disjoint-join-implies-equiv/L
      _ SZ-M1 _ SZ-M2 M1^M2 M1UM2=M M1=>Pi1 M2=>Pi2 Pi M=>Pi EQV.

%worlds (fracvar)
(inner-efxmap`disjoint-join-implies-equiv/L _ _ _ _ _ _ _ _ _ _ _).
%trustme %total {N1 N2}
(inner-efxmap`disjoint-join-implies-equiv/L N1 _ N2 _ _ _ _ _ _ _ _).

%worlds (fracvar) (inner-efxmap`disjoint-join-implies-equiv _ _ _ _ _ _ _).
%total {} (inner-efxmap`disjoint-join-implies-equiv _ _ _ _ _ _ _).


%theorem efxmap`deep-disjoint-join-implies-equiv
  : forall* {XM1} {XM2} {XM} {P} {CM} {PM} {B} {Pi1} {Pi2}
    forall {DJ: efxmap`deep-disjoint XM1 XM2}
    {J: efxmap`join XM1 XM2 XM}
    {XM1=>Pi1: efxmap2perm P CM PM B XM1 Pi1}
    {XM2=>Pi2: efxmap2perm P CM PM B XM2 Pi2}
    exists {Pi} {XM=>Pi: efxmap2perm P CM PM B XM Pi}
    {EQV: ({z} equiv ((Pi1 z) , (Pi2 z)) (Pi z))}
    true.

%theorem efxmap`deep-disjoint-join-implies-equiv/L
  : forall* {XM1} {XM2} {XM} {P} {CM} {PM} {B} {Pi1} {Pi2}
    forall {N1} {SZ1: efxmap`size XM1 N1}
    {N2} {SZ2: efxmap`size XM2 N2}
    {DJ: efxmap`deep-disjoint XM1 XM2}
    {J: efxmap`join XM1 XM2 XM}
    {XM1=>Pi1: efxmap2perm P CM PM B XM1 Pi1}
    {XM2=>Pi2: efxmap2perm P CM PM B XM2 Pi2}
    exists {Pi} {XM=>Pi: efxmap2perm P CM PM B XM Pi}
    {EQV: ({z} equiv ((Pi1 z) , (Pi2 z)) (Pi z))}
    true.

- : efxmap`deep-disjoint-join-implies-equiv
    XM1^XM2 XM1UXM2=XM XM1=>Pi1 XM2=>Pi2 Pi XM=>Pi EQV
    <- efxmap`size-total SZ1
    <- efxmap`size-total SZ2
    <- efxmap`deep-disjoint-join-implies-equiv/L
      _ SZ1 _ SZ2 XM1^XM2 XM1UXM2=XM XM1=>Pi1 XM2=>Pi2 Pi XM=>Pi EQV.

%worlds (fracvar)
(efxmap`deep-disjoint-join-implies-equiv/L _ _ _ _ _ _ _ _ _ _ _).
%trustme %total {N1 N2}
(efxmap`deep-disjoint-join-implies-equiv/L N1 _ N2 _ _ _ _ _ _ _ _).

%worlds (fracvar) (efxmap`deep-disjoint-join-implies-equiv _ _ _ _ _ _ _).
%total {} (efxmap`deep-disjoint-join-implies-equiv _ _ _ _ _ _ _).


%theorem efxmap`deep-disjoint-join-implies-equiv*
  : forall* {XM1} {XM2} {XM} {P} {CM} {PM} {B} {Pi1} {Pi2} {Pi}
    forall {DJ: efxmap`deep-disjoint XM1 XM2}
    {J: efxmap`join XM1 XM2 XM}
    {XM1=>Pi1: efxmap2perm P CM PM B XM1 Pi1}
    {XM2=>Pi2: efxmap2perm P CM PM B XM2 Pi2}
    {XM=>Pi: efxmap2perm P CM PM B XM Pi}
    exists {EQV: ({z} equiv ((Pi1 z) , (Pi2 z)) (Pi z))}
    true.

- : efxmap`deep-disjoint-join-implies-equiv*
    XM1^XM2 XM1UXM2=XM XM1=>Pi1 XM2=>Pi2 XM=>Pi
    ([f] equiv/transitive (EQV1 f) (EQV2 f))
    <- efxmap`deep-disjoint-join-implies-equiv
    XM1^XM2 XM1UXM2=XM XM1=>Pi1 XM2=>Pi2 _ XM=>Pi' EQV1
    <- efxmap2perm-equiv XM=>Pi' XM=>Pi
      bool`eq/ clsmap`eq/ predmap`eq/ cxt`eq/ efxmap`eq/ EQV2.

%worlds (fracvar) (efxmap`deep-disjoint-join-implies-equiv* _ _ _ _ _ _).
%total {} (efxmap`deep-disjoint-join-implies-equiv* _ _ _ _ _ _).


%theorem efxmap`remove-tgtmap-implies-permission-combine
  : forall* {XM1} {XM2} {XM} {GM2} {P} {CM} {PM} {B} {Pi1} {Pi2} {Pi}
    forall {R: efxmap`remove-tgtmap XM GM2 XM1 XM2}
    {XM=>Pi: efxmap2perm P CM PM B XM Pi}
    {XM1=>Pi1: efxmap2perm P CM PM B XM1 Pi1}
    {XM2=>Pi2: efxmap2perm P CM PM B XM2 Pi2}
    exists {EQV: ({f} equiv (Pi f) ((Pi1 f) , (Pi2 f)))}
    true.

- : efxmap`remove-tgtmap-implies-permission-combine
    XM/GM2=XM1+XM2 XM=>Pi XM1=>Pi1 XM2=>Pi2
    ([f] equiv/symmetric (Pi1+Pi2<=>Pi f))
    <- efxmap`remove-tgtmap-implies-deep-disjoint XM/GM2=XM1+XM2 XM1^XM2
    <- efxmap`remove-tgtmap-implies-join XM/GM2=XM1+XM2 XM1+XM2=XM
    <- efxmap`deep-disjoint-join-implies-equiv*
      XM1^XM2 XM1+XM2=XM XM1=>Pi1 XM2=>Pi2 XM=>Pi Pi1+Pi2<=>Pi.

%worlds () (efxmap`remove-tgtmap-implies-permission-combine _ _ _ _ _).
%total {} (efxmap`remove-tgtmap-implies-permission-combine _ _ _ _ _).


%theorem efxmap`leq-partition
  : forall* {XM1} {XM} {S}
    forall {LEQ: efxmap`leq XM1 XM}
    {DM: efxmap`domain XM1 S}
    exists {XM2} {XM3} {DJ: efxmap`deep-disjoint XM2 XM3}
    {J: efxmap`join XM2 XM3 XM}
    {DM: efxmap`domain XM2 S}
    true.

%worlds () (efxmap`leq-partition _ _ _ _ _ _ _).
%trustme %total { } (efxmap`leq-partition _ _ _ _ _ _ _).



% ======================================
% no-consume
% if a efxmap is no-consume, then its
% converted input and output permissions
% are the same.
% ======================================

%theorem apply-efx-no-consume-same-permission
  : forall* {X} {Pi} {Pi2}
    forall {NC-X: efx`not-consume X}
    {AP: apply-efx true X Pi Pi2}
    exists {AP: apply-efx false X Pi Pi2}
    true.

- : apply-efx-no-consume-same-permission
    efx`not-consume/read apply-efx/read apply-efx/read.

- : apply-efx-no-consume-same-permission
    efx`not-consume/write apply-efx/write apply-efx/write.

%worlds () (apply-efx-no-consume-same-permission _ _ _).
%total {} (apply-efx-no-consume-same-permission _ _ _).


%theorem inner-efxmap`no-consume-same-permission
  : forall* {O} {FM} {PM} {M} {Pi}
    forall {NC-M: inner-efxmap`no-consume M}
    {M=>Pi: inner-efxmap2perm true O FM PM M Pi}
    exists {M=>Pi: inner-efxmap2perm false O FM PM M Pi}
    true.

- : inner-efxmap`no-consume-same-permission
    inner-efxmap`no-consume/0 inner-efxmap2perm/0 inner-efxmap2perm/0.

- : inner-efxmap`no-consume-same-permission NC-M
    (inner-efxmap2perm/U N!<MP MP+N+X=M FM->N=T T=>PF X=>PF MP=>P2)
    (inner-efxmap2perm/U N!<MP MP+N+X=M FM->N=T T=>PF X=>PF2 MP=>P2P)
    <- inner-efxmap`update-implies-lookup MP+N+X=M M->N=X
    <- inner-efxmap`lookup-implies-not-consume NC-M M->N=X NC-X
    <- inner-efxmap`fresh-update-preserves-no-consume-converse
      NC-M N!<MP MP+N+X=M NC-MP
    <- inner-efxmap`no-consume-same-permission NC-MP MP=>P2 MP=>P2P
    <- apply-efx-no-consume-same-permission NC-X X=>PF X=>PF2.

%worlds () (inner-efxmap`no-consume-same-permission _ _ _).
%total (T) (inner-efxmap`no-consume-same-permission _ T _).


%theorem efxmap`no-consume-same-permission
  : forall* {XM} {CM} {PM} {B} {Pi}
    forall {NC-XM: efxmap`no-consume XM}
    {XM=>Pi: efxmap2perm true CM PM B XM ([f] Pi f)}
    exists {XM=>Pi: efxmap2perm false CM PM B XM ([f] Pi f)}
    true.

- : efxmap`no-consume-same-permission
    efxmap`no-consume/0 efxmap2perm/0 efxmap2perm/0.

- : efxmap`no-consume-same-permission NC-XM
    (efxmap2perm/U N!<XMP XMP+N+M=XM B->N CM->C=FM T+M=>Pi1 T+XMP=>Pi2)
    (efxmap2perm/U N!<XMP XMP+N+M=XM B->N CM->C=FM F+M=>Pi1 F+XMP=>Pi2)
    <- efxmap`update-implies-lookup XMP+N+M=XM XM->N=M
    <- efxmap`lookup-implies-no-consume NC-XM XM->N=M NC-M
    <- inner-efxmap`no-consume-same-permission NC-M T+M=>Pi1 F+M=>Pi1
    <- efxmap`fresh-update-preserves-no-consume-converse
      NC-XM N!<XMP XMP+N+M=XM NC-XMP
    <- efxmap`no-consume-same-permission NC-XMP T+XMP=>Pi2 F+XMP=>Pi2.

%worlds () (efxmap`no-consume-same-permission _ _ _).
%total (T) (efxmap`no-consume-same-permission _ T _).
