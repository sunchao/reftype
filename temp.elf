

filter-non-consume : efxmap -> efxmap -> type.

filter-non-consume/0 : filter-non-consume efxmap/0 efxmap/0.


filter-non-consume/inner : inner-efxmap -> inner-efxmap -> type.

filter-non-consume/inner/0
  : filter-non-consume/inner inner-efxmap/0 inner-efxmap/0.
 
filter-non-consume/inner/consume
  : filter-non-consume/inner (inner-efxmap/+ F efx/consume M) MP
    <- inner-efxmap`shift F M MS
    <- filter-non-consume/inner MS MP.

filter-non-consume/inner/write
  : filter-non-consume/inner (inner-efxmap/+ F efx/write M) MP
    <- inner-efxmap`shift F M MS
    <- filter-non-consume/inner MS MSP
    <- inner-efxmap`update MSP F efx/write MP.

filter-non-consume/inner/read
  : filter-non-consume/inner (inner-efxmap/+ F efx/read M) MP
    <- inner-efxmap`shift F M MS
    <- filter-non-consume/inner MS MSP
    <- inner-efxmap`update MSP F efx/read MP.


filter-non-consume/+
  : filter-non-consume (efxmap/+ L M XM) XMO
    <- efxmap`shift L XM XM'
    <- filter-non-consume/inner M MO
    <- filter-non-consume XM' XMO'
    <- efxmap`update XMO' L MO XMO.


%theorem filter-non-consume/inner-implies-leq23 :
    forall* {M1} {M2} {M3} {M4}
    forall  {N1} {SZ1: inner-efxmap`size M1 N1}
            {N2} {SZ2: inner-efxmap`size M2 N2}
            {J: inner-efxmap`join M1 M2 M3}
            {F: filter-non-consume/inner M2 M4}
    exists  {M5} {F: filter-non-consume/inner M3 M5}
            {L: inner-efxmap`leq M4 M5}
    true.
