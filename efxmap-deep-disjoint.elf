%%% The definition of disjoint is not strong enough for
%%% us. We need to show that even if two map's domain
%%% have intersection, if the data involved in the intersection
%%% are disjoint, then the maps are still disjoint. We call
%%% this 'deep-disjoint'.

efxmap`deep-disjoint : efxmap -> efxmap -> type.

efxmap`deep-disjoint/L : efxmap`deep-disjoint efxmap/0 M.

efxmap`deep-disjoint/R : efxmap`deep-disjoint M efxmap/0.

efxmap`deep-disjoint/=
  : efxmap`deep-disjoint (efxmap/+ N1 D1 M1) (efxmap/+ N2 D2 M2)
    <- nat`eq N1 N2
    <- inner-efxmap`disjoint D1 D2
    <- efxmap`deep-disjoint M1 M2.

efxmap`deep-disjoint/< 
  : efxmap`deep-disjoint (efxmap/+ N1 D1 M1) (efxmap/+ N2 D2 M2)
    <- nat`plus (s N0) N1 N2
    <- efxmap`deep-disjoint M1 (efxmap/+ N0 D2 M2).

efxmap`deep-disjoint/>
  : efxmap`deep-disjoint (efxmap/+ N1 D1 M1) (efxmap/+ N2 D2 M2)
    <- nat`plus (s N3) N2 N1
    <- efxmap`deep-disjoint (efxmap/+ N3 D1 M1) M2.


efxmap`deep-disjoint? : efxmap -> efxmap -> bool -> type.

efxmap`deep-disjoint?/yes
  : efxmap`deep-disjoint M1 M2 ->
      efxmap`deep-disjoint? M1 M2 true.
				 
efxmap`deep-disjoint?/no
  : efxmap`lookup M1 N D1 ->
    efxmap`lookup M2 N D2 -> 
    inner-efxmap`disjoint? D1 D2 false -> 
      efxmap`deep-disjoint? M1 M2 false.




%%% Theorems 

  
%theorem efxmap`deep-disjoint?-total* :
 forall {M1} {M2}
 exists {B} {D:efxmap`deep-disjoint? M1 M2 B}
 true.

- : efxmap`deep-disjoint?-total* _ _ _ (efxmap`deep-disjoint?/yes efxmap`deep-disjoint/L).

- : efxmap`deep-disjoint?-total* _ _ _ (efxmap`deep-disjoint?/yes efxmap`deep-disjoint/R).

%theorem efxmap`deep-disjoint?-total*/+ :
 forall* {N1} {D1} {M1} {N2} {D2} {M2} {C}
 forall {S1} {S2} {SZ1:efxmap`size M1 S1} {SZ2:efxmap`size M2 S2} {CMP:nat`compare N1 N2 C}
 exists {B} {D:efxmap`deep-disjoint? (efxmap/+ N1 D1 M1) (efxmap/+ N2 D2 M2) B}
 true.

%theorem efxmap`deep-disjoint?-total*/= :
    forall* {N} {D1} {M1} {D2} {M2} {B1} {B2}
    forall  {D?: efxmap`deep-disjoint? M1 M2 B1}
            {ID?: inner-efxmap`disjoint? D1 D2 B2}
    exists  {B3} {D: efxmap`deep-disjoint? (efxmap/+ N D1 M1) (efxmap/+ N D2 M2) B3}
    true.

- : efxmap`deep-disjoint?-total*/= 
    (efxmap`deep-disjoint?/yes X) (inner-efxmap`disjoint?/yes IX)
    _ (efxmap`deep-disjoint?/yes
	(efxmap`deep-disjoint/= X IX nat`eq/)).

- : efxmap`deep-disjoint?-total*/= 
    _ (inner-efxmap`disjoint?/no L1 L2)
    _ (efxmap`deep-disjoint?/no (efxmap`lookup/= nat`eq/)
      (efxmap`lookup/= nat`eq/) (inner-efxmap`disjoint?/no L1 L2)).

- : efxmap`deep-disjoint?-total*/=
    (efxmap`deep-disjoint?/no L1 L2 IX) (inner-efxmap`disjoint?/yes _)
    _ (efxmap`deep-disjoint?/no
	(efxmap`lookup/> L1 P) (efxmap`lookup/> L2 P) IX)
    <- nat`plus-total P.
    
%worlds () (efxmap`deep-disjoint?-total*/= _ _ _ _).
%total  {} (efxmap`deep-disjoint?-total*/= _ _ _ _).


%theorem efxmap`deep-disjoint?-total*/< :
 forall* {N1} {D1} {M1} {N2} {D2} {M2} {N0} {B1}
 forall {P:plus (s N0) N1 N2}
               {D?1:efxmap`deep-disjoint? M1 (efxmap/+ N0 D2 M2) B1}
 exists {B} {D:efxmap`deep-disjoint? (efxmap/+ N1 D1 M1) (efxmap/+ N2 D2 M2) B}
 true.

%theorem efxmap`deep-disjoint?-total*/> :
 forall* {N1} {D1} {M1} {N2} {D2} {M2} {N3} {B1}
 forall {P:plus (s N3) N2 N1}
               {D?1:efxmap`deep-disjoint? (efxmap/+ N3 D1 M1) M2 B1}
 exists {B} {D:efxmap`deep-disjoint? (efxmap/+ N1 D1 M1) (efxmap/+ N2 D2 M2) B}
 true.

- : efxmap`deep-disjoint?-total* _ _ _ D?
    <- efxmap`size-total SZ1
    <- efxmap`size-total SZ2
    <- nat`compare-total CMP
    <- efxmap`deep-disjoint?-total*/+ _ _ SZ1 SZ2 CMP _ D?.

- : efxmap`deep-disjoint?-total*/+ _ _
    efxmap`size/0 _ nat`compare/= _ XX
    <- inner-efxmap`disjoint?-total IX
    <- efxmap`deep-disjoint?-total*/=
      (efxmap`deep-disjoint?/yes efxmap`deep-disjoint/L) IX _ XX.

- : efxmap`deep-disjoint?-total*/+ _ _
    _ efxmap`size/0 nat`compare/= _ XX
    <- inner-efxmap`disjoint?-total IX
    <- efxmap`deep-disjoint?-total*/=
      (efxmap`deep-disjoint?/yes efxmap`deep-disjoint/R) IX _ XX.

- : efxmap`deep-disjoint?-total*/+ _ _
    (efxmap`size/+ SZ1) (efxmap`size/+ SZ2) (nat`compare/=) _ XX
    <- nat`compare-total CMP
    <- inner-efxmap`disjoint?-total IX
    <- efxmap`deep-disjoint?-total*/+ _ _ SZ1 SZ2 CMP _ X
    <- efxmap`deep-disjoint?-total*/= X IX _ XX.

- : efxmap`deep-disjoint?-total*/+ _ _ _ _ (nat`compare/< N2>N1) _ D?
    <- gt-implies-plus N2>N1 _ N0+1+N1=N2
    <- efxmap`deep-disjoint?-total*/< N0+1+N1=N2
      (efxmap`deep-disjoint?/yes efxmap`deep-disjoint/L) _ D?.

- : efxmap`deep-disjoint?-total*/+ _ _ (efxmap`size/+ SZ1) SZ2 (nat`compare/< N2>N1) _ D?
    <- gt-implies-plus N2>N1 _ N0+1+N1=N2
    <- nat`compare-total CMP
    <- efxmap`deep-disjoint?-total*/+ _ _ SZ1 SZ2 CMP _ D?1
    <- efxmap`deep-disjoint?-total*/< N0+1+N1=N2 D?1 _ D?.

- : efxmap`deep-disjoint?-total*/< N0+1+N1=N2 
    (efxmap`deep-disjoint?/yes M1*M022) _
    (efxmap`deep-disjoint?/yes (efxmap`deep-disjoint/< M1*M022 N0+1+N1=N2)).

- : efxmap`deep-disjoint?-total*/< N0+1+N1=N2
    (efxmap`deep-disjoint?/no M1^N3=D1 M022^N3=D2 IX) _
    (efxmap`deep-disjoint?/no (efxmap`lookup/> M1^N3=D1 N3+1+N1=N4) M222^N4=D2 IX)
    <- plus-total N3+1+N1=N4
    <- plus-swap-succ N3+1+N1=N4 N3+N1+1=N4
    <- plus-commutative N3+N1+1=N4 N1+1+N3=N4
    <- plus-swap-succ N0+1+N1=N2 N0+N1+1=N2
    <- plus-commutative N0+N1+1=N2 N1+1+N0=N2
    <- efxmap`shift-preserves-lookup*
      M022^N3=D2 (efxmap`shift/+ N1+1+N0=N2) N1+1+N3=N4 M222^N4=D2.
      

%worlds () (efxmap`deep-disjoint?-total*/< _ _ _ _).
%total { } (efxmap`deep-disjoint?-total*/< _ _ _ _).


- : efxmap`deep-disjoint?-total*/+ _ _ _ _ (nat`compare/> N1>N2) _ D?
    <- gt-implies-plus N1>N2 _ N3+1+N2=N1
    <- efxmap`deep-disjoint?-total*/>
      N3+1+N2=N1 (efxmap`deep-disjoint?/yes efxmap`deep-disjoint/R) _ D?.

- : efxmap`deep-disjoint?-total*/+ _ _ SZ1
    (efxmap`size/+ SZ2) (nat`compare/> N1>N2) _ D?
    <- gt-implies-plus N1>N2 _ N3+1+N2=N1
    <- nat`compare-total CMP
    <- efxmap`deep-disjoint?-total*/+ _ _ SZ1 SZ2 CMP _ D?1
    <- efxmap`deep-disjoint?-total*/> N3+1+N2=N1 D?1 _ D?.

- : efxmap`deep-disjoint?-total*/> P
    (efxmap`deep-disjoint?/yes D) _
    (efxmap`deep-disjoint?/yes (efxmap`deep-disjoint/> D P)).

- : efxmap`deep-disjoint?-total*/> N3+1+N2=N1
    (efxmap`deep-disjoint?/no M311^N4=D1 M2^N4=D2 IX) _
    (efxmap`deep-disjoint?/no M111^N5=D1
      (efxmap`lookup/> M2^N4=D2 N4+1+N2=N5) IX)
    <- plus-total N4+1+N2=N5
    <- plus-swap-succ N4+1+N2=N5 N4+N2+1=N5
    <- plus-commutative N4+N2+1=N5 N2+1+N4=N5
    <- plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- plus-commutative N3+N2+1=N1 N2+1+N3=N1
    <- efxmap`shift-preserves-lookup* M311^N4=D1 (shift/+ N2+1+N3=N1) N2+1+N4=N5
                               M111^N5=D1.

%worlds () (efxmap`deep-disjoint?-total*/> _ _ _ _).
%total { } (efxmap`deep-disjoint?-total*/> _ _ _ _).

%worlds () (efxmap`deep-disjoint?-total*/+ _ _ _ _ _ _ _).
%total [S1 S2] (efxmap`deep-disjoint?-total*/+ S1 S2 _ _ _ _ _).

%worlds () (efxmap`deep-disjoint?-total* _ _ _ _).
%total { } (efxmap`deep-disjoint?-total* _ _ _ _).

%abbrev efxmap`deep-disjoint?-total = efxmap`deep-disjoint?-total* _ _ _.
  

%theorem efxmap`false-implies-deep-disjoint :
    forall* {XM1} {XM2}
    forall  {F:void}
    exists  {D: efxmap`deep-disjoint XM1 XM2}
    true.

%worlds () (efxmap`false-implies-deep-disjoint _ _).
%total  {} (efxmap`false-implies-deep-disjoint _ _).


%theorem efxmap`meta-reduce-deep-disjoint :
    forall* {M1} {M2} {M3} {M4}
    forall  {F:void}
            {D1: efxmap`deep-disjoint M1 M2}
            {D2: efxmap`deep-disjoint M3 M4}
    true.

%worlds () (efxmap`meta-reduce-deep-disjoint _ _ _).
%total  {} (efxmap`meta-reduce-deep-disjoint _ _ _).
%reduces X < Y (efxmap`meta-reduce-deep-disjoint _ X Y).


%theorem efxmap`deep-disjoint-respects-eq :
	forall* {M1} {M2} {M1P} {M2P}
	forall {A:efxmap`deep-disjoint M1 M2} 
         {E1:efxmap`eq M1 M1P} {E2:efxmap`eq M2 M2P} 
	exists {AP:efxmap`deep-disjoint M1P M2P}
	true.

- : efxmap`deep-disjoint-respects-eq A efxmap`eq/ efxmap`eq/ A.

%worlds () (efxmap`deep-disjoint-respects-eq _ _ _ _).
%total {} (efxmap`deep-disjoint-respects-eq _ _ _ _).
%reduces A = AP (efxmap`deep-disjoint-respects-eq A _ _ AP).


%theorem efxmap`disjoint-implies-deep-disjoint :
    forall* {M1} {M2}
    forall  {D: efxmap`disjoint M1 M2}
    exists  {D: efxmap`deep-disjoint M1 M2}
    true.

- : efxmap`disjoint-implies-deep-disjoint 
    efxmap`disjoint/L efxmap`deep-disjoint/L.

- : efxmap`disjoint-implies-deep-disjoint 
    efxmap`disjoint/R efxmap`deep-disjoint/R.

- : efxmap`disjoint-implies-deep-disjoint 
    (efxmap`disjoint/< D P) (efxmap`deep-disjoint/< DP P)
    <- efxmap`disjoint-implies-deep-disjoint D DP.

- : efxmap`disjoint-implies-deep-disjoint 
    (efxmap`disjoint/> D P) (efxmap`deep-disjoint/> DP P)
    <- efxmap`disjoint-implies-deep-disjoint D DP.

%worlds () (efxmap`disjoint-implies-deep-disjoint _ _).
%total (D) (efxmap`disjoint-implies-deep-disjoint D _).



%theorem efxmap`deep-disjoint-symmetric :
	forall* {M1} {M2}
	forall {D:efxmap`deep-disjoint M1 M2} 
	exists {D:efxmap`deep-disjoint M2 M1}
	true.

- : efxmap`deep-disjoint-symmetric efxmap`deep-disjoint/L efxmap`deep-disjoint/R.

- : efxmap`deep-disjoint-symmetric efxmap`deep-disjoint/R efxmap`deep-disjoint/L.

- : efxmap`deep-disjoint-symmetric
    (efxmap`deep-disjoint/< D P) (efxmap`deep-disjoint/> DP P)
    <- efxmap`deep-disjoint-symmetric D DP.

- : efxmap`deep-disjoint-symmetric
    (efxmap`deep-disjoint/> D P) (efxmap`deep-disjoint/< DP P)
    <- efxmap`deep-disjoint-symmetric D DP.

- : efxmap`deep-disjoint-symmetric
    (efxmap`deep-disjoint/= M1<>M2 D1<>D2 N1=N2) 
    (efxmap`deep-disjoint/= M2<>M1 D2<>D1 N2=N1)
    <- efxmap`deep-disjoint-symmetric M1<>M2 M2<>M1
    <- inner-efxmap`disjoint-symmetric D1<>D2 D2<>D1
    <- nat`eq-symmetric N1=N2 N2=N1.

%worlds () (efxmap`deep-disjoint-symmetric _ _).
%total (D) (efxmap`deep-disjoint-symmetric D _).



%theorem efxmap`deep-disjoint/=-inversion :
    forall* {XM1} {XM2} {M1} {M2} {L1} {L2}
    forall  {D: efxmap`deep-disjoint (efxmap/+ L1 M1 XM1) (efxmap/+ L2 M2 XM2)}
            {E: nat`eq L1 L2}
    exists  {D: inner-efxmap`disjoint M1 M2} {D: efxmap`deep-disjoint XM1 XM2}
    true.

- : efxmap`deep-disjoint/=-inversion 
    (efxmap`deep-disjoint/= XM1<>XM2 M1<>M2 nat`eq/) nat`eq/
    M1<>M2 XM1<>XM2.

- : efxmap`deep-disjoint/=-inversion
    (efxmap`deep-disjoint/< J SL0+L1=L2) L1=L2 M1<>M2 XM1<>XM2
    <- nat`plus-implies-gt SL0+L1=L2 nat`eq/ L2>L1
    <- nat`eq-ne-implies-false L1=L2 (nat`ne/< L2>L1) F
    <- inner-efxmap`false-implies-disjoint F M1<>M2
    <- efxmap`false-implies-deep-disjoint F XM1<>XM2
    <- efxmap`meta-reduce-deep-disjoint F XM1<>XM2 J.

- : efxmap`deep-disjoint/=-inversion
    (efxmap`deep-disjoint/> J SL0+L2=L1) L1=L2 M1<>M2 XM1<>XM2
    <- nat`plus-implies-gt SL0+L2=L1 nat`eq/ L1>L2
    <- nat`eq-ne-implies-false L1=L2 (nat`ne/> L1>L2) F
    <- inner-efxmap`false-implies-disjoint F M1<>M2
    <- efxmap`false-implies-deep-disjoint F XM1<>XM2
    <- efxmap`meta-reduce-deep-disjoint F XM1<>XM2 J.

%worlds () (efxmap`deep-disjoint/=-inversion _ _ _ _).
%total  {} (efxmap`deep-disjoint/=-inversion _ _ _ _).
%reduces AP < A (efxmap`deep-disjoint/=-inversion A _ _ AP).



%theorem efxmap`deep-disjoint/<-inversion :
	forall* {N1} {D1} {M1} {N2} {D2} {M2} {N0}
	forall {A:efxmap`deep-disjoint (efxmap/+ N1 D1 M1) (efxmap/+ N2 D2 M2)}
         {P:plus (s N0) N1 N2} 	       
	exists {AP:efxmap`deep-disjoint M1 (efxmap/+ N0 D2 M2)}
	true.

- : efxmap`deep-disjoint/<-inversion (efxmap`deep-disjoint/< A P) PP AP
    <- nat`plus-right-cancels P PP nat`eq/ nat`eq/ N0+1=N0P+1
    <- succ-cancels N0+1=N0P+1 N0=N0P
    <- efxmap`map/+-preserves-eq N0=N0P inner-efxmap`eq/ efxmap`eq/ M022=M022P
    <- efxmap`deep-disjoint-respects-eq A efxmap`eq/ M022=M022P AP.

- : efxmap`deep-disjoint/<-inversion
    (efxmap`deep-disjoint/> AP N3+1+N2=N1) N0+1+N1=N2 A
    <- nat`plus-implies-gt N3+1+N2=N1 nat`eq/ N1>N2
    <- nat`plus-implies-gt N0+1+N1=N2 nat`eq/ N2>N1
    <- nat`gt-anti-symmetric N1>N2 N2>N1 F
    <- efxmap`false-implies-eq F M311=M1
    <- efxmap`false-implies-eq F M2=M022
    <- efxmap`deep-disjoint-respects-eq AP M311=M1 M2=M022 A.

- : efxmap`deep-disjoint/<-inversion
    (efxmap`deep-disjoint/= XM1<>XM2 M1<>M2 L1=L2) SN0+L1=L2 J
    <- nat`plus-implies-gt SN0+L1=L2 nat`eq/ L2>L1
    <- nat`eq-ne-implies-false L1=L2 (nat`ne/< L2>L1) F
    <- efxmap`false-implies-deep-disjoint F J
    <- efxmap`meta-reduce-deep-disjoint F J XM1<>XM2.

%worlds () (efxmap`deep-disjoint/<-inversion _ _ _).
%total {}  (efxmap`deep-disjoint/<-inversion _ _ _).
%reduces AP < A (efxmap`deep-disjoint/<-inversion A _ AP).


%theorem efxmap`deep-disjoint/>-inversion :
	forall* {N1} {D1} {M1} {N2} {D2} {M2} {N3}
	forall {A:efxmap`deep-disjoint (efxmap/+ N1 D1 M1) (efxmap/+ N2 D2 M2)}
	       {P:plus (s N3) N2 N1}
	exists {AP:efxmap`deep-disjoint (efxmap/+ N3 D1 M1) M2}
	true.

- : efxmap`deep-disjoint/>-inversion (efxmap`deep-disjoint/> A P) PP AP
    <- nat`plus-right-cancels P PP nat`eq/ nat`eq/ N3+1=N3P+1
    <- succ-cancels N3+1=N3P+1 N3=N3P
    <- efxmap`map/+-preserves-eq N3=N3P inner-efxmap`eq/ efxmap`eq/ M311=M311P
    <- efxmap`deep-disjoint-respects-eq A M311=M311P efxmap`eq/ AP.

- : efxmap`deep-disjoint/>-inversion
    (efxmap`deep-disjoint/< AP N0+1+N1=N2) N3+1+N2=N1 A
    <- nat`plus-implies-gt N3+1+N2=N1 nat`eq/ N1>N2
    <- nat`plus-implies-gt N0+1+N1=N2 nat`eq/ N2>N1
    <- nat`gt-anti-symmetric N1>N2 N2>N1 F
    <- efxmap`false-implies-eq F M1=M311
    <- efxmap`false-implies-eq F M022=M2
    <- efxmap`deep-disjoint-respects-eq AP M1=M311 M022=M2 A.

- : efxmap`deep-disjoint/>-inversion
    (efxmap`deep-disjoint/= XM1<>XM2 M1<>M2 L1=L2) SN3+L2=L1 J
    <- nat`plus-implies-gt SN3+L2=L1 nat`eq/ L1>L2
    <- nat`eq-ne-implies-false L1=L2 (nat`ne/> L1>L2) F
    <- efxmap`false-implies-deep-disjoint F J
    <- efxmap`meta-reduce-deep-disjoint F J XM1<>XM2.

%worlds () (efxmap`deep-disjoint/>-inversion _ _ _).
%total { } (efxmap`deep-disjoint/>-inversion _ _ _).
%reduces AP < A (efxmap`deep-disjoint/>-inversion A _ AP).



%theorem efxmap`shift-left-preserves-deep-disjoint :
	forall* {N} {D} {M1} {M2} {SM1}
	forall {A:efxmap`deep-disjoint M1 M2} {S1:efxmap`shift N M1 SM1}
        exists {SA:efxmap`deep-disjoint SM1 (efxmap/+ N D M2)}
        true.

- : efxmap`shift-left-preserves-deep-disjoint
    _ efxmap`shift/0 efxmap`deep-disjoint/L.

- : efxmap`shift-left-preserves-deep-disjoint M111*M2 (efxmap`shift/+ N+1+N1=N1P)
    (efxmap`deep-disjoint/> M111*M2 N1+1+N=N1P)
    <- plus-swap-succ N+1+N1=N1P N+N1+1=N1P
    <- plus-commutative N+N1+1=N1P N1+1+N=N1P.

%worlds () (efxmap`shift-left-preserves-deep-disjoint _ _ _).
%total { } (efxmap`shift-left-preserves-deep-disjoint _ _ _).


%theorem efxmap`shift-left-preserves-deep-disjoint-converse :
	forall* {N} {D} {M1} {M2} {SM1}
	forall {SA:efxmap`deep-disjoint SM1 (efxmap/+ N D M2)} 
         {S1:efxmap`shift N M1 SM1}
  exists {A:efxmap`deep-disjoint M1 M2}
	true.

- : efxmap`shift-left-preserves-deep-disjoint-converse
    _ efxmap`shift/0 efxmap`deep-disjoint/L.

- : efxmap`shift-left-preserves-deep-disjoint-converse 
    M111*M222 (efxmap`shift/+ N2+1+N3=N1) M311*M2
    <- plus-swap-succ N2+1+N3=N1 N2+N3+1=N1
    <- plus-commutative N2+N3+1=N1 N3+1+N2=N1
    <- efxmap`deep-disjoint/>-inversion M111*M222 N3+1+N2=N1 M311*M2.

%worlds () (efxmap`shift-left-preserves-deep-disjoint-converse _ _ _).
%total { } (efxmap`shift-left-preserves-deep-disjoint-converse _ _ _).


%theorem efxmap`shift-right-preserves-deep-disjoint :
	forall* {N} {D} {M1} {M2} {SM2}
	forall {A:efxmap`deep-disjoint M1 M2} {S2:efxmap`shift N M2 SM2}
        exists {SA:efxmap`deep-disjoint (efxmap/+ N D M1) SM2}
	true.

- : efxmap`shift-right-preserves-deep-disjoint _ efxmap`shift/0 efxmap`deep-disjoint/R.

- : efxmap`shift-right-preserves-deep-disjoint M1*M222 (efxmap`shift/+ N+1+N2=N2P)
                               (efxmap`deep-disjoint/< M1*M222 N2+1+N=N2P)
    <- plus-swap-succ N+1+N2=N2P N+N2+1=N2P
    <- plus-commutative N+N2+1=N2P N2+1+N=N2P.

%worlds () (efxmap`shift-right-preserves-deep-disjoint _ _ _).
%total { } (efxmap`shift-right-preserves-deep-disjoint _ _ _).


%theorem efxmap`shift-right-preserves-deep-disjoint-converse :
	forall* {N} {D} {M1} {M2} {SM2}
	forall {SA:efxmap`deep-disjoint (efxmap/+ N D M1) SM2} {S2:efxmap`shift N M2 SM2}
        exists {A:efxmap`deep-disjoint M1 M2}
	true.

- : efxmap`shift-right-preserves-deep-disjoint-converse
    _ efxmap`shift/0 efxmap`deep-disjoint/R.

- : efxmap`shift-right-preserves-deep-disjoint-converse
    M111*M322 (efxmap`shift/+ N1+1+N2=N3) M1*M222
    <- plus-swap-succ N1+1+N2=N3 N1+N2+1=N3
    <- plus-commutative N1+N2+1=N3 N2+1+N1=N3
    <- efxmap`deep-disjoint/<-inversion M111*M322 N2+1+N1=N3 M1*M222.

%worlds () (efxmap`shift-right-preserves-deep-disjoint-converse _ _ _).
%total { } (efxmap`shift-right-preserves-deep-disjoint-converse _ _ _).



%theorem efxmap`shift-preserves-deep-disjoint :
    forall* {N} {M1} {M2} {SM1} {SM2}
	  forall {A:efxmap`deep-disjoint M1 M2} 
           {S1:efxmap`shift N M1 SM1} {S2:efxmap`shift N M2 SM2}
  	exists {SA:efxmap`deep-disjoint SM1 SM2}
	  true.

- : efxmap`shift-preserves-deep-disjoint 
    _ efxmap`shift/0 _ efxmap`deep-disjoint/L.

- : efxmap`shift-preserves-deep-disjoint 
    _ _ efxmap`shift/0 efxmap`deep-disjoint/R.

- : efxmap`shift-preserves-deep-disjoint
    (efxmap`deep-disjoint/< M1*M022 N0+1+N1=N2)
    (efxmap`shift/+ N+1+N1=N4) (efxmap`shift/+ N+1+N2=N5)
    (efxmap`deep-disjoint/< M1*M022 N0+1+N4=N5)
    <- plus-swap-succ N+1+N1=N4 N+N1+1=N4
    <- plus-commutative N+N1+1=N4 N1+1+N=N4
    <- plus-commutative N0+1+N1=N2 N1+N0+1=N2
    <- plus-associative-converse* N1+N0+1=N2 N+1+N2=N5 N+1+N1=N4 N4+N0+1=N5
    <- plus-commutative N4+N0+1=N5 N0+1+N4=N5.

- : efxmap`shift-preserves-deep-disjoint
    (efxmap`deep-disjoint/> M311*M2 N3+1+N2=N1)
    (efxmap`shift/+ N+1+N1=N4) (efxmap`shift/+ N+1+N2=N5)
    (efxmap`deep-disjoint/> M311*M2 N3+1+N5=N4)
    <- plus-swap-succ N+1+N2=N5 N+N2+1=N5
    <- plus-commutative N+N2+1=N5 N2+1+N=N5
    <- plus-commutative N3+1+N2=N1 N2+N3+1=N1
    <- plus-associative-converse* N2+N3+1=N1 N+1+N1=N4 N+1+N2=N5 N5+N3+1=N4
    <- plus-commutative N5+N3+1=N4 N3+1+N5=N4.

- : efxmap`shift-preserves-deep-disjoint 
    (efxmap`deep-disjoint/= M1<>M2 D1<>D2 nat`eq/)
    (efxmap`shift/+ P1) (efxmap`shift/+ P2)
    (efxmap`deep-disjoint/= M1<>M2 D1<>D2 N3=N4)
    <- nat`plus-deterministic P1 P2 nat`eq/ nat`eq/ N3=N4.

%worlds () (efxmap`shift-preserves-deep-disjoint _ _ _ _).
%total { } (efxmap`shift-preserves-deep-disjoint _ _ _ _).



%theorem efxmap`shift-preserves-deep-disjoint-converse :
	forall* {N} {M1} {M2} {SM1} {SM2}
	forall {SA:efxmap`deep-disjoint SM1 SM2}
         {S1:efxmap`shift N M1 SM1} {S2:efxmap`shift N M2 SM2} 
	exists {A:efxmap`deep-disjoint M1 M2}
	true.

- : efxmap`shift-preserves-deep-disjoint-converse
    _ efxmap`shift/0 _ efxmap`deep-disjoint/L.

- : efxmap`shift-preserves-deep-disjoint-converse
    _ _ efxmap`shift/0 efxmap`deep-disjoint/R.

- : efxmap`shift-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/< M1*M055 N0+1+N4=N5)
    (efxmap`shift/+ N+1+N1=N4) (efxmap`shift/+ N+1+N2=N5)
    (efxmap`deep-disjoint/< M1*M055 N0+1+N1=N2)
    <- plus-commutative N+1+N1=N4 N1+N+1=N4
    <- plus-swap-succ-converse N1+N+1=N4 N1+1+N=N4
    <- plus-associative-converse N1+N+1=N4 N0+1+N4=N5 N2P N0+1+N1=N2P N2P+N+1=N5
    <- plus-commutative N+1+N2=N5 N2+N+1=N5
    <- plus-right-cancels N2P+N+1=N5 N2+N+1=N5 nat`eq/ nat`eq/ N2P=N2
    <- plus-respects-eq N0+1+N1=N2P nat`eq/ nat`eq/ N2P=N2 N0+1+N1=N2.
                                  
- : efxmap`shift-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/> M611*M2 N6+1+N5=N4)
    (efxmap`shift/+ N+1+N1=N4) (efxmap`shift/+ N+1+N2=N5)
    (efxmap`deep-disjoint/> M611*M2 N6+1+N2=N1)
    <- plus-commutative N+1+N2=N5 N2+N+1=N5
    <- plus-swap-succ-converse N2+N+1=N5 N2+1+N=N5
    <- plus-associative-converse N2+N+1=N5 N6+1+N5=N4 N1P N6+1+N2=N1P N1P+N+1=N4
    <- plus-commutative N+1+N1=N4 N1+N+1=N4
    <- plus-right-cancels N1P+N+1=N4 N1+N+1=N4 nat`eq/ nat`eq/ N1P=N1
    <- plus-respects-eq N6+1+N2=N1P nat`eq/ nat`eq/ N1P=N1 N6+1+N2=N1.

- : efxmap`shift-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/= M1<>M2 D1<>D2 nat`eq/)
    (efxmap`shift/+ P1) (efxmap`shift/+ P2) 
    (efxmap`deep-disjoint/= M1<>M2 D1<>D2 EQ)
    <- nat`plus-left-cancels P1 P2 nat`eq/ nat`eq/ EQ.

%worlds () (efxmap`shift-preserves-deep-disjoint-converse _ _ _ _).
%total { } (efxmap`shift-preserves-deep-disjoint-converse _ _ _ _).


%theorem efxmap`join-preserves-deep-disjoint* :
	forall* {M1} {M2} {M3} {M4}
	forall {D1: efxmap`deep-disjoint M1 M4} {D2: efxmap`deep-disjoint M2 M4}
	       {A: efxmap`join M1 M2 M3}
	exists {D3:efxmap`deep-disjoint M3 M4}
	true.

% a lemma that counts the size of maps to help prove termination
%theorem efxmap`join-preserves-deep-disjoint*/L :
	forall* {M1} {M2} {M3} {M4}
	forall {S1} {S2} {SZ1:efxmap`size M1 S1} {SZ2:efxmap`size M2 S2}
         {D1:efxmap`deep-disjoint M1 M4} {D2:efxmap`deep-disjoint M2 M4}
	       {A:efxmap`join M1 M2 M3}
	exists {D3:efxmap`deep-disjoint M3 M4}
	true.

- : efxmap`join-preserves-deep-disjoint* D1 D2 J D3
    <- efxmap`size-total SZ1
    <- efxmap`size-total SZ2
    <- efxmap`join-preserves-deep-disjoint*/L _ _ SZ1 SZ2 D1 D2 J D3.

- : efxmap`join-preserves-deep-disjoint*/L
    _ _ _ _ efxmap`deep-disjoint/R _ _ efxmap`deep-disjoint/R.

- : efxmap`join-preserves-deep-disjoint*/L
    _ _ _ _ _ efxmap`deep-disjoint/R _ efxmap`deep-disjoint/R.

- : efxmap`join-preserves-deep-disjoint*/L _ _ _ _ _ D join/L D.

- : efxmap`join-preserves-deep-disjoint*/L _ _ _ _ D _ join/R D.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/< D1 N5+1+N1=N4) D2X 
    (efxmap`join/= J _ nat`eq/)
    (efxmap`deep-disjoint/< D3 N5+1+N1=N4)
    <- efxmap`deep-disjoint/<-inversion D2X N5+1+N1=N4 D2
    <- efxmap`join-preserves-deep-disjoint*/L S1 S2 SZ1 SZ2 D1 D2 J D3.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/< D1 N5+1+N1=N4) D2X
    (efxmap`join/> J N3+1+N2=N1)
    (efxmap`deep-disjoint/< D3 N6+1+N2=N4)
    <- plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- plus-associative-converse N3+N2+1=N1 N5+1+N1=N4 N6 N5+1+N3=N6 N6+N2+1=N4
    <- plus-swap-succ-converse N6+N2+1=N4 N6+1+N2=N4
    <- efxmap`deep-disjoint/<-inversion D2X N6+1+N2=N4 D2
    <- plus-swap-succ N5+1+N3=N6 N5+N3+1=N6
    <- plus-commutative N5+N3+1=N6 N3+1+N5=N6
    <- efxmap`shift-right-preserves-deep-disjoint
      D1 (efxmap`shift/+ N3+1+N5=N6) D1<<N3
    <- efxmap`join-preserves-deep-disjoint*/L
      (s S1) S2 (efxmap`size/+ SZ1) SZ2 D1<<N3 D2 J D3.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/> D1 N5+1+N4=N1) D2X 
    (efxmap`join/= J DJ nat`eq/)
    (efxmap`deep-disjoint/> D3 N5+1+N4=N1)
    <- efxmap`deep-disjoint/>-inversion D2X N5+1+N4=N1 D2
    <- efxmap`join-preserves-deep-disjoint*/L 
      _ _ (efxmap`size/+ SZ1) (efxmap`size/+ SZ2) 
      D1 D2 (efxmap`join/= J DJ nat`eq/) D3.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/> D1 N5+1+N4=N1) D2X
    (efxmap`join/< J N0+1+N1=N2)
    (efxmap`deep-disjoint/> D3 N5+1+N4=N1)
    <- plus-swap-succ N5+1+N4=N1 N5+N4+1=N1
    <- plus-associative-converse N5+N4+1=N1 N0+1+N1=N2 N6 N0+1+N5=N6 N6+N4+1=N2
    <- plus-swap-succ-converse N6+N4+1=N2 N6+1+N4=N2
    <- efxmap`deep-disjoint/>-inversion D2X N6+1+N4=N2 D2
    <- efxmap`join-preserves-deep-disjoint*/L
      _ _ (efxmap`size/+ SZ1) (efxmap`size/+ SZ2) 
      D1 D2 (efxmap`join/< J N0+1+N5=N6) D3.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    D1X (efxmap`deep-disjoint/< D2 N6+1+N2=N4) 
    (efxmap`join/< J N0+1+N1=N2)
    (efxmap`deep-disjoint/< D3 N5+1+N1=N4)
    <- plus-swap-succ N0+1+N1=N2 N0+N1+1=N2
    <- plus-associative-converse N0+N1+1=N2 N6+1+N2=N4 N5 N6+1+N0=N5 N5+N1+1=N4
    <- plus-swap-succ-converse N5+N1+1=N4 N5+1+N1=N4
    <- efxmap`deep-disjoint/<-inversion D1X N5+1+N1=N4 D1
    <- plus-swap-succ N6+1+N0=N5 N6+N0+1=N5
    <- plus-commutative N6+N0+1=N5 N0+1+N6=N5
    <- efxmap`shift-right-preserves-deep-disjoint 
      D2 (efxmap`shift/+ N0+1+N6=N5) D2<<N0
    <- efxmap`join-preserves-deep-disjoint*/L 
      S1 (s S2) SZ1 (efxmap`size/+ SZ2) D1 D2<<N0 J D3.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    D1X (efxmap`deep-disjoint/> D2 N6+1+N4=N2)
    (efxmap`join/> J N3+1+N2=N1)
    (efxmap`deep-disjoint/> D3 N6+1+N4=N2)
    <- plus-swap-succ N6+1+N4=N2 N6+N4+1=N2
    <- plus-associative-converse N6+N4+1=N2 N3+1+N2=N1 N5 N3+1+N6=N5 N5+N4+1=N1
    <- plus-swap-succ-converse N5+N4+1=N1 N5+1+N4=N1
    <- efxmap`deep-disjoint/>-inversion D1X N5+1+N4=N1 D1
    <- efxmap`join-preserves-deep-disjoint*/L
      _ _ (efxmap`size/+ SZ1) (efxmap`size/+ SZ2) 
      D1 D2 (efxmap`join/> J N3+1+N6=N5) D3.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/< D1 N5+1+N1=N4)
    (efxmap`deep-disjoint/> D2 N6+1+N4=N2) JX D3X
    <- plus-swap-succ N5+1+N1=N4 N5+N1+1=N4
    <- plus-associative-converse N5+N1+1=N4 N6+1+N4=N2 N0 N6+1+N5=N0 N0+N1+1=N2
    <- plus-swap-succ-converse N0+N1+1=N2 N0+1+N1=N2
    <- efxmap`join/<-inversion JX N0+1+N1=N2 _ J M=M113
    <- efxmap`eq-symmetric M=M113 M113=M
    <- efxmap`join-preserves-deep-disjoint*/L
      S1 (s S2) SZ1 (efxmap`size/+ SZ2)
      D1 (efxmap`deep-disjoint/> D2 N6+1+N5=N0) J D3
    <- efxmap`deep-disjoint-respects-eq
      (efxmap`deep-disjoint/< D3 N5+1+N1=N4) M113=M efxmap`eq/ D3X.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/> D1 N5+1+N4=N1)
    (efxmap`deep-disjoint/< D2 N6+1+N2=N4) JX D3X
    <- plus-swap-succ N6+1+N2=N4 N6+N2+1=N4
    <- plus-associative-converse N6+N2+1=N4 N5+1+N4=N1 N3 N5+1+N6=N3 N3+N2+1=N1
    <- plus-swap-succ-converse N3+N2+1=N1 N3+1+N2=N1
    <- efxmap`join/>-inversion JX N3+1+N2=N1 _ J M=M223
    <- efxmap`eq-symmetric M=M223 M223=M
    <- efxmap`join-preserves-deep-disjoint*/L _ _ (efxmap`size/+ SZ1) SZ2
      (efxmap`deep-disjoint/> D1 N5+1+N6=N3) D2 J D3
    <- efxmap`deep-disjoint-respects-eq
      (efxmap`deep-disjoint/< D3 N6+1+N2=N4) M223=M efxmap`eq/ D3X.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/= D1 X1 nat`eq/) (efxmap`deep-disjoint/= D2 X2 nat`eq/)
    (efxmap`join/= J MJ nat`eq/) (efxmap`deep-disjoint/= DD XX nat`eq/)
    <- efxmap`join-preserves-deep-disjoint*/L _ _ SZ1 SZ2 D1 D2 J DD
    <- inner-efxmap`join-preserves-disjoint* X1 X2 MJ XX.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/= D1 X nat`eq/) 
    (efxmap`deep-disjoint/> D2 P1) (efxmap`join/< J P2)
    (efxmap`deep-disjoint/= DDD X nat`eq/)
    <- nat`plus-right-cancels P1 P2 nat`eq/ nat`eq/ EQ
    <- nat`succ-cancels EQ EQP
    <- efxmap`map/+-preserves-eq EQP inner-efxmap`eq/ efxmap`eq/ MEQ
    <- efxmap`eq-symmetric MEQ MEQP
    <- efxmap`join-respects-eq J efxmap`eq/ MEQP efxmap`eq/ JP
    <- efxmap`join-preserves-deep-disjoint*/L
      _ _ SZ1 (efxmap`size/+ SZ2) D1 D2 JP DDD.
      
- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/= D1 X nat`eq/) 
    (efxmap`deep-disjoint/< D2 P1) (efxmap`join/> J P2) 
    (efxmap`deep-disjoint/< DDD P1)
    <- nat`plus-right-cancels P2 P1 nat`eq/ nat`eq/ EQ
    <- nat`succ-cancels EQ EQP
    <- efxmap`join-preserves-deep-disjoint*/L
      _ _ (efxmap`size/+ SZ1) SZ2 (efxmap`deep-disjoint/= D1 X EQP) D2 J DDD.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/> D1 P) (efxmap`deep-disjoint/= D2 X nat`eq/) 
    (efxmap`join/> J PP) (efxmap`deep-disjoint/= DD X nat`eq/)
    <- nat`plus-right-cancels PP P nat`eq/ nat`eq/ EQ
    <- nat`succ-cancels EQ EQP
    <- efxmap`map/+-preserves-eq EQP inner-efxmap`eq/ efxmap`eq/ MEQ
    <- efxmap`join-respects-eq J MEQ efxmap`eq/ efxmap`eq/ JP
    <- efxmap`join-preserves-deep-disjoint*/L
      _ _ (efxmap`size/+ SZ1) SZ2 D1 D2 JP DD.
      
- : efxmap`join-preserves-deep-disjoint*/L 
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/< D1 P1) (efxmap`deep-disjoint/= D2 X nat`eq/)
    (efxmap`join/< J P2)
    (efxmap`deep-disjoint/< DDD P1)
    <- nat`plus-right-cancels P2 P1 nat`eq/ nat`eq/ EQ
    <- nat`succ-cancels EQ EQP
    <- efxmap`join-preserves-deep-disjoint*/L
      _ _ SZ1 (efxmap`size/+ SZ2) D1 (efxmap`deep-disjoint/= D2 X EQP) J DDD.

%%% all the impossible cases

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/= D1 X1 nat`eq/) (efxmap`deep-disjoint/= D2 X2 nat`eq/)
    (efxmap`join/> J P) DD
    <- nat`plus-implies-gt P nat`eq/ GT
    <- nat`eq-ne-implies-false nat`eq/ (nat`ne/> GT) F
    <- efxmap`false-implies-deep-disjoint F DD.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/= D1 X1 nat`eq/) (efxmap`deep-disjoint/= D2 X2 nat`eq/)
    (efxmap`join/< J P) DD
    <- nat`plus-implies-gt P nat`eq/ GT
    <- nat`eq-ne-implies-false nat`eq/ (nat`ne/> GT) F
    <- efxmap`false-implies-deep-disjoint F DD.
 
- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/= _ _ nat`eq/) 
    (efxmap`deep-disjoint/< _ P) (efxmap`join/= _ _ nat`eq/) DD
    <- nat`plus-implies-gt P nat`eq/ GT
    <- nat`eq-ne-implies-false nat`eq/ (nat`ne/> GT) F
    <- efxmap`false-implies-deep-disjoint F DD.

- : efxmap`join-preserves-deep-disjoint*/L
    (s S1) (s S2) (efxmap`size/+ SZ1) (efxmap`size/+ SZ2)
    (efxmap`deep-disjoint/= _ _ nat`eq/) 
    (efxmap`deep-disjoint/> _ P) (efxmap`join/= _ _ nat`eq/) DD
    <- nat`plus-implies-gt P nat`eq/ GT
    <- nat`eq-ne-implies-false nat`eq/ (nat`ne/> GT) F
    <- efxmap`false-implies-deep-disjoint F DD.

%worlds () (efxmap`join-preserves-deep-disjoint*/L _ _ _ _ _ _ _ _).
%total {S1 S2 D1} (efxmap`join-preserves-deep-disjoint*/L S1 S2 _ _ D1 _ _ _).

%worlds () (efxmap`join-preserves-deep-disjoint* _ _ _ _).
%total { } (efxmap`join-preserves-deep-disjoint* _ _ _ _).


%abbrev join-left-preserves-deep-disjoint* = efxmap`join-preserves-deep-disjoint*.


%theorem join-right-preserves-deep-disjoint* :
	forall* {M1} {M2} {M3} {M0}
	forall {D1:efxmap`deep-disjoint M0 M1} 
         {D2:efxmap`deep-disjoint M0 M2}
	       {A:efxmap`join M1 M2 M3}
	exists {D3:efxmap`deep-disjoint M0 M3}
	true.

- : join-right-preserves-deep-disjoint* D1 D2 U D3
    <- efxmap`deep-disjoint-symmetric D1 D1s
    <- efxmap`deep-disjoint-symmetric D2 D2s
    <- join-left-preserves-deep-disjoint* D1s D2s U D3s
    <- efxmap`deep-disjoint-symmetric D3s D3.

%worlds () (join-right-preserves-deep-disjoint* _ _ _ _).
%total { } (join-right-preserves-deep-disjoint* _ _ _ _).


%theorem efxmap`join-preserves-deep-disjoint-converse:
	forall* {M1} {M2} {M3} {M4}
	forall {D3:efxmap`deep-disjoint M3 M4}
	       {A:efxmap`join M1 M2 M3}
	exists {D1:efxmap`deep-disjoint M1 M4} {D2:efxmap`deep-disjoint M2 M4}
	true.

- : efxmap`join-preserves-deep-disjoint-converse
    D efxmap`join/L efxmap`deep-disjoint/L D.

- : efxmap`join-preserves-deep-disjoint-converse
    D efxmap`join/R D efxmap`deep-disjoint/L.

- : efxmap`join-preserves-deep-disjoint-converse
    efxmap`deep-disjoint/R _
    efxmap`deep-disjoint/R efxmap`deep-disjoint/R.

- : efxmap`join-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/< D P)
    (efxmap`join/= J _ nat`eq/)
    (efxmap`deep-disjoint/< D1 P) (efxmap`deep-disjoint/< D2 P)
    <- efxmap`join-preserves-deep-disjoint-converse D J D1 D2.

- : efxmap`join-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/< D P1)
    (efxmap`join/< J P2)
    (efxmap`deep-disjoint/< D1 P1) D2S
    <- efxmap`join-preserves-deep-disjoint-converse D J D1 D2
    <- plus-swap-succ P1 P1s
    <- plus-commutative P1s P1sc
    <- plus-swap-succ P2 P2s
    <- plus-commutative P2s P2sc
    <- efxmap`shift-preserves-deep-disjoint 
      D2 (efxmap`shift/+ P2sc) (efxmap`shift/+ P1sc) D2S.

- : efxmap`join-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/< D P1)
    (efxmap`join/> J P2)
    D1S (efxmap`deep-disjoint/< D2 P1)
    <- efxmap`join-preserves-deep-disjoint-converse D J D1 D2
    <- plus-swap-succ P1 P1s
    <- plus-commutative P1s P1sc
    <- plus-swap-succ P2 P2s
    <- plus-commutative P2s P2sc
    <- efxmap`shift-preserves-deep-disjoint 
      D1 (efxmap`shift/+ P2sc) (efxmap`shift/+ P1sc) D1S.

- : efxmap`join-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/> D P1)
    (efxmap`join/= J DE nat`eq/)
    D1S D2S
    <- efxmap`join-preserves-deep-disjoint-converse
      D (efxmap`join/= J DE nat`eq/) D1 D2
    <- plus-swap-succ P1 P1s
    <- plus-commutative P1s P1sc
    <- efxmap`shift-left-preserves-deep-disjoint D1 (efxmap`shift/+ P1sc) D1S
    <- efxmap`shift-left-preserves-deep-disjoint D2 (efxmap`shift/+ P1sc) D2S.

- : efxmap`join-preserves-deep-disjoint-converse
	(efxmap`deep-disjoint/> D P1)
	(efxmap`join/< J P2)
        D1S D2S
    <- plus-swap-succ P1 P1s
    <- plus-associative-converse P1s P2 _ P3 P4s
    <- efxmap`join-preserves-deep-disjoint-converse D (efxmap`join/< J P3) D1 D2
    <- plus-commutative P1s P1sc
    <- plus-commutative P4s P4sc
    <- efxmap`shift-left-preserves-deep-disjoint D1 (efxmap`shift/+ P1sc) D1S
    <- efxmap`shift-left-preserves-deep-disjoint D2 (efxmap`shift/+ P4sc) D2S.

- : efxmap`join-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/> D P1)
    (efxmap`join/> J P2)
    D1S D2S
    <- plus-swap-succ P1 P1s
    <- plus-associative-converse P1s P2 _ P3 P4s
    <- efxmap`join-preserves-deep-disjoint-converse D (efxmap`join/> J P3) D1 D2
    <- plus-commutative P1s P1sc
    <- plus-commutative P4s P4sc
    <- efxmap`shift-left-preserves-deep-disjoint D1 (efxmap`shift/+ P4sc) D1S
    <- efxmap`shift-left-preserves-deep-disjoint D2 (efxmap`shift/+ P1sc) D2S.

- : efxmap`join-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/= D X nat`eq/) (efxmap`join/= J P nat`eq/) 
    (efxmap`deep-disjoint/= D1 X1 nat`eq/) (efxmap`deep-disjoint/= D2 X2 nat`eq/)
    <- efxmap`join-preserves-deep-disjoint-converse D J D1 D2
    <- inner-efxmap`join-preserves-disjoint-converse X P X1 X2.

- : efxmap`join-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/= D X nat`eq/) (efxmap`join/< J P) 
    (efxmap`deep-disjoint/= D1 X nat`eq/) (efxmap`deep-disjoint/> D2 P)
    <- efxmap`join-preserves-deep-disjoint-converse D J D1 D2.
    
- : efxmap`join-preserves-deep-disjoint-converse
    (efxmap`deep-disjoint/= D X nat`eq/) (efxmap`join/> J P) 
    (efxmap`deep-disjoint/> D1 P) (efxmap`deep-disjoint/= D2 X nat`eq/)
    <- efxmap`join-preserves-deep-disjoint-converse D J D1 D2.
    

%worlds () (efxmap`join-preserves-deep-disjoint-converse _ _ _ _).
%total (D) (efxmap`join-preserves-deep-disjoint-converse D _ _ _).



%% short of good name for this one

%theorem efxmap`shift-inside-right-preserves-deep-disjoint :
    forall* {M1} {M2} {D} {N} {SM2}
    forall  {D: efxmap`deep-disjoint M1 (efxmap/+ N D M2)}
            {S: efxmap`shift N M2 SM2}
    exists  {D: efxmap`deep-disjoint M1 SM2}
    true.

- : efxmap`shift-inside-right-preserves-deep-disjoint D SH DD
    <- efxmap`can-construct-unit-join SH J
    <- efxmap`deep-disjoint-symmetric D D1
    <- efxmap`join-preserves-deep-disjoint-converse D1 J DD1 DD2
    <- efxmap`deep-disjoint-symmetric DD1 DD.
    
%worlds () (efxmap`shift-inside-right-preserves-deep-disjoint _ _ _).
%total  (D) (efxmap`shift-inside-right-preserves-deep-disjoint D _ _).


%theorem efxmap`shift-inside-left-preserves-deep-disjoint :
    forall* {M1} {M2} {D} {N} {SM1}
    forall  {D: efxmap`deep-disjoint (efxmap/+ N D M1) M2}
            {S: efxmap`shift N M1 SM1}
    exists  {D: efxmap`deep-disjoint SM1 M2}
    true.

- : efxmap`shift-inside-left-preserves-deep-disjoint D SH DD
    <- efxmap`can-construct-unit-join SH J
    <- efxmap`join-preserves-deep-disjoint-converse D J DD _.

%worlds () (efxmap`shift-inside-left-preserves-deep-disjoint _ _ _).
%total  (D) (efxmap`shift-inside-left-preserves-deep-disjoint D _ _).
    

%theorem efxmap`shift-inside-preserves-deep-disjoint :
    forall* {M1} {M2} {D1} {D2} {N1} {N2} {SM1} {SM2}
    forall  {D: efxmap`deep-disjoint
                (efxmap/+ N1 D1 M1) (efxmap/+ N2 D2 M2)}
            {S: efxmap`shift N1 M1 SM1} {S: efxmap`shift N2 M2 SM2}
    exists  {D: efxmap`deep-disjoint SM1 SM2}
    true.

- : efxmap`shift-inside-preserves-deep-disjoint
    D efxmap`shift/0 _ efxmap`deep-disjoint/L.

- : efxmap`shift-inside-preserves-deep-disjoint
    D _ efxmap`shift/0 efxmap`deep-disjoint/R.

- : efxmap`shift-inside-preserves-deep-disjoint
    (efxmap`deep-disjoint/= M1<>M2 D1<>D2 nat`eq/)
    (efxmap`shift/+ P1) (efxmap`shift/+ P2) M3<>M4
    <- efxmap`shift-preserves-deep-disjoint 
      M1<>M2 (efxmap`shift/+ P1) (efxmap`shift/+ P2) M3<>M4.

- : efxmap`shift-inside-preserves-deep-disjoint
    (efxmap`deep-disjoint/< A P) (efxmap`shift/+ P1) (efxmap`shift/+ P2) DD
    <- nat`plus-swap-succ P PS
    <- nat`plus-commutative PS PP
    <- efxmap`shift-preserves-deep-disjoint
      A (efxmap`shift/+ P1) (efxmap`shift/+ PP) DPPP
    <- efxmap`shift-inside-right-preserves-deep-disjoint
      DPPP (efxmap`shift/+ P2) DD.

- : efxmap`shift-inside-preserves-deep-disjoint
    (efxmap`deep-disjoint/> D P) (efxmap`shift/+ P1) (efxmap`shift/+ P2) DD
    <- nat`plus-swap-succ P PS
    <- nat`plus-commutative PS PP
    <- efxmap`shift-preserves-deep-disjoint 
      D (efxmap`shift/+ PP) (efxmap`shift/+ P2) DPPP
    <- efxmap`shift-inside-left-preserves-deep-disjoint
      DPPP (efxmap`shift/+ P1) DD.

%worlds () (efxmap`shift-inside-preserves-deep-disjoint _ _ _ _).
%total  {} (efxmap`shift-inside-preserves-deep-disjoint _ _ _ _).


%%% shouldn't need this lemma!

%theorem efxmap`update-disjoint-implies-disjoint/L :
    forall* {N} {D1} {D2} {M} {MP}
    forall  {U: efxmap`update M N D2 MP}
            {D: inner-efxmap`disjoint D1 D2}
    exists  {D: efxmap`deep-disjoint (efxmap/+ N D1 efxmap/0) MP}
    true.

- : efxmap`update-disjoint-implies-disjoint/L
    efxmap`update/0 X
    (efxmap`deep-disjoint/= efxmap`deep-disjoint/L X nat`eq/).

- : efxmap`update-disjoint-implies-disjoint/L
    (efxmap`update/> U P) X (efxmap`deep-disjoint/> DD P)
    <- efxmap`update-disjoint-implies-disjoint/L U X DD.

- : efxmap`update-disjoint-implies-disjoint/L 
    (efxmap`update/< P) X 
    (efxmap`deep-disjoint/= efxmap`deep-disjoint/L X nat`eq/).

- : efxmap`update-disjoint-implies-disjoint/L
    (efxmap`update/= nat`eq/) X
    (efxmap`deep-disjoint/= efxmap`deep-disjoint/L X nat`eq/).

%worlds () (efxmap`update-disjoint-implies-disjoint/L _ _ _).
%total  (U) (efxmap`update-disjoint-implies-disjoint/L U _ _).


%theorem efxmap`update-disjoint-implies-disjoint :
    forall* {XM1} {XM2} {M1} {M2} {L} {XM1S} {XM2S}
    forall  {D: efxmap`deep-disjoint XM1 XM2}
            {U: efxmap`update XM1 L M1 XM1S}
            {U: efxmap`update XM2 L M2 XM2S}
            {D: inner-efxmap`disjoint M1 M2}
    exists  {D: efxmap`deep-disjoint XM1S XM2S}
    true.

- : efxmap`update-disjoint-implies-disjoint 
    _ efxmap`update/0 efxmap`update/0 X
    (efxmap`deep-disjoint/= efxmap`deep-disjoint/L X nat`eq/).

- : efxmap`update-disjoint-implies-disjoint
    _ efxmap`update/0 (efxmap`update/= nat`eq/)
    M1<>M2 (efxmap`deep-disjoint/= efxmap`deep-disjoint/L M1<>M2 nat`eq/).

- : efxmap`update-disjoint-implies-disjoint
    _ (efxmap`update/= nat`eq/) efxmap`update/0 X
    (efxmap`deep-disjoint/= efxmap`deep-disjoint/R X nat`eq/).

- : efxmap`update-disjoint-implies-disjoint
    efxmap`deep-disjoint/L efxmap`update/0 (efxmap`update/> U P) X 
    (efxmap`deep-disjoint/> DD P)
    <- efxmap`update-disjoint-implies-disjoint/L U X DD.
      
- : efxmap`update-disjoint-implies-disjoint
    efxmap`deep-disjoint/R (efxmap`update/> U P) efxmap`update/0 X 
    (efxmap`deep-disjoint/< DD P)
    <- inner-efxmap`disjoint-symmetric X XP
    <- efxmap`update-disjoint-implies-disjoint/L U XP DP
    <- efxmap`deep-disjoint-symmetric DP DD.

- : efxmap`update-disjoint-implies-disjoint
    _ (efxmap`update/< P) efxmap`update/0 X 
    (efxmap`deep-disjoint/= efxmap`deep-disjoint/R X nat`eq/).
      
- : efxmap`update-disjoint-implies-disjoint
    XM1<>XM2 (efxmap`update/= nat`eq/) (efxmap`update/= nat`eq/)
    IM1<>IM2 (efxmap`deep-disjoint/= XM1S<>XM2S IM1<>IM2 nat`eq/)
    <- efxmap`deep-disjoint/=-inversion XM1<>XM2 nat`eq/ _ XM1S<>XM2S.

- : efxmap`update-disjoint-implies-disjoint
    D (efxmap`update/< P) (efxmap`update/= nat`eq/) M1<>M2
    (efxmap`deep-disjoint/= DP M1<>M2 nat`eq/)
    <- efxmap`deep-disjoint/>-inversion D P DP.

- : efxmap`update-disjoint-implies-disjoint
    D (efxmap`update/= nat`eq/) (efxmap`update/< P) M1<>M2
    (efxmap`deep-disjoint/= DP M1<>M2 nat`eq/)
    <- efxmap`deep-disjoint/<-inversion D P DP.


- : efxmap`update-disjoint-implies-disjoint
    D (efxmap`update/> U P) (efxmap`update/= nat`eq/) M1<>M2 
    (efxmap`deep-disjoint/< DD P)
    <- efxmap`deep-disjoint/<-inversion D P DP
    <- efxmap`update-disjoint-implies-disjoint 
      DP U (efxmap`update/= nat`eq/) M1<>M2 DD.

- : efxmap`update-disjoint-implies-disjoint D
    (efxmap`update/= nat`eq/) (efxmap`update/> U P) X 
    (efxmap`deep-disjoint/> DD P)
    <- efxmap`deep-disjoint/>-inversion D P D1
    <- efxmap`update-disjoint-implies-disjoint
      D1 (efxmap`update/= nat`eq/) U X DD.
         
- : efxmap`update-disjoint-implies-disjoint
    D (efxmap`update/> U P) (efxmap`update/< P1) M1<>M2
    (efxmap`deep-disjoint/< DPP P)
    <- nat`plus-associative-converse P P1 N6 SN4+SN5=N6 N6+N1=N2
    <- nat`plus-left-preserves-positive SN4+SN5=N6 nat`eq/ _ EQ
    <- nat`plus-respects-eq SN4+SN5=N6 nat`eq/ nat`eq/ EQ (nat`plus/s N4+SN5=N6)
    <- nat`plus-right-preserves-positive N4+SN5=N6 nat`eq/ _ EQ2
    <- nat`plus-respects-eq N6+N1=N2 EQ nat`eq/ nat`eq/ SN8+N1=N2
    <- efxmap`deep-disjoint/<-inversion D SN8+N1=N2 DP
    <- nat`plus-swap-succ-converse N4+SN5=N6 SN4+N5=N6
    <- efxmap`update-disjoint-implies-disjoint 
      DP U (efxmap`update/< SN4+N5=N6) M1<>M2 DPP.

- : efxmap`update-disjoint-implies-disjoint
    D (efxmap`update/< P1) (efxmap`update/> U P) M1<>M2 
    (efxmap`deep-disjoint/> DPP P)
    <- nat`plus-associative-converse P P1 N6 SN4+SN5=N6 N6+N1=N2
    <- nat`plus-left-preserves-positive SN4+SN5=N6 nat`eq/ _ EQ
    <- nat`plus-respects-eq SN4+SN5=N6 nat`eq/ nat`eq/ EQ (nat`plus/s N4+SN5=N6)
    <- nat`plus-right-preserves-positive N4+SN5=N6 nat`eq/ _ EQ2
    <- nat`plus-respects-eq N6+N1=N2 EQ nat`eq/ nat`eq/ SN8+N1=N2
    <- efxmap`deep-disjoint/>-inversion D SN8+N1=N2 DP
    <- nat`plus-swap-succ-converse N4+SN5=N6 SN4+N5=N6
    <- efxmap`update-disjoint-implies-disjoint
      DP (efxmap`update/< SN4+N5=N6) U M1<>M2 DPP.

- : efxmap`update-disjoint-implies-disjoint
    D (efxmap`update/< P1) (efxmap`update/< P2) M1<>M2 
    (efxmap`deep-disjoint/= DP M1<>M2 nat`eq/)
    <- nat`plus-swap-succ P1 P1S
    <- nat`plus-commutative P1S P1P
    <- nat`plus-swap-succ P2 P2S
    <- nat`plus-commutative P2S P2P
    <- efxmap`shift-preserves-deep-disjoint-converse
      D (efxmap`shift/+ P1P) (efxmap`shift/+ P2P) DP.

- : efxmap`update-disjoint-implies-disjoint
    (efxmap`deep-disjoint/= M1<>M2 D1<>D2 nat`eq/)
    (efxmap`update/> U1 P1) (efxmap`update/> U2 P2) DDD
    (efxmap`deep-disjoint/= M1<>M2' D1<>D2 nat`eq/)
    <- nat`plus-right-cancels P1 P2 nat`eq/ nat`eq/ E
    <- nat`succ-cancels E EP
    <- efxmap`update-respects-eq 
      U1 efxmap`eq/ EP inner-efxmap`eq/ efxmap`eq/ U1P
    <- efxmap`update-disjoint-implies-disjoint M1<>M2 U1P U2 DDD M1<>M2'.
      
- : efxmap`update-disjoint-implies-disjoint
    (efxmap`deep-disjoint/< D P)
    (efxmap`update/> U1 P1)
    (efxmap`update/> U2 P2) DDD (efxmap`deep-disjoint/< XXX P)
    <- nat`plus-associative-converse P P2 _ P3 P4
    <- nat`plus-right-cancels P4 P1 nat`eq/ nat`eq/ E
    <- nat`plus-respects-eq P3 nat`eq/ nat`eq/ E P5
    <- nat`plus-right-decrease P5 _ EE P7
    <- nat`succ-cancels EE EQ
    <- nat`eq-symmetric EQ EQP
    <- nat`plus-respects-eq P7 nat`eq/ nat`eq/ EQP P6
    <- efxmap`update-disjoint-implies-disjoint 
      D U1 (efxmap`update/> U2 P6) DDD XXX. 

- : efxmap`update-disjoint-implies-disjoint
    (efxmap`deep-disjoint/> D P)
    (efxmap`update/> U1 P1) (efxmap`update/> U2 P2) DDD
    (efxmap`deep-disjoint/> D1 P)
    <- nat`plus-associative-converse P P1 _ P3 P4
    <- nat`plus-right-cancels P4 P2 nat`eq/ nat`eq/ E
    <- nat`plus-respects-eq P3 nat`eq/ nat`eq/ E P5
    <- nat`plus-right-decrease P5 _ EE P7
    <- nat`succ-cancels EE EQ
    <- nat`eq-symmetric EQ EQP
    <- nat`plus-respects-eq P7 nat`eq/ nat`eq/ EQP P6
    <- efxmap`update-disjoint-implies-disjoint
      D (efxmap`update/> U1 P6) U2 DDD D1.

- : efxmap`update-disjoint-implies-disjoint
    _ efxmap`update/0 (efxmap`update/< _) M1<>M2 
    (efxmap`deep-disjoint/= efxmap`deep-disjoint/L M1<>M2 nat`eq/).

%worlds () (efxmap`update-disjoint-implies-disjoint _ _ _ _ _).
%total (D) (efxmap`update-disjoint-implies-disjoint D _ _ _ _).


%theorem efxmap`deep-disjoint-lookup-implies-disjoint :
 forall* {M1} {M2} {N} {D1} {D2}
 forall {A:efxmap`deep-disjoint M1 M2}
        {L1:efxmap`lookup M1 N D1} {L2:efxmap`lookup M2 N D2}
 exists {IX:inner-efxmap`disjoint D1 D2}
 true.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/= _ X nat`eq/) 
    (efxmap`lookup/= nat`eq/) (efxmap`lookup/= nat`eq/) X.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/= X _ nat`eq/)
    (efxmap`lookup/> L1 P1) (efxmap`lookup/> L2 P2) XX
    <- nat`plus-right-cancels P1 P2 nat`eq/ nat`eq/ EQ
    <- nat`succ-cancels EQ NEQ
    <- efxmap`lookup-respects-eq L1 efxmap`eq/ NEQ inner-efxmap`eq/ L1P
    <- efxmap`deep-disjoint-lookup-implies-disjoint X L1P L2 XX.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/= _ _ nat`eq/)
    (efxmap`lookup/> _ P) (efxmap`lookup/= nat`eq/) X
    <- nat`plus-implies-gt P nat`eq/ GT
    <- nat`gt-anti-reflexive GT F
    <- inner-efxmap`false-implies-disjoint F X.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/= _ _ nat`eq/)
    (efxmap`lookup/= nat`eq/) (efxmap`lookup/> _ P) X
    <- nat`plus-implies-gt P nat`eq/ GT
    <- nat`gt-anti-reflexive GT F
    <- inner-efxmap`false-implies-disjoint F X.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/< _ N0+1+N=N)
    (efxmap`lookup/= nat`eq/) (efxmap`lookup/= nat`eq/) X
    <- plus-implies-gt N0+1+N=N nat`eq/ N>N
    <- gt-anti-reflexive N>N F
    <- inner-efxmap`false-implies-disjoint F X.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/< _ P1)
    (efxmap`lookup/= nat`eq/) (efxmap`lookup/> _ P2) X
    <- nat`plus-implies-gt P1 nat`eq/ GT1
    <- nat`plus-implies-gt P2 nat`eq/ GT2
    <- nat`gt-anti-symmetric GT1 GT2 F
    <- inner-efxmap`false-implies-disjoint F X.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/< D N0+1+N1=N2)
    (efxmap`lookup/> L1P N0P+1+N1=N2)
    (efxmap`lookup/= nat`eq/) F
    <- plus-right-cancels N0P+1+N1=N2 N0+1+N1=N2 nat`eq/ nat`eq/ N0P+1=N0+1
    <- succ-cancels N0P+1=N0+1 N0P=N0
    <- efxmap`lookup-respects-eq L1P efxmap`eq/ N0P=N0 inner-efxmap`eq/ L1
    <- efxmap`deep-disjoint-lookup-implies-disjoint D L1 (efxmap`lookup/= nat`eq/) F.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/< D N0+1+N1=N2)
    (efxmap`lookup/> L1 N1P+1+N1=N)
    (efxmap`lookup/> L2 N2P+1+N2=N) F
    <- plus-swap-succ N0+1+N1=N2 N0+N1+1=N2
    <- plus-associative-converse N0+N1+1=N2 N2P+1+N2=N NX
                                 N2P+1+N0=NX NX+N1+1=N
    <- plus-swap-succ N1P+1+N1=N N1P+N1+1=N
    <- plus-right-cancels NX+N1+1=N N1P+N1+1=N nat`eq/ nat`eq/ NX=N1P
    <- plus-respects-eq N2P+1+N0=NX nat`eq/ nat`eq/ NX=N1P N2P+1+N0=N1P
    <- efxmap`deep-disjoint-lookup-implies-disjoint D L1 (efxmap`lookup/> L2 N2P+1+N0=N1P) F.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/> _ N3+1+N=N)
    (efxmap`lookup/= nat`eq/) (efxmap`lookup/= nat`eq/) X
    <- plus-implies-gt N3+1+N=N nat`eq/ N>N
    <- gt-anti-reflexive N>N F
    <- inner-efxmap`false-implies-disjoint F X.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/> _ N3+1+N2=N1)
    (efxmap`lookup/> _ N3+1+N1=N2)
    (efxmap`lookup/= nat`eq/) X
    <- plus-implies-gt N3+1+N2=N1 nat`eq/ N1>N2
    <- plus-implies-gt N3+1+N1=N2 nat`eq/ N2>N1
    <- gt-anti-symmetric N1>N2 N2>N1 F
    <- inner-efxmap`false-implies-disjoint F X.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/> D N3+1+N2=N1)
    (efxmap`lookup/= nat`eq/)
    (efxmap`lookup/> L2P N3P+1+N2=N1) F
    <- plus-right-cancels N3P+1+N2=N1 N3+1+N2=N1 nat`eq/ nat`eq/ N3P+1=N3+1
    <- succ-cancels N3P+1=N3+1 N3P=N3
    <- efxmap`lookup-respects-eq L2P efxmap`eq/ N3P=N3 inner-efxmap`eq/ L2
    <- efxmap`deep-disjoint-lookup-implies-disjoint D (efxmap`lookup/= nat`eq/) L2 F.

- : efxmap`deep-disjoint-lookup-implies-disjoint
    (efxmap`deep-disjoint/> D N3+1+N2=N1)
    (efxmap`lookup/> L1 N1P+1+N1=N)
    (efxmap`lookup/> L2 N2P+1+N2=N) F
    <- plus-swap-succ N3+1+N2=N1 N3+N2+1=N1
    <- plus-associative-converse N3+N2+1=N1 N1P+1+N1=N NX
                                 N1P+1+N3=NX NX+N2+1=N
    <- plus-swap-succ N2P+1+N2=N N2P+N2+1=N
    <- plus-right-cancels NX+N2+1=N N2P+N2+1=N nat`eq/ nat`eq/ NX=N2P
    <- plus-respects-eq N1P+1+N3=NX nat`eq/ nat`eq/ NX=N2P N1P+1+N3=N2P
    <- efxmap`deep-disjoint-lookup-implies-disjoint D (efxmap`lookup/> L1 N1P+1+N3=N2P) L2 F.

%worlds () (efxmap`deep-disjoint-lookup-implies-disjoint _ _ _ _).
%total (D) (efxmap`deep-disjoint-lookup-implies-disjoint D _ _ _).



%theorem efxmap`fresh-update-preserves-deep-disjoint :
 forall* {M1} {M2} {N} {D} {M2P}
 forall {I: efxmap`deep-disjoint M1 M2}
  {F: efxmap`fresh M1 N}
  {U: efxmap`update M2 N D M2P}
 exists {DP: efxmap`deep-disjoint M1 M2P}
 true.

%theorem efxmap`fresh-update-preserves-deep-disjoint/L :
    forall* {M1} {M2} {N} {D} {M2P} {B}
    forall {I: efxmap`deep-disjoint M1 M2}
           {F: efxmap`fresh M1 N}
           {U: efxmap`update M2 N D M2P}
           {D?: efxmap`deep-disjoint? M1 M2P B}
    exists {DP: efxmap`deep-disjoint M1 M2P}
    true.

- : efxmap`fresh-update-preserves-deep-disjoint/L
    _ _ _ (efxmap`deep-disjoint?/yes DJ) DJ.

- : efxmap`fresh-update-preserves-deep-disjoint/L 
    D FR U (efxmap`deep-disjoint?/no 
	     L1 L2P (inner-efxmap`disjoint?/no LL1 LL2)) XXX
    <- efxmap`fresh-lookup-not-equal FR L1 NE
    <- nat`ne-symmetric NE NEs
    <- efxmap`update-preserves-lookup-converse L2P U NEs L2
    <- efxmap`deep-disjoint-lookup-implies-disjoint D L1 L2 IX
    <- inner-efxmap`disjoint-lookup-contradiction IX LL1 LL2 F
    <- efxmap`false-implies-deep-disjoint F XXX.

%worlds () (efxmap`fresh-update-preserves-deep-disjoint/L _ _ _ _ _).
%total { } (efxmap`fresh-update-preserves-deep-disjoint/L _ _ _ _ _).

- : efxmap`fresh-update-preserves-deep-disjoint D F U DP
    <- efxmap`deep-disjoint?-total D?
    <- efxmap`fresh-update-preserves-deep-disjoint/L D F U D? DP.

%worlds () (efxmap`fresh-update-preserves-deep-disjoint _ _ _ _).
%total { } (efxmap`fresh-update-preserves-deep-disjoint _ _ _ _).