%%% Transforming a efxmap to a tgtmap
%%% $Id: efxmap2tgtmap.elf,v 1.1 2013/05/24 03:25:43 csun Exp csun $


%%% Definition

efxmap2tgtmap : efxmap -> tgtmap -> type.

efxmap2tgtmap/0 : efxmap2tgtmap efxmap/0 tgtmap/0.

efxmap2tgtmap/+
  : inner-efxmap`domain M S
    -> efxmap2tgtmap XM GM
    -> efxmap2tgtmap (efxmap/+ N M XM) (tgtmap/+ N S GM).


%%% Theorems


inner-efxmap`domain-preserves-wf
  : inner-efxmap`wf M
    -> inner-efxmap`domain M S
    -> set`wf S
    -> type.
%mode inner-efxmap`domain-preserves-wf +W1 +D -W2.

- : inner-efxmap`domain-preserves-wf (inner-efxmap`wf/ SZ)
    DM (set`wf/ SZs)
    <- inner-efxmap`domain-preserves-size SZ DM SZs.

%worlds () (inner-efxmap`domain-preserves-wf _ _ _).
%total { }(inner-efxmap`domain-preserves-wf _ _ _).


inner-efxmap`domain-preserves-wf-converse
  : set`wf S
    -> inner-efxmap`domain M S
    -> inner-efxmap`wf M
    -> type.
%mode inner-efxmap`domain-preserves-wf-converse +W1 +D -W2.

- : inner-efxmap`domain-preserves-wf-converse (set`wf/ SZs) 
    DM (inner-efxmap`wf/ SZ)
    <- inner-efxmap`domain-preserves-size-converse SZs DM SZ.

%worlds () (inner-efxmap`domain-preserves-wf-converse _ _ _).
%total { }(inner-efxmap`domain-preserves-wf-converse _ _ _).


false-implies-efxmap2tgtmap
  : void -> efxmap2tgtmap XM GM -> type.
%mode +{V} +{XM} +{GM} -{T:efxmap2tgtmap XM GM}
false-implies-efxmap2tgtmap V T.

%worlds () (false-implies-efxmap2tgtmap _ _).
%total {} (false-implies-efxmap2tgtmap _ _).


efxmap2tgtmap-respects-eq
  : efxmap2tgtmap XM GM
    -> efxmap`eq XM XMP
    -> tgtmap`eq GM GMP
    -> efxmap2tgtmap XMP GMP
    -> type.
%mode efxmap2tgtmap-respects-eq +T1 +E1 +E2 -T2.

- : efxmap2tgtmap-respects-eq efxmap2tgtmap/0 _ _ efxmap2tgtmap/0.

- : efxmap2tgtmap-respects-eq (efxmap2tgtmap/+ D T) 
    efxmap`eq/ tgtmap`eq/ (efxmap2tgtmap/+ D T) .

%worlds () (efxmap2tgtmap-respects-eq _ _ _ _).
%total { } (efxmap2tgtmap-respects-eq _ _ _ _).


efxmap2tgtmap-total*
  : {XM} {GM} efxmap2tgtmap XM GM -> type.
%mode efxmap2tgtmap-total* +XM -GM -T.

- : efxmap2tgtmap-total* efxmap/0 tgtmap/0 efxmap2tgtmap/0. 

- : efxmap2tgtmap-total* (efxmap/+ N M XM) (tgtmap/+ N S GM)
    (efxmap2tgtmap/+ DM-M=S XM=>GM)
    <- inner-efxmap`domain-total* M S DM-M=S
    <- efxmap2tgtmap-total* XM GM XM=>GM.

%worlds () (efxmap2tgtmap-total* _ _ _).
%total XM (efxmap2tgtmap-total* XM _ _).

%abbrev efxmap2tgtmap-total = efxmap2tgtmap-total* _ _.


efxmap2tgtmap-unique
  : efxmap2tgtmap XM GM
    -> efxmap2tgtmap XMP GMP
    -> efxmap`eq XM XMP
    -> tgtmap`eq GM GMP
    -> type.
%mode efxmap2tgtmap-unique +D1 +D2 +E1 -E2.

- : efxmap2tgtmap-unique efxmap2tgtmap/0 efxmap2tgtmap/0 efxmap`eq/ tgtmap`eq/.

- : efxmap2tgtmap-unique 
    (efxmap2tgtmap/+ M-DM1 XM2GM1) 
    (efxmap2tgtmap/+ M-DM2 XM2GM2) XM-EQ GM-EQ
    <- efxmap`map/+-preserves-eq-converse XM-EQ N-EQ M-EQ XM1-EQ
    <- efxmap2tgtmap-unique XM2GM1 XM2GM2 XM1-EQ GM1-EQ
    <- inner-efxmap`domain-unique M-DM1 M-DM2 M-EQ S-EQ
    <- tgtmap`map/+-preserves-eq N-EQ S-EQ GM1-EQ GM-EQ.

%worlds () (efxmap2tgtmap-unique _ _ _ _).
%total (D) (efxmap2tgtmap-unique D _ _ _).


efxmap2tgtmap-inversion
  : efxmap2tgtmap (efxmap/+ N1 M XM) (tgtmap/+ N2 S GM)
    -> nat`eq N1 N2
    -> inner-efxmap`domain M S
    -> efxmap2tgtmap XM GM
    -> type.
%mode efxmap2tgtmap-inversion +E +T1 -D -T2.

- : efxmap2tgtmap-inversion (efxmap2tgtmap/+ DM XM=>GM) _ DM XM=>GM.

%worlds () (efxmap2tgtmap-inversion _ _ _ _).
%total { } (efxmap2tgtmap-inversion _ _ _ _).


nat`ne-efxmap2tgtmap-implies-false
  : nat`ne N1 N2
    -> efxmap2tgtmap (efxmap/+ N1 _ _) (tgtmap/+ N2 _ _)
    -> void 
    -> type.
%mode nat`ne-efxmap2tgtmap-implies-false +NE +T -V.

- : nat`ne-efxmap2tgtmap-implies-false (nat`ne/< GT) (efxmap2tgtmap/+ _ _) V
    <- nat`gt-anti-reflexive GT V.

- : nat`ne-efxmap2tgtmap-implies-false (nat`ne/> GT) (efxmap2tgtmap/+ _ _) V
    <- nat`gt-anti-reflexive GT V.

%worlds () (nat`ne-efxmap2tgtmap-implies-false _ _ _).
%total { } (nat`ne-efxmap2tgtmap-implies-false _ _ _).


shift-preserves-efxmap2tgtmap
  : efxmap2tgtmap XM GM
    -> efxmap`shift N XM XM1
    -> {GM1} tgtmap`shift N GM GM1
    -> efxmap2tgtmap XM1 GM1
    -> type.
%mode shift-preserves-efxmap2tgtmap +T1 +SH1 -GM -SH2 -T2.

- : shift-preserves-efxmap2tgtmap
    efxmap2tgtmap/0 efxmap`shift/0 tgtmap/0 tgtmap`shift/0 efxmap2tgtmap/0.

- : shift-preserves-efxmap2tgtmap
    (efxmap2tgtmap/+ T D) (efxmap`shift/+ P)
    _ (tgtmap`shift/+ P) (efxmap2tgtmap/+ T D).

%worlds () (shift-preserves-efxmap2tgtmap _ _ _ _ _).
%total { } (shift-preserves-efxmap2tgtmap _ _ _ _ _).


shift-preserves-efxmap2tgtmap*
  : efxmap2tgtmap XM GM
    -> efxmap`shift N XM XMs
    -> tgtmap`shift N GM GMs
    -> efxmap2tgtmap XMs GMs
    -> type.
%mode shift-preserves-efxmap2tgtmap* +T1 +S1 +S2 -T2.

- : shift-preserves-efxmap2tgtmap* efxmap2tgtmap/0 _ _ efxmap2tgtmap/0.

- : shift-preserves-efxmap2tgtmap* 
    (efxmap2tgtmap/+ T D) _ _ (efxmap2tgtmap/+ T D).
    
%worlds () (shift-preserves-efxmap2tgtmap* _ _ _ _).
%total  {} (shift-preserves-efxmap2tgtmap* _ _ _ _).


shift-preserves-efxmap2tgtmap-converse
  : efxmap2tgtmap XMP GMP
    -> efxmap`shift N XM XMP
    -> {GM} tgtmap`shift N GM GMP
    -> efxmap2tgtmap XM GM
    -> type.
%mode shift-preserves-efxmap2tgtmap-converse +T1 +SH1 -GM -SH2 -T2.

- : shift-preserves-efxmap2tgtmap-converse
    efxmap2tgtmap/0 efxmap`shift/0 tgtmap/0 tgtmap`shift/0 efxmap2tgtmap/0.

- : shift-preserves-efxmap2tgtmap-converse
    (efxmap2tgtmap/+ T D) (efxmap`shift/+ P) _ (tgtmap`shift/+ P)
    (efxmap2tgtmap/+ T D).

%worlds () (shift-preserves-efxmap2tgtmap-converse _ _ _ _ _).
%total { } (shift-preserves-efxmap2tgtmap-converse _ _ _ _ _).


shift-preserves-efxmap2tgtmap-converse*
  : efxmap2tgtmap XMP GMP
    -> efxmap`shift N XM XMP
    -> tgtmap`shift N GM GMP
    -> efxmap2tgtmap XM GM
    -> type.
%mode shift-preserves-efxmap2tgtmap-converse* +T1 +S1 +S2 -T2.

- : shift-preserves-efxmap2tgtmap-converse* efxmap2tgtmap/0 _ _ efxmap2tgtmap/0.

- : shift-preserves-efxmap2tgtmap-converse* 
    (efxmap2tgtmap/+ T D) (efxmap`shift/+ P1) (tgtmap`shift/+ P2) T2
    <- nat`plus-left-cancels P1 P2 nat`eq/ nat`eq/ E
    <- tgtmap`map/+-preserves-eq E set`eq/ tgtmap`eq/ ME
    <- efxmap2tgtmap-respects-eq (efxmap2tgtmap/+ T D) efxmap`eq/ ME T2.
        
%worlds () (shift-preserves-efxmap2tgtmap-converse* _ _ _ _).
%total  {} (shift-preserves-efxmap2tgtmap-converse* _ _ _ _).


efxmap2tgtmap-preserves-size
  : efxmap2tgtmap XM GM
    -> efxmap`size XM N
    -> tgtmap`size GM N
    -> type.
%mode efxmap2tgtmap-preserves-size +T +SZ1 -SZ2.

- : efxmap2tgtmap-preserves-size efxmap2tgtmap/0 efxmap`size/0 tgtmap`size/0.

- : efxmap2tgtmap-preserves-size
    (efxmap2tgtmap/+ _ T) (efxmap`size/+ SZ1) (tgtmap`size/+ SZ2)
    <- efxmap2tgtmap-preserves-size T SZ1 SZ2.

%worlds () (efxmap2tgtmap-preserves-size _ _ _).
%total T (efxmap2tgtmap-preserves-size T _ _).


efxmap2tgtmap-preserves-size-converse
  : efxmap2tgtmap XM GM
    -> tgtmap`size GM N
    -> efxmap`size XM N
    -> type.
%mode efxmap2tgtmap-preserves-size-converse +T +SZ1 -SZ2.

- : efxmap2tgtmap-preserves-size-converse
    efxmap2tgtmap/0 tgtmap`size/0 efxmap`size/0.

- : efxmap2tgtmap-preserves-size-converse
    (efxmap2tgtmap/+ _ T) (tgtmap`size/+ SZ1) (efxmap`size/+ SZ2)
    <- efxmap2tgtmap-preserves-size-converse T SZ1 SZ2.

%worlds () (efxmap2tgtmap-preserves-size-converse _ _ _).
%total T (efxmap2tgtmap-preserves-size-converse T _ _).


efxmap2tgtmap-preserves-lookup
  : efxmap2tgtmap XM GM
    -> efxmap`lookup XM N M
    -> {S} tgtmap`lookup GM N S
    -> inner-efxmap`domain M S
    -> type.
%mode efxmap2tgtmap-preserves-lookup +T +L1 -S -L2 -D.

- : efxmap2tgtmap-preserves-lookup 
    (efxmap2tgtmap/+ DM T) (efxmap`lookup/= nat`eq/) 
    S (tgtmap`lookup/= nat`eq/) DM.

- : efxmap2tgtmap-preserves-lookup
    (efxmap2tgtmap/+ _ T) (efxmap`lookup/> L P)
    S (tgtmap`lookup/> L2 P) DM
    <- efxmap2tgtmap-preserves-lookup T L _ L2 DM.

%worlds () (efxmap2tgtmap-preserves-lookup _ _ _ _ _).
%total T (efxmap2tgtmap-preserves-lookup T _ _ _ _).


efxmap2tgtmap-preserves-lookup-converse
  : efxmap2tgtmap XM GM
    -> tgtmap`lookup GM N S
    -> {M:inner-efxmap} efxmap`lookup XM N M
    -> inner-efxmap`domain M S
    -> type.
%mode efxmap2tgtmap-preserves-lookup-converse +T +L1 -S -L2 -D.

- : efxmap2tgtmap-preserves-lookup-converse
    (efxmap2tgtmap/+ DM T) (tgtmap`lookup/= nat`eq/)
    S (efxmap`lookup/= nat`eq/) DM.

- : efxmap2tgtmap-preserves-lookup-converse
    (efxmap2tgtmap/+ _ T) (tgtmap`lookup/> L P)
    S (efxmap`lookup/> L2 P) DM
    <- efxmap2tgtmap-preserves-lookup-converse T L _ L2 DM.

%worlds () (efxmap2tgtmap-preserves-lookup-converse _ _ _ _ _).
%total T (efxmap2tgtmap-preserves-lookup-converse T _ _ _ _).


efxmap2tgtmap-preserves-fresh
  : efxmap2tgtmap XM GM
    -> efxmap`fresh XM N
    -> tgtmap`fresh GM N
    -> type.
%mode efxmap2tgtmap-preserves-fresh +T +F1 -F2.

- : efxmap2tgtmap-preserves-fresh
    efxmap2tgtmap/0 efxmap`fresh/0 tgtmap`fresh/0.

- : efxmap2tgtmap-preserves-fresh
    (efxmap2tgtmap/+ _ _) (efxmap`fresh/< GT) (tgtmap`fresh/< GT).

- : efxmap2tgtmap-preserves-fresh
    (efxmap2tgtmap/+ _ T) (efxmap`fresh/> F1 P) (tgtmap`fresh/> F2 P)
    <- efxmap2tgtmap-preserves-fresh T F1 F2.

%worlds () (efxmap2tgtmap-preserves-fresh _ _ _).
%total T (efxmap2tgtmap-preserves-fresh T _ _).


efxmap2tgtmap-preserves-fresh-converse
  : efxmap2tgtmap XM GM
    -> tgtmap`fresh GM N
    -> efxmap`fresh XM N
    -> type.
%mode efxmap2tgtmap-preserves-fresh-converse +T +F1 -F2.

- : efxmap2tgtmap-preserves-fresh-converse
    efxmap2tgtmap/0 tgtmap`fresh/0 efxmap`fresh/0.

- : efxmap2tgtmap-preserves-fresh-converse
    (efxmap2tgtmap/+ _ _) (tgtmap`fresh/< GT) (efxmap`fresh/< GT).

- : efxmap2tgtmap-preserves-fresh-converse
    (efxmap2tgtmap/+ _ T)  (tgtmap`fresh/> F1 P) (efxmap`fresh/> F2 P)
    <- efxmap2tgtmap-preserves-fresh-converse T F1 F2.

%worlds () (efxmap2tgtmap-preserves-fresh-converse _ _ _).
%total T (efxmap2tgtmap-preserves-fresh-converse T _ _).


efxmap2tgtmap-preserves-update
  : efxmap2tgtmap XM GM
    -> efxmap`update XM N M XMP
    -> inner-efxmap`domain M S
    -> {GMP} tgtmap`update GM N S GMP
    -> efxmap2tgtmap XMP GMP
    -> type.
%mode efxmap2tgtmap-preserves-update +T1 +U1 +D -GMP -U2 -T2.

- : efxmap2tgtmap-preserves-update
    _ efxmap`update/0 D _ tgtmap`update/0 (efxmap2tgtmap/+ D efxmap2tgtmap/0).

- : efxmap2tgtmap-preserves-update
    (efxmap2tgtmap/+ _ T) (efxmap`update/= nat`eq/) DM 
    _ (tgtmap`update/= nat`eq/) (efxmap2tgtmap/+ DM T).

- : efxmap2tgtmap-preserves-update
    (efxmap2tgtmap/+ DMP T) (efxmap`update/< P) DM
    _ (tgtmap`update/< P) (efxmap2tgtmap/+ DM (efxmap2tgtmap/+ DMP T)).

- : efxmap2tgtmap-preserves-update
    (efxmap2tgtmap/+ DMP T) (efxmap`update/> U1 P) DM
    _ (tgtmap`update/> U2 P) (efxmap2tgtmap/+ DMP T2)
    <- efxmap2tgtmap-preserves-update T U1 DM _ U2 T2.

%worlds () (efxmap2tgtmap-preserves-update _ _ _ _ _ _).
%total T (efxmap2tgtmap-preserves-update T _ _ _ _ _). 


efxmap2tgtmap-preserves-update*
  : efxmap2tgtmap XM GM
    -> efxmap`update XM N M XMP
    -> tgtmap`update GM N S GMP
    -> inner-efxmap`domain M S
    -> efxmap2tgtmap XMP GMP
    -> type.
%mode efxmap2tgtmap-preserves-update* +T1 +U1 +U2 +D -T2.
%worlds () (efxmap2tgtmap-preserves-update* _ _ _ _ _).
%trustme %total { } (efxmap2tgtmap-preserves-update* _ _ _ _ _).


%theorem efxmap2tgtmap-preserves-domain :
    forall* {GM} {XM} {S}
    forall  {XM=>GM: efxmap2tgtmap XM GM}
            {DM-XM: efxmap`domain XM S}
    exists  {DM-GM: tgtmap`domain GM S}
    true.

- : efxmap2tgtmap-preserves-domain
    (efxmap2tgtmap/+ _ XM=>GM) (efxmap`domain/+ DM-XM) (tgtmap`domain/+ DM-GM)
    <- efxmap2tgtmap-preserves-domain XM=>GM DM-XM DM-GM.

- : efxmap2tgtmap-preserves-domain efxmap2tgtmap/0 _ tgtmap`domain/0.
   
%worlds () (efxmap2tgtmap-preserves-domain _ _ _).
%total (T) (efxmap2tgtmap-preserves-domain T _ _).


%theorem efxmap2tgtmap-preserves-domain-converse :
    forall* {GM} {XM} {S}
    forall  {XM=>GM: efxmap2tgtmap XM GM}
            {DM-GM: tgtmap`domain GM S}
    exists  {DM-XM: efxmap`domain XM S}
    true.

- : efxmap2tgtmap-preserves-domain-converse
    (efxmap2tgtmap/+ _ XM=>GM) (tgtmap`domain/+ DM-GM) (efxmap`domain/+ DM-XM) 
    <- efxmap2tgtmap-preserves-domain-converse XM=>GM DM-GM DM-XM.

- : efxmap2tgtmap-preserves-domain-converse efxmap2tgtmap/0 _ efxmap`domain/0.
   
%worlds () (efxmap2tgtmap-preserves-domain-converse _ _ _).
%total (T) (efxmap2tgtmap-preserves-domain-converse T _ _).


efxmap2tgtmap-preserves-leq
  : efxmap`leq XM XMP
    -> efxmap2tgtmap XM GM
    -> efxmap2tgtmap XMP GMP
    -> tgtmap`leq GM GMP
    -> type.
%mode efxmap2tgtmap-preserves-leq +LE1 +T1 +T2 -LE2.

efxmap2tgtmap-preserves-leq/L 
  : {N} efxmap`size XMP N
    -> efxmap`leq XM XMP
    -> efxmap2tgtmap XM GM
    -> efxmap2tgtmap XMP GMP
    -> tgtmap`leq GM GMP
    -> type.
%mode efxmap2tgtmap-preserves-leq/L +N +SZ +LE1 +T1 +T2 -LE2.

- : efxmap2tgtmap-preserves-leq/L _ _ efxmap`leq/0 _ _ tgtmap`leq/0.

- : efxmap2tgtmap-preserves-leq/L _ (efxmap`size/+ SZ2)
    (efxmap`leq/= XM1<=XM2 M1<=M2 EQ) 
    (efxmap2tgtmap/+ DM-M1=S1 XM1=>GM1) 
    (efxmap2tgtmap/+ DM-M2=S2 XM2=>GM2) 
    (tgtmap`leq/= GM1<=GM2 S1<=S2 EQ)
    <- inner-efxmap`domain-preserves-leq* M1<=M2 DM-M1=S1 DM-M2=S2 S1<=S2
    <- efxmap2tgtmap-preserves-leq/L 
      _ SZ2 XM1<=XM2 XM1=>GM1 XM2=>GM2 GM1<=GM2.

- : efxmap2tgtmap-preserves-leq/L _ (efxmap`size/+ SZ2)
    (efxmap`leq/> N3D1XM1<=XM2 P) N1D1XM1=>GM1 
    (efxmap2tgtmap/+ _ XM2=>GM2) GM1<=GM2
    <- nat`plus-swap-succ P P1
    <- nat`plus-commutative P1 P2
    <- efxmap`shift-total SH-XM2=XM2P
    <- efxmap`shift-preserves-leq*
      N3D1XM1<=XM2 (efxmap`shift/+ P2) SH-XM2=XM2P N1D1XM1<=XM2P
    <- tgtmap`shift-total SH-GM2=GM2P
    <- shift-preserves-efxmap2tgtmap*
      XM2=>GM2 SH-XM2=XM2P SH-GM2=GM2P XM2P=>GM2P
    <- efxmap`shift-preserves-size SZ2 SH-XM2=XM2P SZ2P
    <- efxmap2tgtmap-preserves-leq/L _ SZ2P
      N1D1XM1<=XM2P N1D1XM1=>GM1 XM2P=>GM2P GM1<=GM2P
    <- tgtmap`shift-implies-update SH-GM2=GM2P UD
    <- tgtmap`shift-implies-fresh SH-GM2=GM2P FS
    <- tgtmap`fresh-update-implies-leq FS UD GM2P<=GM2
    <- tgtmap`leq-transitive GM1<=GM2P GM2P<=GM2 GM1<=GM2.

- : efxmap2tgtmap-preserves-leq XM<=XMP XM=>GM XMP=>GMP GM<=GMP
    <- efxmap`size-total SZ
    <- efxmap2tgtmap-preserves-leq/L N SZ XM<=XMP XM=>GM XMP=>GMP GM<=GMP.

%worlds () (efxmap2tgtmap-preserves-leq/L _ _ _ _ _ _).
%total N (efxmap2tgtmap-preserves-leq/L N _ _ _ _ _).

%worlds () (efxmap2tgtmap-preserves-leq _ _ _ _).
%total { } (efxmap2tgtmap-preserves-leq _ _ _ _).


efxmap2tgtmap-preserves-wf
  : efxmap`wf XM
    -> efxmap2tgtmap XM GM
    -> tgtmap`wf GM
    -> type.
%mode efxmap2tgtmap-preserves-wf +WF1 +T -WF2.

- : efxmap2tgtmap-preserves-wf
    efxmap`wf/0 efxmap2tgtmap/0 tgtmap`wf/0.

- : efxmap2tgtmap-preserves-wf
    (efxmap`wf/+ DW1 WF1) (efxmap2tgtmap/+ DM XM=>GM)
    (tgtmap`wf/+ DW2 WF2)
    <- efxmap2tgtmap-preserves-wf WF1 XM=>GM WF2
    <- inner-efxmap`domain-preserves-wf DW1 DM DW2.

%worlds () (efxmap2tgtmap-preserves-wf _ _ _).
%total (WF) (efxmap2tgtmap-preserves-wf WF _ _).


efxmap2tgtmap-preserves-wf-converse
  : tgtmap`wf GM
    -> efxmap2tgtmap XM GM
    -> efxmap`wf XM
    -> type.
%mode efxmap2tgtmap-preserves-wf-converse +WF1 +T -WF2.

- : efxmap2tgtmap-preserves-wf-converse
    tgtmap`wf/0 efxmap2tgtmap/0 efxmap`wf/0.

- : efxmap2tgtmap-preserves-wf-converse
    (tgtmap`wf/+ DW1 WF1) (efxmap2tgtmap/+ DM XM=>GM)
    (efxmap`wf/+ DW2 WF2)
    <- efxmap2tgtmap-preserves-wf-converse WF1 XM=>GM WF2
    <- inner-efxmap`domain-preserves-wf-converse DW1 DM DW2.

%worlds () (efxmap2tgtmap-preserves-wf-converse _ _ _).
%total (WF) (efxmap2tgtmap-preserves-wf-converse WF _ _).


fresh-update-preserves-efxmap2tgtmap-converse
  : efxmap2tgtmap XM GM
    -> efxmap`fresh XMP N
    -> efxmap`update XMP N M XM
    -> tgtmap`fresh GMP N
    -> tgtmap`update GMP N S GM
    -> efxmap2tgtmap XMP GMP
    -> type.
%mode fresh-update-preserves-efxmap2tgtmap-converse +T1 +FS1 +U1 +FS2 +U2 -T2.

- : fresh-update-preserves-efxmap2tgtmap-converse
    _ _ _ FS (tgtmap`update/= nat`eq/) XM=>GM
    <- tgtmap`fresh-contradiction FS V
    <- false-implies-efxmap2tgtmap V XM=>GM.

fresh-update-preserves-efxmap2tgtmap-converse/0
  : tgtmap`size M z -> tgtmap`eq M tgtmap/0 -> type.
%mode fresh-update-preserves-efxmap2tgtmap-converse/0 +SZ -EQ.

- : fresh-update-preserves-efxmap2tgtmap-converse/0 tgtmap`size/0 tgtmap`eq/.

%worlds () (fresh-update-preserves-efxmap2tgtmap-converse/0 _ _).
%total { } (fresh-update-preserves-efxmap2tgtmap-converse/0 _ _).

- : fresh-update-preserves-efxmap2tgtmap-converse T1
    efxmap`fresh/0 efxmap`update/0 FS2 U2 XM=>GM
    <- efxmap2tgtmap-preserves-size T1 (efxmap`size/+ efxmap`size/0) SZ2
    <- tgtmap`fresh-update-increases-size-converse SZ2 FS2 U2 SZ1
    <- fresh-update-preserves-efxmap2tgtmap-converse/0 SZ1 EQ
    <- tgtmap`eq-symmetric EQ EQs
    <- efxmap2tgtmap-respects-eq efxmap2tgtmap/0 efxmap`eq/ EQs XM=>GM.

- : fresh-update-preserves-efxmap2tgtmap-converse XM=>GM
    (efxmap`fresh/< GT1) U1 (tgtmap`fresh/< GT2) U2 XM=>GMsc
    <- nat`gt-implies-plus GT1 _ P1
    <- nat`gt-implies-plus GT2 _ P2
    <- efxmap`update/<-inversion U1 P1 EQ1
    <- tgtmap`update/<-inversion U2 P2 EQ2
    <- efxmap`eq-symmetric EQ1 EQ1s
    <- tgtmap`eq-symmetric EQ2 EQ2s
    <- efxmap2tgtmap-respects-eq XM=>GM EQ1s EQ2s XM=>GMx
    <- efxmap2tgtmap-inversion XM=>GMx nat`eq/ DMs XM=>GMs
    <- nat`plus-swap-succ P1 P1s
    <- nat`plus-swap-succ P2 P2s
    <- nat`plus-commutative P1s P1sc
    <- nat`plus-commutative P2s P2sc
    <- shift-preserves-efxmap2tgtmap* 
      XM=>GMs (efxmap`shift/+ P1sc) (tgtmap`shift/+ P2sc) XM=>GMsc.

- : fresh-update-preserves-efxmap2tgtmap-converse
    T1 (efxmap`fresh/< GT1) U1 tgtmap`fresh/0 tgtmap`update/0 XM=>GM
    <- nat`gt-implies-plus GT1 _ P1
    <- efxmap`update/<-inversion U1 P1 EQ1
    <- efxmap`eq-symmetric EQ1 EQ1s
    <- efxmap2tgtmap-respects-eq T1 EQ1s tgtmap`eq/ T2
    <- efxmap2tgtmap-inversion T2 nat`eq/ _ T3
    <- nat`plus-swap-succ P1 P1s
    <- nat`plus-commutative P1s P1sc
    <- shift-preserves-efxmap2tgtmap* 
      T3 (efxmap`shift/+ P1sc) tgtmap`shift/0 XM=>GM.

- : fresh-update-preserves-efxmap2tgtmap-converse
    T1 (efxmap`fresh/< GT1) U1 (tgtmap`fresh/> _ P2) U2 XM=>GM
    <- nat`gt-implies-plus GT1 _ P1
    <- efxmap`update/<-inversion U1 P1 EQ1
    <- tgtmap`update/>-inversion U2 P2 _ U2R EQ2
    <- efxmap`eq-symmetric EQ1 EQ1s
    <- tgtmap`eq-symmetric EQ2 EQ2s
    <- efxmap2tgtmap-respects-eq T1 EQ1s EQ2s T2
    <- nat`plus-implies-gt P2 nat`eq/ N1>N3
    <- nat`ne-efxmap2tgtmap-implies-false (nat`ne/> N1>N3) T2 V
    <- false-implies-efxmap2tgtmap V XM=>GM.

fresh-update-preserves-efxmap2tgtmap-converse/>
  : efxmap2tgtmap (efxmap/+ N1 M XM) (tgtmap/+ N2 S GM)
    -> nat`plus (s C1) N1 N
    -> efxmap`fresh XMs C1
    -> efxmap`update XMs C1 M1 XM
    -> nat`plus (s C2) N2 N
    -> tgtmap`fresh GMs C2
    -> tgtmap`update GMs C2 S1 GM
    -> nat`compare C1 C2 CC
    -> efxmap2tgtmap (efxmap/+ N1 M XMs) (tgtmap/+ N2 S GMs)
    -> type.
%mode fresh-update-preserves-efxmap2tgtmap-converse/>
+T1 +P1 +FS1 +U1 +P2 +FS2 +U2 +C -T2.

- : fresh-update-preserves-efxmap2tgtmap-converse/>
    T1 P1 F1 U1 P2 F2 U2 nat`compare/= XM=>GM
    <- nat`plus-left-cancels P1 P2 nat`eq/ nat`eq/ N1=N2
    <- efxmap2tgtmap-inversion T1 N1=N2 DM T1P
    <- fresh-update-preserves-efxmap2tgtmap-converse T1P F1 U1 F2 U2 T2
    <- tgtmap`map/+-preserves-eq N1=N2 set`eq/ tgtmap`eq/ EQ
    <- efxmap2tgtmap-respects-eq (efxmap2tgtmap/+ DM T2) efxmap`eq/ EQ XM=>GM.

- : fresh-update-preserves-efxmap2tgtmap-converse/>
    T1 C1+1+N1=N _ _ C2+1+N2=N _ _ (nat`compare/< C2>C1) XM=>GM
    <- gt-implies-plus C2>C1 D D+1+C1=C2
    <- plus-swap-succ C2+1+N2=N C2+N2+1=N
    <- plus-swap-succ D+1+C1=C2 D+C1+1=C2
    <- plus-commutative D+C1+1=C2 C1+1+D=C2
    <- plus-associative C1+1+D=C2 C2+N2+1=N X D+N2+1=X C1+1+X=N
    <- plus-left-cancels C1+1+X=N C1+1+N1=N nat`eq/ nat`eq/ X=N1
    <- plus-swap-succ-converse D+N2+1=X D+1+N2=X
    <- plus-respects-eq D+1+N2=X nat`eq/ nat`eq/ X=N1 D+1+N2=N1
    <- nat`plus-implies-gt D+1+N2=N1 nat`eq/ N1>N2
    <- nat`ne-efxmap2tgtmap-implies-false (nat`ne/> N1>N2) T1 V
    <- false-implies-efxmap2tgtmap V XM=>GM.

- : fresh-update-preserves-efxmap2tgtmap-converse/>
    T1 P1 F1 U1 P2 F2 U2 (nat`compare/> C1>C2) XM=>GM
    <- nat`succ-preserves-gt C1>C2 SC1>SC2
    <- nat`plus-left-reverses-gt P1 P2 SC1>SC2 nat`eq/ N2>N1
    <- nat`ne-efxmap2tgtmap-implies-false (nat`ne/< N2>N1) T1 V
    <- false-implies-efxmap2tgtmap V XM=>GM.

- : fresh-update-preserves-efxmap2tgtmap-converse XM=>GM
    (efxmap`fresh/> FS1 P1) U1 (tgtmap`fresh/> FS2 P2) U2 XM=>GMsc
    <- efxmap`update/>-inversion U1 P1 _ U1s EQ1
    <- tgtmap`update/>-inversion U2 P2 _ U2s EQ2
    <- efxmap`eq-symmetric EQ1 EQ1s
    <- tgtmap`eq-symmetric EQ2 EQ2s
    <- efxmap2tgtmap-respects-eq XM=>GM EQ1s EQ2s XM=>GMs
    <- nat`compare-total C
    <- fresh-update-preserves-efxmap2tgtmap-converse/>
      XM=>GMs P1 FS1 U1s P2 FS2 U2s C XM=>GMsc.

- : fresh-update-preserves-efxmap2tgtmap-converse
    T1 (efxmap`fresh/> _ P1) U1 tgtmap`fresh/0 tgtmap`update/0 XM=>GM
    <- efxmap`update/>-inversion U1 P1 _ U1R EQ1
    <- efxmap`eq-symmetric EQ1 EQ1s
    <- efxmap2tgtmap-respects-eq T1 EQ1s tgtmap`eq/ T2
    <- nat`plus-implies-gt P1 nat`eq/ N1>N2
    <- nat`ne-efxmap2tgtmap-implies-false (nat`ne/< N1>N2) T2 V
    <- false-implies-efxmap2tgtmap V XM=>GM.

- : fresh-update-preserves-efxmap2tgtmap-converse
    T1 (efxmap`fresh/> _ P1) U1 (tgtmap`fresh/< GT2) U2 XM=>GM
    <- efxmap`update/>-inversion U1 P1 _ U1R EQ1
    <- nat`gt-implies-plus GT2 _ P2
    <- tgtmap`update/<-inversion U2 P2 EQ2
    <- efxmap`eq-symmetric EQ1 EQ1s
    <- tgtmap`eq-symmetric EQ2 EQ2s
    <- efxmap2tgtmap-respects-eq T1 EQ1s EQ2s T2
    <- nat`plus-implies-gt P1 nat`eq/ N2>N1
    <- nat`ne-efxmap2tgtmap-implies-false (nat`ne/< N2>N1) T2 V
    <- false-implies-efxmap2tgtmap V XM=>GM.

%worlds () (fresh-update-preserves-efxmap2tgtmap-converse _ _ _ _ _ _)
(fresh-update-preserves-efxmap2tgtmap-converse/> _ _ _ _ _ _ _ _ _).

%total (F2a F2b) 
(fresh-update-preserves-efxmap2tgtmap-converse _ F1a _ F2a _ _)
(fresh-update-preserves-efxmap2tgtmap-converse/> _ _ F1b _ _ F2b _ _ _).


tgtmap2efxmap-implies-efxmap2tgtmap
  : tgtmap2efxmap GM X XM
    -> efxmap2tgtmap XM GM
    -> type.
%mode tgtmap2efxmap-implies-efxmap2tgtmap +T1 -T2.

- : tgtmap2efxmap-implies-efxmap2tgtmap 
    tgtmap2efxmap/0 efxmap2tgtmap/0.

- : tgtmap2efxmap-implies-efxmap2tgtmap 
    (tgtmap2efxmap/+ S=>M GM=>XM) (efxmap2tgtmap/+ DM-M=S XM=>GM)
    <- tgtmap2efxmap-implies-efxmap2tgtmap GM=>XM XM=>GM
    <- set2inner-efxmap-implies-domain S=>M DM-M=S.

%worlds () (tgtmap2efxmap-implies-efxmap2tgtmap _ _).
%total (A) (tgtmap2efxmap-implies-efxmap2tgtmap A _).
