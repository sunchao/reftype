%%% Subtyping Rules


%%% ======================= Abbreviations =====================================

%% We use a special natural number z to represent the special
%% shared target: world.all. There's a one-to-one mapping between
%% z and (pair/ z z).

%abbrev shared-tgt : nat = nat`z.


%%% ======================= Definitions =======================================

%% Environment - a pair of unique objects and capabilities

env : type.

env/ : set -> set -> env.


env`eq : env -> env -> type.

env`eq/ : env`eq V V.


%% Spliting a capability set into two subsets.

set`split : set -> set -> set -> type.

set`split/ :
    set`disjoint S1 S2 ->
    set`union S1 S2 S ->
  set`split S S1 S2.

%abbrev set`combine : set -> set -> set -> type = [S1][S2][S] set`split S S1 S2.


%%% Combining environments

env`combine : env -> env -> env -> type.

env`combine/ :
    set`combine U0 U1 U ->
    set`combine M0 M1 M ->
  env`combine (env/ U0 M0) (env/ U1 M1) (env/ U M).


make-tgts-and-caps : set -> targets -> nat -> targets -> set -> type.

%%% When the result is shared, we can claim back the encumbered capabilities.
make-tgts-and-caps/shared :
    set`split M0 (set/1 shared-tgt) M1 ->
  make-tgts-and-caps M0 targets/shared _
    (targets/unique set/0 (set/1 shared-tgt) false) M1.

make-tgts-and-caps/fresh :
  make-tgts-and-caps M0 targets/fresh _
    (targets/unique set/0 set/0 true) M0.

make-tgts-and-caps/unique :
    set+nat2set U F M2 ->
    set`combine M1 M2 M ->
    set`split M0 M2 M3 ->
  make-tgts-and-caps M0 (targets/unique U M1 W) F (targets/unique set/0 M W) M3.


% Consider field annotation, and returns either the input unique
% targets, or a shared targets. (no borrowed targets since field
% cannot be borrowed).

consider-ftype : targets -> set -> annot -> targets -> set -> type.

%%% We return the capabilities encumbered in M now, but for the fresh capability
%%% represented by W, we just throw it away.
consider-ftype/shared :
    set`combine M M0 M1 ->
  consider-ftype (targets/unique set/0 M W) M0 annot/shared targets/shared M1.

consider-ftype/unique : consider-ftype G M annot/unique G M.


%%% Converting between ty and reftype

ty2reftype : nat -> ty -> reftype -> type.

ty2reftype/shared : ty2reftype L (ty/ NN annot/shared C) (reftype/ NN C targets/shared).

ty2reftype/borrow : ty2reftype L (ty/ NN annot/borrow C)
    (reftype/ NN C (targets/unique (set/1 L) set/0 false)).

ty2reftype/unique : ty2reftype L (ty/ NN annot/unique C)
    (reftype/ NN C (targets/unique (set/1 L) set/0 false)).


reftype2ty : reftype -> ty -> type.

reftype2ty/shared : reftype2ty (reftype/ NN C targets/shared) (ty/ NN annot/shared C).

%% TODO: maybe annot/borrow more making sense?
reftype2ty/unique : reftype2ty (reftype/ NN C (targets/unique _ _ _)) (ty/ NN annot/unique C).


% sub-annotation rule with side effects.
% `targets`: the targets on the LHS
% `env`: the input environment, we need to remove consumed caps from it.
% `set`: the field set on LHS, used when consuming a whole object
% `annot`: the annotation on the RHS
% `env`: the output environment

%abbrev empty-env = (env/ set/0 set/0).

sub-annot : clsmap -> set -> targets -> env -> ty -> env -> env -> type.

%%% TODO: change leq + remove to split.
sub-annot/unique :
    clsmap`lookup CM C FM ->
    fldmap`domain FM FS ->
    set+set2set S FS M2 ->
    set`split M0 M2 M3 ->
    set`leq S U0 ->
    set`remove U0 S U1 ->
    not-borrow A ->
  sub-annot CM _ (targets/unique S _ _) (env/ U0 M0) (ty/ _ A C) (env/ S M2) (env/ U1 M3).

sub-annot/fresh :
    not-borrow A ->
  sub-annot CM _ targets/fresh (env/ U0 M0) (ty/ _ A C) (env/ set/0 set/0) (env/ U0 M0).

%%% unique => borrow, we don't need to pass down the encumbered permissions.

sub-annot/borrow :
    set+set2set S FS M2 ->
    set`split M0 M2 M3 ->
  sub-annot _ FS (targets/unique S _ _) (env/ U0 M0) (ty/ _ annot/borrow _)
    (env/ set/0 M2) (env/ U0 M3).

sub-annot/shared : sub-annot _ _ targets/shared V (ty/ _ annot/shared _) empty-env V.


subtype : clsmap -> set -> reftype -> env -> ty -> env -> env -> type.

subtype/ :
    sub-nonnull NN1 NN2 ->
    sub-annot CM FS G V1 (ty/ NN2 A2 C) V2 V3 ->
  subtype CM FS (reftype/ NN1 C G) V1 (ty/ NN2 A2 C) V2 V3.


%%% ======================= Theorems =======================================

%theorem env`eq-inversion
  : forall* {U1} {M1} {U2} {M2}
    forall {EQ: env`eq (env/ U1 M1) (env/ U2 M2)}
    exists {EQ: set`eq U1 U2} {EQ: set`eq M1 M2}
    true.

- : env`eq-inversion env`eq/ set`eq/ set`eq/.

%worlds (gtermvar) (env`eq-inversion _ _ _).
%total { } (env`eq-inversion _ _ _).


%theorem env`eq-preserves-eq
  : forall* {U1} {M1} {U2} {M2}
    forall {EQ: set`eq U1 U2} {EQ: set`eq M1 M2}
    exists {EQ: env`eq (env/ U1 M1) (env/ U2 M2)}
    true.

- : env`eq-preserves-eq set`eq/ set`eq/ env`eq/.

%worlds (gtermvar) (env`eq-preserves-eq _ _ _).
%total { } (env`eq-preserves-eq _ _ _).


%theorem set`split-implies-disjoint-union
  : forall* {CS} {CS1} {CS2}
    forall {SP: set`split CS CS1 CS2}
    exists {CS1^CS2: set`disjoint CS1 CS2} {CS1+CS2=CS: set`union CS1 CS2 CS}
    true.

- : set`split-implies-disjoint-union (set`split/ D U) D U.

%worlds (gtermvar) (set`split-implies-disjoint-union _ _ _).
%total { } (set`split-implies-disjoint-union _ _ _).


%theorem set`split-implies-leq
  : forall* {CS} {CS1} {CS2}
    forall {SP: set`split CS CS1 CS2}
    exists {CS1<=CS: set`leq CS1 CS} {CS2<=CS: set`leq CS2 CS}
    true.

- : set`split-implies-leq (set`split/ _ U) L1 L2
    <- set`union-implies-leq U L1 L2.

%worlds (gtermvar) (set`split-implies-leq _ _ _).
%total { } (set`split-implies-leq _ _ _).


%theorem set`split-respects-eq
  : forall* {M} {MP} {M1} {M1P} {M2} {M2P}
    forall {M-M1=M2: set`split M M1 M2}
    {M=MP: set`eq M MP}
    {M1=M1P: set`eq M1 M1P}
    {M2=M2P: set`eq M2 M2P}
    exists {M-M1=M2: set`split MP M1P M2P}
    true.

%worlds () (set`split-respects-eq _ _ _ _ _).
%trustme %total { } (set`split-respects-eq _ _ _ _ _).


%theorem set`split-unique
  : forall* {M} {MP} {M1} {M1P} {M2} {M2P}
    forall {M-M1=M2: set`split M M1 M2}
    {MP-M1P=M2P: set`split MP M1P M2P}
    {M=MP: set`eq M MP}
    {M1=M1P: set`eq M1 M1P}
    exists {M2=M2P: set`eq M2 M2P}
    true.

- : set`split-unique (set`split/ M1^M2 M1+M2=M)
    (set`split/ M1P^M2P M1P+M2P=MP) M=MP M1=M1P M2=M2P
    <- set`union-commutative M1+M2=M M2+M1=M
    <- set`union-commutative M1P+M2P=MP M2P+M1P=MP
    <- set`disjoint-symmetric M1^M2 M2^M1
    <- set`disjoint-symmetric M1P^M2P M2P^M1P
    <- set`disjoint-union-implies-remove M2+M1=M M2^M1 M-M1=M2
    <- set`disjoint-union-implies-remove M2P+M1P=MP M2P^M1P MP-M1P=M2P
    <- set`remove-unique M-M1=M2 MP-M1P=M2P M=MP M1=M1P M2=M2P.

%worlds () (set`split-unique _ _ _ _ _).
%total { } (set`split-unique _ _ _ _ _).


%theorem set`combine-unique
  : forall* {S0} {S1} {S} {S0P} {S1P} {SP}
    forall {S0+S1=S: set`combine S0 S1 S}
    {S0P+S1P=SP: set`combine S0P S1P SP}
    {SE: set`eq S0 S0P} {SE: set`eq S1 S1P}
    exists {SE: set`eq S SP}
    true.

%worlds (gtermvar) (set`combine-unique _ _ _ _ _).
%trustme %total { } (set`combine-unique _ _ _ _ _).


%theorem set`split-empty
  : forall* {M} {M1}
    forall {M-E=M1: set`split M set/0 M1}
    exists {M1=M: set`eq M1 M}
    true.

%worlds () (set`split-empty _ _).
%trustme %total { } (set`split-empty _ _).


%theorem set`combine-empty-right
  : forall* {M} {M1}
    forall {M+0=M1: set`combine M set/0 M1}
    exists {M1=M: set`eq M M1}
    true.

%worlds (gtermvar) (set`combine-empty-right _ _).
%trustme %total { } (set`combine-empty-right _ _).


%theorem set`split-implies-leq-remove
  : forall* {S0} {S1} {S2}
    forall {SP: set`split S0 S1 S2}
    exists {S1<=S0: set`leq S1 S0}
    {S0-S1=S2: set`remove S0 S1 S2}
    true.

%worlds (gtermvar) (set`split-implies-leq-remove _ _ _).
%trustme %total { } (set`split-implies-leq-remove _ _ _).


%theorem set`can-split-empty*
  : forall {M}
    exists {SP: set`split M set/0 M}
    true.

- : set`can-split-empty* _ (set`split/ set`disjoint/L set`union/L).

%worlds (gtermvar) (set`can-split-empty* _ _).
%total { } (set`can-split-empty* _ _).

%abbrev set`can-split-empty = set`can-split-empty* _.