%%% $Id: clsmap-base.elf,v 1.1 2013/09/19 14:48:18 csun Exp csun $
%%% nat => fields

%{%
#define data fldmap
BEGIN_ELF
%abbrev fldmap`leq = fldmap`eq.
%abbrev fldmap`false-implies-leq = fldmap`false-implies-eq.
%abbrev fldmap`leq-reflexive = fldmap`eq-reflexive.
%abbrev fldmap`leq-transitive = fldmap`eq-transitive.


%theorem fldmap`leq-anti-symmetric :
        forall* {M1} {M2}
        forall  {L12: fldmap`leq M1 M2} {L21: fldmap`leq M2 M1}
        exists  {E: fldmap`eq M1 M2}
        true.

- : fldmap`leq-anti-symmetric E _ E.

%worlds () (fldmap`leq-anti-symmetric _ _ _).
%total { } (fldmap`leq-anti-symmetric _ _ _).


%theorem fldmap`leq-respects-eq :
        forall* {M1} {M2} {M3} {M4}
        forall  {L1: fldmap`leq M1 M2}
                {E1: fldmap`eq M1 M3}
                {E2: fldmap`eq M2 M4}
        exists  {L3: fldmap`leq M3 M4}
        true.

- : fldmap`leq-respects-eq L _ _ L.

%worlds () (fldmap`leq-respects-eq _ _ _ _).
%total { } (fldmap`leq-respects-eq _ _ _ _).

#include "map-base.elf"
#include "map-leq.elf"
#include "map-domain.elf"
END_ELF
%}%


%%% wellformed clsmap (without any empty fldmap)

wf-fldmap : nat -> fldmap -> unit -> type.

wf-fldmap/ : wf-fldmap _ M _ <- fldmap`size M (s _).

%{%
#define relation wf-fldmap
#define allrelation wf
#define arg unit
BEGIN_ELF
#include "map-all.elf"
END_ELF
#undef arg
#undef allrelation
#undef relation
#undef data
%}%


%%% exports

%abbrev clsmap = map.
%abbrev clsmap/0 = map/0.
%abbrev clsmap/+ = map/+.