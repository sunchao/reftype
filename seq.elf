%%% Helper Theorems about Seq

%theorem reftyping-ok/seq/helper
  : forall* {CM} {PM} {B} {RT} {H0} {H1} {K1} {K2} {Out}
    forall {R=>O: result2output CM PM B (result/expr RT (env/ H1 K1)) Out}
    {RPC: restore-cap-targets (env/ H0 K1) RT (env/ H0 K2)}
    exists {PiB} {PiH1} {PiK2}
    {B=>PiB: cxt2perm PM B PiB}
    {H1=>PiH1: make-encumbered CM PM B H1 PiH1}
    {K2=>PiK2: capset2perm CM PM B K2 PiK2}
    {TRANS: transform Out
            (output/exists [x]
              (output/expr x
                (combine PiB (combine PiH1 PiK2))))}
    true.

- : reftyping-ok/seq/helper
    (result2output/expr B=>PiB (env2input/ H1=>PiH1 (K1=>PiK1:capset2perm CM PM B K1 PiK1))
      (reftype2perm/borrow _ set`size/0 T2PF S2GF))
    (restore-cap-targets/unique (K1+K=K2:set`combine K1 set/0 K2))
    PiB PiH1 PiK1 B=>PiB H1=>PiH1 K2=>PiK1
    (transform/trans
      (transform/inside [o]
        (transform/inside [r]
          (transform/inside [p]
            (transform/implies
              (implies/trans
                (implies/identity)
                (implies/combine implies/reflexive
                  (implies/trans
                    (implies/combine
                      (implies/trans
                        (implies/combine (IMP2 o) (IMP1 o))
                        (implies/identity))
                      (implies/reflexive))
                    (implies/commute-identity))))))))
      (transform/inside [o]
        (transform/trans
          (transform/rem-unused)
          (transform/rem-unused))))
    <- set`combine-empty-right K1+K=K2 K1=K2
    <- ({x} set2cond-implies-empty (S2GF x) (IMP1 x))
    <- not-unique-perm-implies-empty T2PF not-unique/borrow IMP2
    <- capset2perm-respects-eq K1=>PiK1 clsmap`eq/ predmap`eq/ cxt`eq/ K1=K2
      permission`eq/ K2=>PiK1.

- : reftyping-ok/seq/helper
    (result2output/expr B=>PiB (env2input/ H1=>PiH1 (K1=>PiK1:capset2perm CM PM B K1 PiK1))
      (reftype2perm/shared T2PF))
    (restore-cap-targets/shared)
    PiB PiH1 PiK1 B=>PiB H1=>PiH1 K1=>PiK1
    (transform/trans
      (transform/inside [o]
        (transform/inside [r]
          (transform/inside [p]
            (transform/implies
              (implies/trans
                (implies/identity)
                (implies/combine implies/reflexive
                  (implies/trans
                    (implies/combine (IMP o) implies/reflexive)
                    (implies/commute-identity))))))))
      (transform/inside [o]
        (transform/trans
          (transform/rem-unused)
          (transform/rem-unused))))
    <- not-unique-perm-implies-empty T2PF not-unique/shared IMP.

- : reftyping-ok/seq/helper
    (result2output/expr B=>PiB (env2input/ H1=>PiH1 (K1=>PiK1:capset2perm CM PM B K1 PiK1))
      (reftype2perm/fresh T2PF))
    (restore-cap-targets/fresh)
    PiB PiH1 PiK1 B=>PiB H1=>PiH1 K1=>PiK1
    (transform/trans
      (transform/inside [o]
        (transform/inside [r]
          (transform/inside [p]
            (transform/trans
              (transform/implies
                (implies/trans
                  (implies/identity)
                  (implies/reorder)))
              (transform/drop)))))
      (transform/inside [o]
        (transform/trans
          (transform/rem-unused)
          (transform/rem-unused)))).

- : reftyping-ok/seq/helper
    (result2output/expr B=>PiB (env2input/ H1=>PiH1 (K1=>PiK1:capset2perm CM PM B K1 PiK1))
      (reftype2perm/unique _ T2PF S2GF K=>PiK))
    (restore-cap-targets/unique K1+K=K2)
    PiB PiH1 _ B=>PiB H1=>PiH1 K2=>PiK2
    (transform/trans
      (transform/inside [o]
        (transform/inside [r]
          (transform/inside [p]
            (transform/implies
              (implies/trans4
                (implies/identity)
                (implies/combine implies/reflexive
                  (implies/combine
                    (implies/trans
                      (implies/combine
                        (implies/trans
                          (implies/cond-inner
                            (bimplies/reflexive)
                            (bimplies/reflexive)
                            (implies/reflexive)
                            (IMP1 o))
                          (implies/cond-equal))
                        (implies/linear-modus-ponens))
                      (implies/commute-identity))
                    (implies/reflexive)))
                (implies/reorder)
                (implies/equiv
                  (equiv/transitive
                    (equiv/reorder)
                    (equiv/combine equiv/reflexive
                      (equiv/transitive
                        (equiv/reorder)
                        (equiv/combine equiv/reflexive
                          (equiv/transitive equiv/commute PiK1+PiK<=>PiK2)))))))))))
      (transform/inside [o]
        (transform/trans
          (transform/rem-unused)
          (transform/rem-unused))))
    <- ({x} set2cond-implies-empty (S2GF x) (IMP1 x))
    <- set`split-implies-permission-combine-converse K1+K=K2 K1=>PiK1 K=>PiK
      PiK2 K2=>PiK2 PiK1+PiK<=>PiK2.

- : reftyping-ok/seq/helper
    (result2output/expr B=>PiB (env2input/ H1=>PiH1 (K1=>PiK1:capset2perm CM PM B K1 PiK1))
      (reftype2perm/unique+fresh T2PF S2GF K=>PiK))
    (restore-cap-targets/unique K1+K=K2)
    PiB PiH1 _ B=>PiB H1=>PiH1 K2=>PiK2
    (transform/trans
      (transform/inside [o]
        (transform/inside [r]
          (transform/inside [p]
            (transform/trans
              (transform/implies
                (implies/trans5
                  (implies/identity)
                  (implies/combine implies/reflexive
                    (implies/combine
                      (implies/trans
                        (implies/combine
                          (implies/trans
                            (implies/cond-inner
                              (bimplies/reflexive)
                              (bimplies/reflexive)
                              (implies/reflexive)
                              (IMP1 o))
                            (implies/cond-equal))
                          (implies/linear-modus-ponens))
                        (implies/commute-identity))
                      (implies/reflexive)))
                  (implies/reorder)
                  (implies/equiv
                    (equiv/transitive
                      (equiv/reorder)
                      (equiv/combine equiv/reflexive
                        (equiv/transitive
                          (equiv/reorder)
                          (equiv/combine equiv/reflexive
                            (equiv/transitive equiv/commute
                              (equiv/transitive
                                (equiv/associate)
                                (equiv/combine PiK1+PiK<=>PiK2 equiv/reflexive))))))))
                  (implies/equiv
                    (equiv/transitive
                      (equiv/combine equiv/reflexive
                        (equiv/combine equiv/reflexive
                          (equiv/commute)))
                      (equiv/roll3)))))
              (transform/drop)))))
            (transform/inside [o]
        (transform/trans
          (transform/rem-unused)
          (transform/rem-unused))))
    <- ({x} set2cond-implies-empty (S2GF x) (IMP1 x))
    <- set`split-implies-permission-combine-converse K1+K=K2 K1=>PiK1 K=>PiK
      PiK2 K2=>PiK2 PiK1+PiK<=>PiK2.

%worlds (gtermvar) (reftyping-ok/seq/helper _ _ _ _ _ _ _ _ _).
%total { } (reftyping-ok/seq/helper _ _ _ _ _ _ _ _ _).