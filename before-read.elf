% Transformations before reading a field.


%theorem cap2frac-leq-implies-implies*
  : forall* {X1} {X2} {Q1} {Q2} {Pi1:object -> permission} {Pi2}
    forall {X2Q: cap2frac X1 Q1}
    {X1<=X2: cap`leq X2 X1}
    {X2Q: cap2frac X2 Q2}
    exists {IMP: {x} implies
      (scale Q1 (Pi1 x) ,
        (unitperm (encumbered (scale Q1 (Pi1 x)) Pi2)))
      (scale Q2 (Pi1 x) ,
        (unitperm (encumbered (scale Q2 (Pi1 x)) Pi2)))}
    true.

- : cap2frac-leq-implies-implies* cap2frac/read (cap`geq/= cap`eq/)
    cap2frac/read ([_] implies/reflexive).

- : cap2frac-leq-implies-implies* cap2frac/write (cap`geq/= cap`eq/)
    cap2frac/write ([_] implies/reflexive).

- : cap2frac-leq-implies-implies* cap2frac/write (cap`geq/> cap`grt/wr)
    cap2frac/read ([_] implies/trans3
      (implies/combine
        (implies/trans4
          (implies/equiv (equiv/symmetric equiv/identity))
          (implies/combine
            (implies/equiv
              (equiv/symmetric (equiv/add 1/2+1/2=1)))
            (implies/trans5
              (implies/equiv (equiv/symmetric equiv/one))
              (implies/scale implies/self-implication)
              (implies/scale-distribute-encumbered)
              (implies/equiv-encumbered
                (equiv/symmetric (equiv/add 1/2+1/2=1))
                (equiv/reflexive))
              (implies/combine-assoc-encumbered)))
          (implies/equiv (equiv/symmetric equiv/associate))
          (implies/combine
            (implies/reflexive)
            (implies/linear-modus-ponens)))
        (implies/reflexive))
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/combine
        (implies/reflexive)
        (implies/chain-implication))).

%worlds (objvar) (cap2frac-leq-implies-implies* _ _ _ _).
%total {} (cap2frac-leq-implies-implies* _ _ _ _).


%theorem combine-fldperm/L1
  : forall* {CM} {PM} {B} {Pi} {N} {O} {A} {C}
    forall {B=>PiB: cxt2perm CM PM B Pi}
    {BL: cxt`lookup B N (cxt-info/ O (ty/ nn/yes A C))}
    exists {IMP: implies Pi (combine (unitperm (nonlinear (neg (objequal O null)))) Pi)}
    true.

- : combine-fldperm/L1 B=>Pi
    (BL: cxt`lookup _ _ (cxt-info/ O (ty/ _ annot/shared _)))
    (implies/trans6
      (implies/equiv EQV)
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/combine implies/duplicate implies/reflexive)
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/equiv (equiv/combine equiv/reflexive equiv/associate))
      (implies/combine implies/reflexive (implies/equiv (equiv/symmetric EQV))))
    <- cxt`lookup-implies-fresh-update BL _ FS UD
    <- cxt2perm/U-inversion B=>Pi FS UD _ BP=>PiBP _
      (ty2perm2/shared (ty2perm/ PML nn2perm/yes annot2perm/shared)) EQV.

- : combine-fldperm/L1 B=>Pi
    (BL: cxt`lookup _ _ (cxt-info/ O (ty/ _ annot/borrow _)))
    (implies/trans6
      (implies/equiv EQV)
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/combine implies/duplicate implies/reflexive)
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/equiv (equiv/combine equiv/reflexive equiv/associate))
      (implies/combine implies/reflexive (implies/equiv (equiv/symmetric EQV))))
    <- cxt`lookup-implies-fresh-update BL _ FS UD
    <- cxt2perm/U-inversion B=>Pi FS UD _ BP=>PiBP _
      (ty2perm2/borrow (ty2perm/ PML nn2perm/yes annot2perm/borrow)) EQV.

- : combine-fldperm/L1 B=>Pi
    (BL: cxt`lookup _ _ (cxt-info/ O (ty/ _ annot/unique _)))
    (implies/trans6
      (implies/equiv EQV)
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/combine implies/duplicate implies/reflexive)
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/equiv (equiv/combine equiv/reflexive equiv/associate))
      (implies/combine implies/reflexive (implies/equiv (equiv/symmetric EQV))))
    <- cxt`lookup-implies-fresh-update BL _ FS UD
    <- cxt2perm/U-inversion B=>Pi FS UD _ BP=>PiBP _
      (ty2perm2/unique (ty2perm/ PML nn2perm/yes annot2perm/borrow)) EQV.

%worlds (objvar) (combine-fldperm/L1 _ _ _).
%total { } (combine-fldperm/L1 _ _ _).


%theorem combine-fldperm/L2
  : forall* {O1} {O2} {Q1} {F1} {PF1} {Pi}
    forall {EQ: object`eq O1 O2}
    exists {IMP: implies
                 (combine (unitperm (nonlinear (neg (objequal O2 null))))
                   (combine
                     (unitperm
                       (conditional (objequal O1 null) empty
                         (scale (fraction/ Q1)
                           (unitperm
                             (precise-exists O1 F1
                               ([x1:gterm objectk] PF1 x1))))))
                     (unitperm
                       (encumbered
                         (unitperm
                           (conditional (objequal O1 null) empty
                             (scale (fraction/ Q1)
                               (unitperm
                                 (precise-exists O1 F1
                                   ([x2:gterm objectk]
                                     PF1 x2))))))
                         Pi))))
                 (combine (scale (fraction/ Q1)
                            (unitperm
                              (precise-exists O1 F1
                                ([x1:gterm objectk] PF1 x1))))
                   (unitperm
                     (encumbered
                       (scale (fraction/ Q1)
                         (unitperm
                           (precise-exists O1 F1
                             ([x2:gterm objectk]
                               PF1 x2))))
                       Pi)))}
    true.

- : combine-fldperm/L2 object`eq/
    (implies/trans5
      (implies/combine implies/duplicate implies/reflexive)
      (implies/equiv (equiv/symmetric equiv/associate))
      (implies/equiv (equiv/combine equiv/reflexive equiv/roll2))
      (implies/equiv equiv/associate)
      (implies/combine
        (implies/trans
          (implies/combine implies/reflexive implies/cond-neg)
          (implies/cond-elim))
        (implies/cond-assoc-encumbered/false))).

%worlds (objvar) (combine-fldperm/L2 _ _).
%total { } (combine-fldperm/L2 _ _).


%theorem combine-fldperm/L3
  : forall* {OP} {O1} {F1} {PF1} {PF} {Q} {F} {Pi} {Q1}
    forall {OP=O1: {x} object`eq (OP x) O1}
    {Q=Q1: rat`eq Q Q1}
    {F=F1: nat`eq F F1}
    {PE: {x} permission`eq (PF x) (PF1 x)}
    exists {IMP: {x} implies
                 (combine (unitperm (nonlinear (objequal x (OP x))))
                   (combine
                     (scale (fraction/ Q1)
                       (unitperm
                         (precise-exists O1 F1
                           ([x1:gterm objectk] PF1 x1))))
                     (unitperm
                       (encumbered
                         (scale (fraction/ Q1)
                           (unitperm
                             (precise-exists O1 F1
                               ([x2:gterm objectk] PF1 x2)))) Pi))))
                 (combine
                   (scale (fraction/ Q)
                     (unitperm
                       (precise-exists x F ([x1:gterm objectk] PF x1))))
                   (unitperm
                     (encumbered
                       (scale (fraction/ Q)
                         (unitperm
                           (precise-exists x F
                             ([x1:gterm objectk] PF x1)))) Pi)))}
    true.

- : combine-fldperm/L3 ([_] object`eq/) (rat`eq/:rat`eq Q1 _) nat`eq/ ([_] permission`eq/)
    ([x] implies/trans
      (implies/combine (implies/nonlinear bimplies/objequal-symmetric) implies/reflexive)
      (implies/objequal
        ([y] (combine
               (scale (fraction/ Q1)
                 (unitperm
                   (precise-exists y F1
                     ([x1:gterm objectk] PF1 x1))))
               (unitperm
                 (encumbered
                   (scale (fraction/ Q1)
                     (unitperm
                       (precise-exists y F1
                         ([x2:gterm objectk] PF1 x2)))) Pi)))))).

%worlds (objvar) (combine-fldperm/L3 _ _ _ _ _).
%total { } (combine-fldperm/L3 _ _ _ _ _).


%theorem combine-fldperm/L4
  : forall* {O1} {O2} {Q1} {F1} {PF1}
    forall {OE: object`eq O1 O2}
    exists {IMP: implies
                 (combine (unitperm (nonlinear (neg (objequal O2 null))))
                   (unitperm
                     (conditional (objequal O1 null) empty
                       (scale (fraction/ Q1)
                         (unitperm
                           (precise-exists O1 F1
                             ([x1:gterm objectk] PF1 x1)))))))
                 (scale (fraction/ Q1)
                   (unitperm
                     (precise-exists O1 F1
                       ([x1:gterm objectk] PF1 x1))))}
    true.

- : combine-fldperm/L4 object`eq/
    (implies/trans
      (implies/combine implies/reflexive implies/cond-neg)
      (implies/cond-elim)).

%worlds (objvar) (combine-fldperm/L4 _ _).
%total { } (combine-fldperm/L4 _ _).


%theorem combine-fldperm/L5
  : forall* {SP} {K} {S}
    forall {NM: set`not-member SP (s K)} {AD: set`add SP (s K) S}
    {SZ: set`size S (s z)}
    exists {E: set`eq SP set/0}
    true.

- : combine-fldperm/L5 set`not-member/0 set`update/0 (set`size/+ set`size/0) set`eq/.

- : combine-fldperm/L5 NM (set`update/= nat`eq/) _ E
    <- set`not-member-contradiction NM F
    <- set`false-implies-eq F E.

%worlds () (combine-fldperm/L5 _ _ _ _).
%total {} (combine-fldperm/L5 _ _ _ _).


%{
 This lemma says if we are given a set of facts about objequal in the form
 of x == r_i, and a set of packed field permissions about each object r_i
 in the facts, then we can get a single field permission for the object x,
 as well as permission for x encumbered in permission for the combined
 field permissions from each r_i.
}%

%theorem combine-fldperm
  : forall* {S} {B} {C} {CM} {PM} {FM} {X}
    {NN} {A} {FC} {G} {F} {M} {Pi} {PF} {Q} {PiB}
    forall {K} {Z: set`size S (s K)}
    {SC: same-class B S C}
    {B2G: cxt2perm CM PM B PiB}
    {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CML: clsmap`lookup CM C FM}
    {FML: fldmap`lookup FM F (ty/ NN A FC)}
    {S2S: set+nat2capmap S F X M}
    {X2Q: cap2frac X Q}
    {S2G: {x} set2cond B x S (G x)}
    {M2P: capmap2perm CM PM B M Pi}
    {T2PF: ty2perm PM (ty/ NN A FC) PF}
    {LNN: least-nonnull B S nn/yes}
    exists {IMP: {x} implies
                 (combine PiB (combine (G x) Pi))
                 (combine PiB
                   (combine (scale Q (unitperm (precise-exists x F PF)))
                     (unitperm (encumbered (scale Q (unitperm (precise-exists x F PF))) Pi))))}
    true.

- : combine-fldperm z SZ
    (same-class/U (B-SP-C:same-class B SP C)
      (N!<SP:set`not-member SP (s N)) (SP+N=S:set`add SP (s N) S)
      (BL:cxt`lookup B (s N) (cxt-info/ O (ty/ NN A C)))) B2P
    CM-CM CM2PM (CML:clsmap`lookup CM C FM)
    (FML:fldmap`lookup FM F (ty/ FNN FA FC))
    (S+F+X=>M:set+nat2capmap S F X M)
    (X2Q:cap2frac X (fraction/ Q)) (S=>G: {x} set2cond B x S (G x))
    (M=>Pi:capmap2perm CM PM B M Pi) (T2PF:ty2perm PM (ty/ FNN FA FC) PF)
    (B-S-NN:least-nonnull B S nn/yes)
    ([x] implies/trans7
      (implies/combine implies/reflexive
        (implies/combine (IMP1 x) (implies/equiv (equiv/symmetric EQV))))
      (implies/combine implies/reflexive
        (implies/trans3
          (implies/equiv equiv/commute)
          (implies/cond-push)
          (implies/cond-gen-inner)))
      (implies/cond-push)
      (implies/cond-inner
        (bimplies/reflexive)
        (bimplies/reflexive)
        (implies/trans4
          (implies/combine (implies/trans IMP5 (implies/equiv equiv/commute))
            (implies/reflexive))
          (implies/equiv (equiv/symmetric equiv/associate))
          (implies/combine implies/reflexive
            (implies/trans5
              (implies/combine implies/reflexive
                (implies/combine implies/reflexive
                  (implies/trans
                    (implies/equiv equiv/identity)
                    (implies/combine (implies/reflexive)
                      (implies/trans5
                        (implies/equiv (equiv/symmetric equiv/identity))
                        (implies/equiv equiv/commute)
                        (implies/combine implies/self-implication implies/reflexive)
                        (add-encumber)
                        (implies/equiv-encumbered equiv/reflexive (EQV)))))))
              (implies/equiv equiv/roll2)
              (implies/combine implies/reflexive IMP6)
              (IMP7 x)
              (implies/equiv (equiv/symmetric equiv/identity))))
          (implies/equiv equiv/associate))
        (implies/trans
          (implies/combine implies/reflexive
            (implies/trans3
              (implies/combine implies/reflexive
                (implies/trans
                  (implies/combine implies/reflexive (IMP3 x))
                  (implies/equiv equiv/commute)))
              (implies/equiv equiv/associate)
              (implies/combine
                (implies/trans3
                  (implies/combine implies/nonlinear2empty implies/reflexive)
                  (implies/equiv (equiv/transitive equiv/commute equiv/identity))
                  (implies/contradiction))
                (implies/equiv (equiv/symmetric equiv/identity)))))
          (implies/trans4
            (implies/combine (implies/trans IMP5 (implies/equiv equiv/commute))
              (implies/reflexive))
            (implies/equiv (equiv/symmetric equiv/associate))
            (implies/combine implies/reflexive
              (implies/trans5
                (implies/combine implies/reflexive
                  (implies/combine implies/reflexive
                    (implies/trans
                      (implies/equiv equiv/identity)
                      (implies/combine (implies/reflexive)
                        (implies/trans5
                          (implies/equiv (equiv/symmetric equiv/identity))
                          (implies/equiv equiv/commute)
                          (implies/combine implies/self-implication implies/reflexive)
                          (add-encumber)
                          (implies/equiv-encumbered equiv/reflexive (EQV)))))))
                (implies/equiv equiv/roll2)
                (implies/combine implies/reflexive IMP6)
                (IMP7 x)
                (implies/equiv (equiv/symmetric equiv/identity))))
            (implies/equiv equiv/associate))))
      (implies/cond-pull)
      (implies/combine implies/reflexive implies/cond-equal)
      (implies/equiv equiv/identity))
    <- set+nat2capmap/U-inversion S+F+X=>M N!<SP SP+N=S MP SP+F+X=>MP KP N+F=>KP MP+KP+X=M
    <- pair2nat-total-s _ _ K N+F=>K
    <- nat`succ-preserves-eq nat`eq/ SE
    <- pair-preserves-eq SE nat`eq/ PE
    <- pair2nat-unique N+F=>KP N+F=>K PE KP=K
    <- capmap`update-respects-eq MP+KP+X=M capmap`eq/ KP=K cap`eq/ capmap`eq/ MP+K+X=M
    <- ({x} set2cond/U-inversion (S=>G x) N!<SP SP+N=S (GP x) (SP=>GP x) _ TP (BLP x)
         (IMP1 x) (IMP2 x))
    <- set+nat2capmap-preserves-fresh SP+F+X=>MP N!<SP N+F=>K K!<MP
    <- capmap2perm/U-inversion M=>Pi K!<MP MP+K+X=M _ F1 N1+F1=>K O1 NN1 A1 C1 BL1
      PF1 (create-fldperm/ CML1 FML1 T2PF1) (fraction/ Q1) X2Q1 PiP MP=>PiP EQV
    <- least-nonnull/U-inversion B-S-NN N!<SP SP+N=S O2 _ A2 C2 BL2
      (nonnull`leq/= nonnull`eq/) B-SP-NN
    <- combine-fldperm/L5 N!<SP SP+N=S SZ SP=E
    <- ({x} set2cond-implies (SP=>GP x) set2cond/0 object`eq/ SP=E (IMP3 x) (IMP4 x))
    <- set+nat2capmap-unique SP+F+X=>MP set+nat2capmap/0 SP=E nat`eq/ cap`eq/ MP=E
    <- capmap2perm-equiv MP=>PiP capmap2perm/0 clsmap`eq/ predmap`eq/ cxt`eq/ MP=E EQV2
    <- cap2frac-unique X2Q X2Q1 cap`eq/ Q=Q1
    <- nat2pair-unique N1+F1=>K N+F=>K nat`eq/ PAIR-E
    <- pair-eq-implies-eq PAIR-E N1=N F1=F
    <- nat`eq-symmetric N1=N N=N1
    <- nat`eq-symmetric F1=F F=F1
    <- cxt`lookup-unique BL1 BL2 cxt`eq/ N1=N CIE-12
    <- cxt-info-eq-inversion CIE-12 O1=O2 T1=T2
    <- ({x} cxt`lookup-unique (BLP x) BL1 cxt`eq/ N=N1 (CIE-P1 x))
    <- ({x} cxt-info-eq-inversion (CIE-P1 x) (OP=O1 x) TP=T1)
    <- cxt`lookup-unique BL BL1 cxt`eq/ N=N1 CIE-1
    <- cxt-info-eq-inversion CIE-1 O=O1 T=T1
    <- ty-eq-inversion T=T1 _ _ C=C1
    <- clsmap`lookup-unique CML CML1 clsmap`eq/ C=C1 FM=FM1
    <- fldmap`lookup-unique FML FML1 FM=FM1 F=F1 FT=FT1
    <- ty2perm-deterministic T2PF T2PF1 predmap`eq/ FT=FT1 PF=PF1
    <- combine-fldperm/L1 B2P BL2 IMP5
    <- combine-fldperm/L2 O1=O2 IMP6
    <- combine-fldperm/L3 OP=O1 Q=Q1 F=F1 PF=PF1 IMP7.

- : combine-fldperm (s _) SZ
    (same-class/U (B-SP-C:same-class B SP C)
      (N!<SP:set`not-member SP (s N)) (SP+N=S:set`add SP (s N) S)
      (BL:cxt`lookup B (s N) (cxt-info/ O (ty/ NN A C)))) B2P
    CM-CM CM2PM (CML:clsmap`lookup CM C FM)
    (FML:fldmap`lookup FM F (ty/ FNN FA FC))
    (S+F+X=>M:set+nat2capmap S F X M)
    (X2Q:cap2frac X (fraction/ Q)) (S=>G: {x} set2cond B x S (G x))
    (M=>Pi:capmap2perm CM PM B M Pi) (T2PF:ty2perm PM (ty/ FNN FA FC) PF)
    (B-S-NN:least-nonnull B S nn/yes)
    ([x] implies/trans7
      (implies/combine implies/reflexive
        (implies/combine (IMP1 x) (implies/equiv (equiv/symmetric EQV))))
      (implies/combine implies/reflexive
        (implies/trans3
          (implies/equiv equiv/commute)
          (implies/cond-push)
          (implies/cond-gen-inner)))
      (implies/cond-push)
      (implies/cond-inner
        (bimplies/reflexive)
        (bimplies/reflexive)
        (implies/trans4
          (implies/combine (implies/trans IMP3 (implies/equiv equiv/commute))
            (implies/reflexive))
          (implies/equiv (equiv/symmetric equiv/associate))
          (implies/combine implies/reflexive
            (implies/trans5
              (implies/combine implies/reflexive
                (implies/combine implies/reflexive
                  (implies/trans
                    (implies/equiv equiv/identity)
                    (implies/combine (implies/reflexive)
                      (implies/trans5
                        (implies/equiv (equiv/symmetric equiv/identity))
                        (implies/equiv equiv/commute)
                        (implies/combine implies/self-implication implies/reflexive)
                        (add-encumber)
                        (implies/equiv-encumbered equiv/reflexive (EQV)))))))
              (implies/equiv equiv/roll2)
              (implies/combine implies/reflexive IMP4)
              (IMP5 x)
              (implies/equiv (equiv/symmetric equiv/identity))))
          (implies/equiv equiv/associate))
        (implies/trans9
          (implies/combine implies/reflexive
            (implies/trans
              (implies/combine implies/reflexive
                (implies/trans3
                  (implies/equiv (equiv/symmetric equiv/associate))
                  (implies/combine implies/reflexive
                    (implies/trans (implies/equiv equiv/commute) implies/reflexive))
                  (implies/equiv equiv/commute)))
              (implies/equiv equiv/roll2)))
          (implies/equiv equiv/associate)
          (implies/combine (IMPP x) implies/reflexive)
          (implies/equiv (equiv/symmetric equiv/associate))
          (implies/equiv
            (equiv/transitive
              (equiv/combine equiv/reflexive (equiv/commute))
              (equiv/associate)))
          (implies/combine
            (implies/combine implies/reflexive
              (implies/trans
                (implies/combine implies/nonlinear2empty implies/reflexive)
                (implies/equiv (equiv/transitive equiv/commute equiv/identity))))
            (implies/equiv equiv/commute))
          (implies/equiv (equiv/symmetric equiv/associate))
          (implies/combine implies/reflexive
            (implies/trans3
              (implies/equiv equiv/associate)
              (implies/combine
                (implies/trans3
                  (implies/equiv equiv/commute)
                  (add-encumber)
                  (implies/equiv-encumbered
                    (equiv/reflexive)
                    (equiv/transitive equiv/commute EQV)))
                (implies/reflexive))
              (implies/equiv equiv/commute)))
          (implies/equiv (equiv/symmetric equiv/identity))))
      (implies/cond-pull)
      (implies/combine implies/reflexive implies/cond-equal)
      (implies/equiv equiv/identity))
    <- set+nat2capmap/U-inversion S+F+X=>M N!<SP SP+N=S MP SP+F+X=>MP KP N+F=>KP MP+KP+X=M
    <- pair2nat-total-s _ _ K N+F=>K
    <- nat`succ-preserves-eq nat`eq/ SE
    <- pair-preserves-eq SE nat`eq/ PE
    <- pair2nat-unique N+F=>KP N+F=>K PE KP=K
    <- capmap`update-respects-eq MP+KP+X=M capmap`eq/ KP=K cap`eq/ capmap`eq/ MP+K+X=M
    <- ({x} set2cond/U-inversion (S=>G x) N!<SP SP+N=S _ (SP=>GP x) _ TP (BLP x) (IMP1 x) (IMP2 x))
    <- set+nat2capmap-preserves-fresh SP+F+X=>MP N!<SP N+F=>K K!<MP
    <- capmap2perm/U-inversion M=>Pi K!<MP MP+K+X=M _ F1 N1+F1=>K O1 NN1 A1 C1 BL1
      PF1 (create-fldperm/ CML1 FML1 T2PF1) (fraction/ Q1) X2Q1 PiP MP=>PiP EQV
    <- least-nonnull/U-inversion B-S-NN N!<SP SP+N=S O2 _ A2 C2 BL2
      (nonnull`leq/= nonnull`eq/) B-SP-NN
    <- set`not-member-update-increases-size-converse SZ N!<SP SP+N=S SZP
    <- combine-fldperm _ SZP B-SP-C B2P CM-CM CM2PM CML FML SP+F+X=>MP X2Q ([x] SP=>GP x)
      MP=>PiP T2PF B-SP-NN IMPP
    <- cap2frac-unique X2Q X2Q1 cap`eq/ Q=Q1
    <- nat2pair-unique N1+F1=>K N+F=>K nat`eq/ PAIR-E
    <- pair-eq-implies-eq PAIR-E N1=N F1=F
    <- nat`eq-symmetric N1=N N=N1
    <- nat`eq-symmetric F1=F F=F1
    <- cxt`lookup-unique BL1 BL2 cxt`eq/ N1=N CIE-12
    <- cxt-info-eq-inversion CIE-12 O1=O2 T1=T2
    <- ({x} cxt`lookup-unique (BLP x) BL1 cxt`eq/ N=N1 (CIE-P1 x))
    <- ({x} cxt-info-eq-inversion (CIE-P1 x) (OP=O1 x) TP=T1)
    <- cxt`lookup-unique BL BL1 cxt`eq/ N=N1 CIE-1
    <- cxt-info-eq-inversion CIE-1 O=O1 T=T1
    <- ty-eq-inversion T=T1 _ _ C=C1
    <- clsmap`lookup-unique CML CML1 clsmap`eq/ C=C1 FM=FM1
    <- fldmap`lookup-unique FML FML1 FM=FM1 F=F1 FT=FT1
    <- ty2perm-deterministic T2PF T2PF1 predmap`eq/ FT=FT1 PF=PF1
    <- combine-fldperm/L1 B2P BL2 IMP3
    <- combine-fldperm/L2 O1=O2 IMP4
    <- combine-fldperm/L3 OP=O1 Q=Q1 F=F1 PF=PF1 IMP5.

%worlds (objvar) (combine-fldperm _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total (N) (combine-fldperm N _ _ _ _ _ _ _ _ _ _ _ _ _ _).


%{
How to prove this? First we need to show that M2 is
less than or equal to M2P, therefore we can get back the
permission for reading field F. For this we need the following
theorem:

  if we have:
    S + F => GM
    GM    => M2
    M2   <= M
    M/GM == M1 , M2P
    --------------------
  then we can get:
    M2   <= M2P
    DM(M2) = DM(M2P)

The immediate result of this is we can convert M2P to two
sets of permissions, say Pi1 and Pi2, and Pi1 is the permissions
generated from M2.

Since we have permission Pi1, as well as the object equal relations,
we can get the field permission, and thus this theorem can be done.

One problem is M1 \join M2 = M, here it's possible that M1 overlaps
with M2, and thus if M2 => GM2, and M / GM2 = M1P + M2P,
M1P will be less than M1.
}%

% this lemma is probably not necessary.

%theorem before-read/unique/L1
  : forall* {CM} {PM} {B} {M2} {M3} {M}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {M2<=M: capmap-split M M2 M3}
    {CM-B-M: clsmap-cxt-capmap CM B M}
    exists {Pi1} {M3=>Pi1: capmap2perm CM PM B M3 Pi1}
    {Pi2} {M2=>Pi2: capmap2perm CM PM B M2 Pi2}
    true.

- : before-read/unique/L1 CM-CM CM2PM M-M2=M3 CM-B-M _ M3=>Pi3 _ M2=>Pi2
    <- capmap-split-implies-leq M-M2=M3 M2<=M M3<=M
    <- clsmap-cxt-capmap-respects-geq CM-B-M M2<=M CM-B-M2
    <- clsmap-cxt-capmap-respects-geq CM-B-M M3<=M CM-B-M3
    <- clsmap-cxt-capmap-implies-capmap2perm CM-CM CM2PM CM-B-M2 Pi2 M2=>Pi2
    <- clsmap-cxt-capmap-implies-capmap2perm CM-CM CM2PM CM-B-M3 Pi3 M3=>Pi3.

%worlds (objvar) (before-read/unique/L1 _ _ _ _ _ _ _ _).
%total {} (before-read/unique/L1 _ _ _ _ _ _ _ _).


%theorem before-read/unique/L2
  : forall* {G} {F} {PF} {CP} {Pi2} {Pi12} {Q} {PiB}
    forall
    {IMP1: {x} implies (combine PiB (combine (G x) (Pi12)))
      (combine PiB
        (combine (scale Q (unitperm (precise-exists x F PF)))
          (unitperm (encumbered (scale Q (unitperm (precise-exists x F PF))) Pi12))))}
    {IMP2: {x} implies (one-predcall CP x)
           (unitperm (nonlinear (nested (unitperm (precise-exists x F PF)) x all)))}
    exists {Pi}
    {IMP: {o}{x} implies
          (combine PiB
            (combine
              (unitperm (conditional (objequal o x) empty (G o)))
              (combine
                (scale Q (nonnull-unique-perm x CP))
                (combine
                  (unitperm
                    (encumbered (scale Q (nonnull-unique-perm x CP)) Pi2))
                  Pi12))))
          (combine PiB
            (combine
               (combine
                 (scale Q (unitperm (precise-exists o F PF)))
                 (unitperm
                   (encumbered
                     (scale Q (unitperm (precise-exists o F PF)))
                     (combine Pi12 Pi2))))
              (Pi o x)))}
    true.

- : before-read/unique/L2 IMP1 IMP2 _
    ([o][x]
      (implies/trans5
        (implies/combine (implies/reflexive)
          (implies/trans3
            (implies/combine
              (implies/cond-gen-inner)
              (implies/reflexive))
            (implies/equiv equiv/commute)
            (implies/cond-push)))
        (implies/cond-push)
        (implies/cond-inner
          (bimplies/reflexive)
          (bimplies/reflexive)
          (implies/combine (implies/reflexive)
            (implies/trans10
              (implies/combine
                (implies/equiv equiv/associate)
                (implies/equiv equiv/identity))
              (implies/equiv equiv/commute)
              (implies/equiv equiv/associate)
              (implies/combine
                (implies/trans
                  (implies/combine
                    (implies/nonlinear bimplies/objequal-symmetric)
                    (implies/reflexive))
                  (implies/objequal
                    ([o] (scale Q2 (nonnull-unique-perm o CP)) ,
                      (unitperm
                        (encumbered (scale Q2 (nonnull-unique-perm o CP))
                          (Pi2))))))
                (implies/reflexive))
              (implies/equiv (equiv/symmetric equiv/associate))
              (implies/combine
                (implies/reflexive)
                (implies/trans
                  (add-encumber)
                  (implies/equiv-encumbered
                    (equiv/reflexive)
                    (equiv/commute))))
              (implies/equiv
                (equiv/transitive
                  (equiv/symmetric equiv/identity)
                  (equiv/symmetric equiv/associate)))
              (IMP2' o)
              (implies/equiv equiv/associate)
              (implies/combine
                (implies/reflexive)
                (implies/reflexive))))
          (implies/trans3
            (implies/combine (implies/reflexive)
              (implies/trans
                (implies/equiv
                  (equiv/transitive
                    (equiv/commute)
                    (equiv/symmetric equiv/associate)))
                (implies/combine implies/reflexive
                  (implies/trans
                    (implies/combine % (G , (Pf, (Pf --|- P2 , P12)))
                      (implies/reflexive)
                      (implies/trans3
                        (implies/equiv equiv/associate)
                        (implies/combine
                          (implies/linear-modus-ponens)
                          (implies/reflexive))
                        (implies/equiv equiv/commute)))
                    (implies/equiv equiv/associate)))))
            (implies/trans5
              (implies/combine implies/reflexive (implies/equiv equiv/roll2))
              (implies/equiv equiv/associate)
              (implies/combine (IMP1 o) (implies/reflexive))
              (implies/equiv (equiv/symmetric equiv/associate))
              (implies/combine implies/reflexive (implies/equiv equiv/roll2)))
            (implies/combine (implies/reflexive)
              (implies/trans3
                (implies/combine implies/reflexive
                  (implies/trans3
                    (implies/combine
                      (implies/trans3
                        (implies/combine
                          (implies/equiv
                            (equiv/transitive
                              (equiv/transitive
                                (equiv/symmetric equiv/identity)
                                (equiv/commute))
                              (equiv/commute)))
                          (implies/trans
                            (implies/equiv-encumbered
                              (equiv/transitive
                                (equiv/symmetric equiv/identity)
                                (equiv/commute))
                              equiv/reflexive)
                            (implies/combine-assoc-encumbered)))
                        (implies/equiv (equiv/symmetric equiv/associate))
                        (implies/combine
                          (implies/reflexive)
                          (implies/linear-modus-ponens)))
                      (implies/reflexive))
                    (implies/equiv (equiv/symmetric equiv/associate))
                    (implies/combine
                      (implies/reflexive)
                      (add-encumber))))
                (implies/equiv equiv/commute)
                (implies/combine
                  (implies/reflexive)
                  (implies/reflexive))))))
        (implies/cond-pull)
        (implies/combine (implies/reflexive)
          (implies/cond-pull))))
    <- pullout-fldperm IMP2 IMP2'.

%worlds (objvar) (before-read/unique/L2 _ _ _ _).
%total {} (before-read/unique/L2 _ _ _ _).


%theorem before-read/borrow
  : forall* {B} {CM} {PM} {FM} {C} {M2} {M} {M3}
    {F} {NN} {A} {FC} {S} {Out} {K} {X} {Q} {U}
    forall {CM-B-M: clsmap-cxt-capmap CM B M}
    {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CM-L: clsmap`lookup CM C FM}
    {FM-L: fldmap`lookup FM F (ty/ NN A FC)}
    {S+F+X=>M2: set+nat2capmap S F X M2}
    {X2Q: cap2frac X Q}
    {M-M2P=M3: capmap-split M M2 M3}
    {M=>Out: result2output CM PM B
      (result/expr (reftype/ nn/yes C (targets/unique S capmap/0)) (env/ U M)) Out}
    {SC: same-class B S C}
    {ANN: least-nonnull B S nn/yes}
    {SZ: set`size S (s K)}
    exists {TF} {T2TF: ty2perm PM (ty/ NN A FC) TF}
    {Pi4} {B=>Pi4: cxt2perm CM PM B Pi4}
    {PiU} {U=>PiU: uobjset2perm CM PM B U PiU}
    {Pi1} {M1P=>Pi1: capmap2perm CM PM B M3 Pi1}
    {Pi2} {M2P=>Pi2: capmap2perm CM PM B M2 Pi2}
    {MX-M2P: capmap-min M2 X}
    {TRANS: transform Out
            (output/exists [r]
              (output/expr r
                (combine PiU
                  (combine Pi4
                    (combine (ffperm Q r F TF)
                      (combine
                        (unitperm
                          (encumbered
                            (ffperm Q r F TF) Pi2)) Pi1))))))}
    true.

- : before-read/borrow CM-B-M CM-CM CM2PM CM-L FM-L S+F+X=>M2 X2Q
    (M-M2=M3:capmap-split M M2 M3)
    (result2output/expr B=>Pi4 (env2input/ U=>PiU M=>Pi)
      (reftype2perm/borrow (set`size/+ _) capmap`size/0 _ S=>GF))
    B-S-C LNN SZ-S %{=>}% _ T2PF _ B=>Pi4 _ U=>PiU
    _ M3=>Pi3 _ M2=>Pi2 MX-M2
    (transform/inside [o]
      (transform/trans
        (transform/rem-unused)
        (transform/trans3
          (transform/implies
            (implies/trans
              (implies/equiv
                (equiv/transitive
                  (equiv/identity)
                  (equiv/combine equiv/reflexive (equiv/symmetric equiv/associate))))
              (implies/equiv equiv/roll2)))
          (transform/drop)
          (transform/implies
            (implies/trans
              (implies/equiv equiv/roll3)
              (implies/combine
                (implies/reflexive)
                (implies/trans3
                  (implies/combine
                    (implies/reflexive)
                    (implies/trans
                      (implies/combine
                        (implies/reflexive)
                        (implies/equiv
                          (Pi<=>Pi2+Pi3)))
                      (implies/equiv equiv/associate)))
                  (implies/trans4
                    (implies/equiv equiv/associate)
                    (implies/combine (IMP o) implies/reflexive)
                    (implies/equiv (equiv/symmetric equiv/associate))
                    (implies/combine
                      (implies/reflexive)
                      (implies/combine
                        (implies/trans3
                          (implies/combine
                            (implies/equiv
                              (equiv/transitive
                                (equiv/transitive
                                  (equiv/symmetric equiv/identity)
                                  (equiv/commute))
                                (equiv/commute)))
                            (implies/trans
                              (implies/equiv-encumbered
                                (equiv/transitive
                                  (equiv/symmetric equiv/identity)
                                  (equiv/commute))
                                equiv/reflexive)
                              (implies/combine-assoc-encumbered)))
                          (implies/equiv (equiv/symmetric equiv/associate))
                          (implies/combine
                            (implies/reflexive)
                            (implies/linear-modus-ponens)))
                        (implies/reflexive))))
                  (implies/combine implies/reflexive
                    (implies/equiv (equiv/symmetric equiv/associate))))))))))
    <- before-read/unique/L1 CM-CM CM2PM M-M2=M3 CM-B-M Pi3
      (M3=>Pi3:capmap2perm CM PM B M3 Pi3) Pi2 (M2=>Pi2:capmap2perm CM PM B M2 Pi2)
    <- lookup-implies-clsmap-fldmap CM-CM CM-L CM-FM
    <- lookup-implies-clsmap-ty CM-FM FM-L CM-T
    <- clsmap-ty-implies-ty2perm CM2PM CM-T _ T2PF
    <- set+nat2capmap-implies-min-cap S+F+X=>M2 MX-M2
    <- combine-fldperm _ SZ-S B-S-C B=>Pi4 CM-CM CM2PM CM-L FM-L S+F+X=>M2
      X2Q S=>GF M2=>Pi2 T2PF LNN IMP
    <- capmap-split-implies-permission-combine* M-M2=M3 M=>Pi M2=>Pi2 M3=>Pi3 Pi<=>Pi2+Pi3.

%worlds (objvar) (before-read/borrow _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (before-read/borrow _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).


%theorem before-read/unique/2/L1
  : forall* {X1} {X2} {Q1} {Q2} {CP} {Pi1} {Pi}
    forall {CE: cap`eq X1 X2}
    {X1=>Q1: cap2frac X1 Q1}
    {X2=>Q2: cap2frac X2 Q2}
    exists {EQV: {x} equiv
                 (combine (scale Q1 (nonnull-unique-perm x CP))
                   (combine
                     (unitperm
                       (encumbered
                         (scale Q1 (nonnull-unique-perm x CP)) Pi1))
                     Pi))
                 (combine (scale Q2 (nonnull-unique-perm x CP))
                   (combine
                     (unitperm
                       (encumbered
                         (scale Q2 (nonnull-unique-perm x CP)) Pi1))
                     Pi))}
    true.

- : before-read/unique/2/L1 cap`eq/ _ _ ([_] equiv/reflexive).

%worlds (objvar) (before-read/unique/2/L1 _ _ _ _).
%total { } (before-read/unique/2/L1 _ _ _ _).


%theorem before-read/unique/2/L2
  : forall* {X1} {X2} {Q1} {Q2} {X4} {Pi1} {Pi2} {Pi}
    forall {CE: cap`eq X1 X2}
    {X1=>Q1: cap2frac X1 Q1}
    {X2=>Q2: cap2frac X2 Q2}
    exists {EQV: {x}{x1} equiv
                 (combine
                       (unitperm (conditional (objequal x x1) empty (Pi x)))
                       (combine
                           (scale Q1
                               (combine
                                   (unitperm
                                       (nonlinear (neg (objequal x1 null))))
                                   (combine (allperm x1) (one-predcall X4 x1))))
                           (combine
                               (unitperm
                                   (encumbered
                                       (scale Q1
                                           (combine
                                               (unitperm
                                                   (nonlinear
                                                       (neg (objequal x1 null))))
                                               (combine (allperm x1)
                                                   (one-predcall X4 x1))))
                                       Pi1))
                               Pi2)))
                 (combine
                       (unitperm (conditional (objequal x x1) empty (Pi x)))
                       (combine
                           (scale Q2
                               (combine
                                   (unitperm
                                       (nonlinear (neg (objequal x1 null))))
                                   (combine (allperm x1) (one-predcall X4 x1))))
                           (combine
                               (unitperm
                                   (encumbered
                                       (scale Q2
                                           (combine
                                               (unitperm
                                                   (nonlinear
                                                       (neg (objequal x1 null))))
                                               (combine (allperm x1)
                                                   (one-predcall X4 x1))))
                                       Pi1))
                               Pi2)))}
    true.

- : before-read/unique/2/L2 cap`eq/ _ _ ([_][_] equiv/reflexive).

%worlds (objvar) (before-read/unique/2/L2 _ _ _ _).
%total { } (before-read/unique/2/L2 _ _ _ _).


%theorem before-read/unique/2
  : forall* {B} {CM} {PM} {FM} {C} {M2} {M} {M1} {N1} {M3} {M4}
    {F} {NN} {A} {FC} {Out} {X} {Q} {U}
    forall {S} {SZ: capmap`size M1 (s N1)}
    {MX-M1: capmap-min M1 X}
    {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CL: clsmap`lookup CM C FM}
    {FL: fldmap`lookup FM F (ty/ NN A FC)}
    {G=>M2: set+nat2capmap S F X M2}
    {X2Q: cap2frac X Q}
    {G1^G2: capmap`disjoint M1 M2}
    {G1+G2=G: capmap`join M1 M2 M3}
    {M2<=M: capmap-split M M2 M4}
    {M=>Out: result2output CM PM B
      (result/expr (reftype/ nn/yes C (targets/unique S M1)) (env/ U M)) Out}
    {SOC: same-class B S C}
    {LNN: least-nonnull B S nn/yes}
    exists {TF} {T2TF: ty2perm PM (ty/ NN A FC) TF}
    {Pi4} {B=>Pi4: cxt2perm CM PM B Pi4}
    {PiU} {U=>PiU: uobjset2perm CM PM B U PiU}
    {Pi1} {M1P=>Pi1: capmap2perm CM PM B M4 Pi1}
    {Pi2} {M2P=>Pi2: capmap2perm CM PM B M3 Pi2}
    {MX: capmap-min M3 X}
    {TRANS: transform Out
            (output/exists [o]
              (output/expr o
                (combine PiU
                  (combine Pi4
                    (combine (ffperm Q o F TF)
                      (combine
                        (unitperm
                          (encumbered
                            (ffperm Q o F TF) Pi2)) Pi1))))))}
    true.


%theorem before-read/unique/2/F
  : forall* {CM} {PM} {B} {NN} {A} {FC} {M4} {M3} {Out} {F} {Q} {X} {U}
    forall {V:void}
    exists {TF} {T2TF: ty2perm PM (ty/ NN A FC) TF}
    {Pi4} {B=>Pi4: cxt2perm CM PM B Pi4}
    {PiU} {U=>PiU: uobjset2perm CM PM B U PiU}
    {Pi1} {M1P=>Pi1: capmap2perm CM PM B M4 Pi1}
    {Pi2} {M2P=>Pi2: capmap2perm CM PM B M3 Pi2}
    {MX: capmap-min M3 X}
    {TRANS: transform Out
            (output/exists [o]
              (output/expr o
                (combine PiU
                  (combine Pi4
                    (combine (ffperm Q o F TF)
                      (combine
                        (unitperm
                          (encumbered
                            (ffperm Q o F TF) Pi2)) Pi1))))))}
    true.

%worlds (objvar) (before-read/unique/2/F _ _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (before-read/unique/2/F _ _ _ _ _ _ _ _ _ _ _ _ _).


- : before-read/unique/2 (set/+ _ _) _
    (MX-M1=Xx:capmap-min M1 Xx) CM-CM CM2PM CML FML
    (S+F+X=>M2:set+nat2capmap _ F Xx M2) (Xx=>Q:cap2frac Xx Q1) M1^M2
    (M1+M2=M3:capmap`join M1 M2 M3) (M-M2=M4:capmap-split M M2 M4)
    (result2output/expr B=>Pj1
      (env2input/ U=>PiU M=>Pi)
      (reftype2perm/unique _ (ty2perm/ PML nn2perm/yes annot2perm/unique)
        S=>GF (M1=>Pi1:capmap2perm _ _ _ M1 Pi1)
        (MX-M1=Xx1:capmap-min M1 Xx1) (Xx1=>Q:cap2frac Xx1 Q)))
    SOC LNN _ (ty2perm/ PML2 NN2PF2 A2AF2) _ B=>Pj1 _ U=>PiU
    Pi4 M4=>Pi4 Pi3 M3=>Pi3 MX-M3=Xx
    (transform/inside [o]
      (transform/trans
        (transform/inside [r]
          (transform/trans
            (transform/implies
              (implies/trans3
                (implies/equiv
                  (equiv/transitive3
                    (equiv/identity)
                    (equiv/roll3)
                    (equiv/combine equiv/reflexive
                      (equiv/combine equiv/reflexive
                        (equiv/transitive
                          (equiv/symmetric equiv/associate)
                          (equiv/combine equiv/reflexive
                            (equiv/symmetric equiv/associate)))))))
                (implies/combine (implies/reflexive)
                  (implies/trans4
                    (implies/combine
                      (implies/reflexive)
                      (implies/trans
                        (implies/combine
                          (implies/reflexive)
                          (implies/trans
                            (implies/combine
                              (implies/reflexive)
                              (implies/trans
                                (implies/combine
                                  (implies/reflexive)
                                  (implies/equiv
                                    (Pi<=>Pi2+Pi4)))
                                (implies/equiv equiv/associate)))
                            (implies/equiv equiv/associate)))
                        (implies/equiv equiv/associate)))
                    (implies/trans5
                      (implies/combine implies/reflexive
                        (implies/combine (implies/equiv (EQV o r)) implies/reflexive))
                      (implies/equiv equiv/associate)
                      (implies/combine (IMP4 o r) (implies/reflexive))
                      (implies/equiv (equiv/symmetric equiv/associate))
                      (implies/combine (implies/reflexive)
                        (implies/combine
                          (implies/combine
                            (implies/combine
                              (implies/reflexive)
                              (implies/equiv-encumbered
                                (equiv/reflexive)
                                (equiv/transitive (equiv/commute) Pi1+Pi2<=>Pi3)))
                            (implies/reflexive))
                          (implies/reflexive))))
                    (implies/combine
                      (implies/reflexive)
                      (implies/equiv
                        (equiv/transitive3
                          (equiv/combine
                            (equiv/commute)
                            (equiv/reflexive))
                          (equiv/symmetric equiv/associate)
                          (equiv/combine
                            (equiv/reflexive)
                            (equiv/symmetric equiv/associate)))))
                    (implies/equiv equiv/roll2)))
                (implies/equiv equiv/roll2)))
            (transform/drop)))
        (transform/rem-unused)))
    <- set+nat2capmap-implies-min-cap S+F+X=>M2 MX-M2=Xx
    <- capmap-min-unique MX-M1=Xx1 MX-M1=Xx cap`eq/ capmap`eq/ Xx1=Xx
    <- capmap-join-preserves-min-cap MX-M1=Xx MX-M2=Xx M1+M2=M3 MX-M3=Xx
    <- capmap-split-implies-permission-combine M-M2=M4 M=>Pi
      Pi2 Pi4 M2=>Pi2 M4=>Pi4 Pi<=>Pi2+Pi4
    <- capmap`disjoint-join-implies-equiv-converse M1^M2 M1+M2=M3
      M1=>Pi1 M2=>Pi2 Pi3 M3=>Pi3 Pi1+Pi2<=>Pi3
    <- fldperm-can-lookup CM2PM PML CML FML _ _ _ A2AF2 NN2PF2 PML2 IMP
    <- set`size-total S-SZ
    <- combine-fldperm _ S-SZ SOC B=>Pj1 CM-CM CM2PM CML FML S+F+X=>M2 Xx=>Q
      S=>GF M2=>Pi2 (ty2perm/ PML2 NN2PF2 A2AF2) LNN IMP3
    <- before-read/unique/L2 IMP3 IMP _ IMP4
    <- before-read/unique/2/L2 Xx1=Xx Xx1=>Q Xx=>Q EQV.

- : before-read/unique/2 set/0 _ _ _ _ _ _
    (S=>G2:set+nat2capmap set/0 _ _ (capmap/+ _ _ _)) _
    _ _ _ _ _ _ K1 K2 K3 K4 K5 K6 K9 K12 K13 K14 K15 K16
    <- capmap`size-total MZ
    <- set+nat2capmap-preserves-size-converse S=>G2 (capmap`size/+ MZ) SZ
    <- set`size-unique set`size/0 SZ set`eq/ E
    <- nat`eq-contradiction E V
    <- before-read/unique/2/F V K1 K2 K3 K4 K5 K6 K9 K12 K13 K14 K15 K16.

- : before-read/unique/2 set/0 _
    MX-M1=X CM-CM CM2PM CML FML _ (X=>Q:cap2frac Xx2 Q2) _ capmap`join/R M-M2=M4
    (result2output/expr B=>Pj1 (env2input/ U=>PiU (M=>Pi:capmap2perm _ _ _ M Pi))
      (reftype2perm/unique _
      (ty2perm/ PML nn2perm/yes annot2perm/unique) ([_] set2cond/0)
      (M1=>Pi1:capmap2perm _ _ _ M1 Pi1)
      (MX-M1=Xx1:capmap-min M1 Xx1) (Xx1=>Q:cap2frac Xx1 Q1)))
    _ _ _ %{=>}% (ty2perm/ PML2 NN2PF2 A2AF2) _ B=>Pj1 _ U=>PiU
    _ M4=>Pi Pi1 M1=>Pi1 MX-M1=X
    (transform/inside [o]
      (transform/trans
        (transform/inside [r]
          (transform/implies
            (implies/trans
              (implies/equiv
                (equiv/transitive3
                  (equiv/identity)
                  (equiv/roll3)
                  (equiv/combine equiv/reflexive
                    (equiv/combine equiv/reflexive
                      (equiv/transitive
                        (equiv/symmetric equiv/associate)
                        (equiv/combine equiv/reflexive
                          (equiv/symmetric equiv/associate)))))))
              (implies/combine
                (implies/reflexive)
                (implies/combine
                  (implies/reflexive)
                  (implies/trans3
                    (implies/combine
                      (implies/trans6
                        (implies/cond-gen-inner)
                        (implies/cond-inner
                          (bimplies/reflexive)
                          (bimplies/reflexive)
                          (implies/reflexive)
                          (implies/trans
                            (implies/equiv equiv/commute)
                            (implies/combine
                              (implies/contradiction)
                              (implies/trans
                                (implies/nonlinear bimplies/tt)
                                (implies/true2empty)))))
                        (implies/cond-pull)
                        (implies/combine implies/reflexive implies/cond-equal)
                        (implies/equiv equiv/identity)
                        (implies/nonlinear bimplies/objequal-symmetric))
                      (implies/reflexive))
                    (implies/objequal
                      ([x] (combine (scale Q1 (nonnull-unique-perm x CP))
                             (combine
                               (unitperm
                                 (encumbered
                                   (scale Q1 (nonnull-unique-perm x CP))
                                   (Pi1)))
                               Pi))))
                    (implies/trans (implies/equiv (EQV o)) (IMP2 o))))))))
        (transform/rem-unused)))
    <- capmap-split-unique (capmap-split/ capmap`disjoint/L capmap`join/L)
      M-M2=M4 capmap`eq/ capmap`eq/ (M=M4:capmap`eq M M4)
    <- capmap2perm-respects-eq M=>Pi clsmap`eq/ predmap`eq/ cxt`eq/
      M=M4 permission`eq/ M4=>Pi
    <- capmap-min-unique MX-M1=Xx1 MX-M1=X cap`eq/ capmap`eq/ Xx1=Xx2
    <- fldperm-can-lookup CM2PM PML CML FML _ _ _ A2AF2 NN2PF2 PML2 IMP
    <- pullout-fldperm IMP IMP2
    <- before-read/unique/2/L1 Xx1=Xx2 Xx1=>Q X=>Q EQV.

%worlds (objvar) (before-read/unique/2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (before-read/unique/2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).


%%% a format ready for reading a field

read-format : clsmap -> predmap -> cxt ->
	 targets -> capmap -> permission -> permission -> fraction -> type.

read-format/ : capmap`size M2 (s N)
               -> capmap2perm CM PM B M1 Pi2
               -> capmap2perm CM PM B M2 Pi3
               -> capmap-min M2 X
               -> cap2frac X Q
               -> read-format CM PM B (targets/unique set/0 M2) M1 Pi3 Pi2 Q.


%theorem before-read/unique/L
  : forall* {CM} {PM} {B} {FM} {C} {NN} {A} {FC} {F} {Rslt}
    {M0} {S2} {S1} {G} {X} {M2} {Q} {U}
    forall {N1} {SZ1: set`size S1 N1}
    {N2} {SZ1: capmap`size S2 N2}
    {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CML: clsmap`lookup CM C FM}
    {FML: fldmap`lookup FM F (ty/ NN A FC)}
    {XX=>Rslt: result2output CM PM B
      (result/expr (reftype/ nn/yes C (targets/unique S1 S2)) (env/ U M0)) Rslt}
    {MG: make-tgts-and-caps M0 (targets/unique S1 S2) F X G M2}
    {X2Q: cap2frac X Q}
    {CM-B-G: clsmap-cxt-reftype CM B (reftype/ nn/yes C (targets/unique S1 S2))}
    {CM-B-XX: clsmap-cxt-capmap CM B M0}
    exists {Pi1} {Pi2} {Pi3} {PiU} {TF}
    {FT=>TF: ty2perm PM (ty/ NN A FC) TF}
    {B=>Pi1: cxt2perm CM PM B Pi1}
    {U=>PiU: uobjset2perm CM PM B U PiU}
    {REE: read-format CM PM B G M2 Pi2 Pi3 Q}
    {TRANS: transform Rslt
            (output/exists [r]
              (output/expr r
                (combine PiU
                  (combine Pi1
                    (combine (ffperm Q r F TF)
                      (combine
                        (unitperm (encumbered (ffperm Q r F TF) Pi2)) Pi3))))))}
    true.

- : before-read/unique/L (s N) SZ-S z _ CM-CM CM2PM CML FML XX=>Rslt
    (make-tgts-and-caps/unique S1+F+X=>M
      MX-S2=X _ (M0-M=M2: capmap-split M0 M M2)) X2Q
    (clsmap-cxt-reftype/unique _ CM-B-S CM-B-S2 WF-TGT)
    CM-B-M0 _ _ _ _ _ T2TF B=>Pi1 U=>PiU
    (read-format/ SZ-M M2=>Pi2 M=>Pi M=>X X2Q) TRANS
    <- cxt-unique-objset-implies-same-class CM-B-S SOC
    <- cxt-unique-objset-implies-least-nonnull CM-B-S LNN
    <- set+nat2capmap-preserves-size S1+F+X=>M SZ-S SZ-M
    <- before-read/borrow CM-B-M0 CM-CM CM2PM CML FML S1+F+X=>M X2Q M0-M=M2
      XX=>Rslt SOC LNN SZ-S _ T2TF _ B=>Pi1 _ U=>PiU _ M2=>Pi2 _ M=>Pi M=>X TRANS.

- : before-read/unique/L _ SZ-S1 (s N) SZ-S2 CM-CM CM2PM CML FML XX=>Rslt
    (make-tgts-and-caps/unique S1+F+X=>M MX-S2=X M3=S2+M
      (M0-M=M2: capmap-split M0 M M2)) X2Q
    (clsmap-cxt-reftype/unique _ CM-B-S CM-B-S2 WF-TGT)
    CM-B-M0 _ _ _ _ _ T2TF B=>Pi1 U=>PiU
    (read-format/ (capmap`size/+ SZ-M3) M2=>Pi2 M3=>Pi3 M3=>X X2Q) TRANS
    <- capmap-split-implies-disjoint-join M3=S2+M S2^M S2+M=M3
    <- cxt-unique-objset-implies-same-class CM-B-S SOC
    <- cxt-unique-objset-implies-least-nonnull CM-B-S LNN
    <- capmap`size-total SZ-M3
    <- before-read/unique/2 _ SZ-S2
      MX-S2=X CM-CM CM2PM CML FML S1+F+X=>M X2Q S2^M S2+M=M3 M0-M=M2
      XX=>Rslt SOC LNN _ T2TF _ B=>Pi1 _ U=>PiU _ M2=>Pi2 _ M3=>Pi3 M3=>X TRANS.

%worlds (objvar) (before-read/unique/L _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (before-read/unique/L _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).


%theorem before-read/unique
  : forall* {CM} {PM} {B} {FM} {C} {NN} {A} {FC} {F} {Rslt}
    {S1} {S2} {G} {X} {M0} {M2} {Q} {U}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CML: clsmap`lookup CM C FM}
    {FML: fldmap`lookup FM F (ty/ NN A FC)}
    {XX=>Rslt: result2output CM PM B
      (result/expr (reftype/ nn/yes C (targets/unique S1 S2)) (env/ U M0)) Rslt}
    {MG: make-tgts-and-caps M0 (targets/unique S1 S2) F X G M2}
    {X2Q: cap2frac X Q}
    {CM-B-G: clsmap-cxt-reftype CM B (reftype/ nn/yes C (targets/unique S1 S2))}
    {CM-B-XX: clsmap-cxt-capmap CM B M0}
    exists {Pi1} {Pi2} {Pi3} {PiU} {TF}
    {FT=>TF: ty2perm PM (ty/ NN A FC) TF}
    {B=>Pi1: cxt2perm CM PM B Pi1}
    {U=>PiU: uobjset2perm CM PM B U PiU}
    {REE: read-format CM PM B G M2 Pi2 Pi3 Q}
    {TRANS: transform Rslt
            (output/exists [r]
              (output/expr r
                (combine PiU
                  (combine Pi1
                    (combine (ffperm Q r F TF)
                      (combine
                        (unitperm (encumbered (ffperm Q r F TF) Pi2)) Pi3))))))}
    true.

- : before-read/unique CM-CM CM2PM CML FML XX=>Rslt
    MG X2Q CM-B-G CM-B-XX _ _ _ _ _ T2TF B=>Pi1 U=>PiU BWF TRANS
    <- set`size-total Z1
    <- capmap`size-total Z2
    <- before-read/unique/L _ Z1 _ Z2
      CM-CM CM2PM CML FML XX=>Rslt MG X2Q CM-B-G CM-B-XX _ _ _ _ _ T2TF B=>Pi1 U=>PiU BWF TRANS.

%worlds (objvar)(before-read/unique _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (before-read/unique _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).


%% Shared

%theorem before-read/shared/L2
  : forall* {CM} {PM} {B} {X} {Pi} {Q}
    forall {XM=>Pi:capmap2perm CM PM B (capmap/1 z X) Pi}
    {X2Q: cap2frac X Q}
    exists {Pi2} {EQV: equiv Pi ((scale Q (allperm null)) , Pi2)}
    true.

%theorem before-read/shared/L2L1
  : forall* {MP} {X}
    forall {NM: capmap`fresh MP z} {UD: capmap`update MP z X (capmap/+ z X capmap/0)}
    exists {E: capmap`eq MP capmap/0}
    true.

%theorem before-read/shared/L2L2
  : forall* {Q1} {Q2} {Pi}
    forall {E: rat`eq Q1 Q2}
    exists {EQV: equiv (scale (fraction/ Q1) Pi) (scale (fraction/ Q2) Pi)}
    true.

- : before-read/shared/L2L1 capmap`fresh/0 capmap`update/0 capmap`eq/.

- : before-read/shared/L2L1 FS (capmap`update/= nat`eq/) E
    <- capmap`fresh-contradiction FS F
    <- capmap`false-implies-eq F E.

- : before-read/shared/L2L2 rat`eq/ equiv/reflexive.

- : before-read/shared/L2 M=>Pi (X2Q:cap2frac _ (fraction/ Q)) _
    (equiv/transitive (equiv/symmetric EQV1) (equiv/combine EQV2 equiv/reflexive))
    <- capmap`lookup-implies-fresh-update (capmap`lookup/= nat`eq/) MP FS UD
    <- capmap2perm/z-inversion M=>Pi FS UD (fraction/ Q2) X2Q2 _ MP=>PiP EQV1
    <- cap2frac-unique X2Q2 X2Q cap`eq/ Q2=Q
    <- before-read/shared/L2L2 Q2=Q EQV2.

%worlds (objvar) (before-read/shared/L2L1 _ _ _).
%total {} (before-read/shared/L2L1 _ _ _).

%worlds (objvar) (before-read/shared/L2L2 _ _).
%total {} (before-read/shared/L2L2 _ _).

%worlds (objvar) (before-read/shared/L2 _ _ _ _).
%total {} (before-read/shared/L2 _ _ _ _).


%theorem before-read/shared
  : forall* {CM} {PM} {FM} {C} {NN} {A} {FC} {B} {M} {Rslt} {F} {X} {M2} {Q} {U}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CM-L: clsmap`lookup CM C FM}
    {FM-L: fldmap`lookup FM F (ty/ NN A FC)}
    {M-SM=M2: capmap-split M (capmap/1 shared-tgt X) M2}
    {X=>Q: cap2frac X Q}
    {XX=>Rslt: result2output CM PM B
      (result/expr (reftype/ nn/yes C targets/shared) (env/ U M)) Rslt}
    exists {Pi1} {Pi2} {Pi3} {PiU} {TF}
    {FT=>TF: ty2perm PM (ty/ NN A FC) TF}
    {B=>Pi3: cxt2perm CM PM B Pi3}
    {U=>PiU: uobjset2perm CM PM B U PiU}
    {M1=>Pi1: capmap2perm CM PM B M2 Pi1}
    {M2=>Pi2: capmap2perm CM PM B (capmap/1 z X) Pi2}
    {TRANS: transform Rslt
            (output/exists [r]
              (output/expr r
                (combine PiU
                  (combine Pi3
                    ((ffperm Q r F TF) ,
                      (unitperm
                        (encumbered
                          (ffperm Q r F TF) Pi2) , Pi1))))))}
    true.

- : before-read/shared
    CM-CM CM2PM CM-L FM-L M-SM=M2 X2Q
    (result2output/expr B=>Pi3 (env2input/ U=>PiU M=>Pi)
      (reftype2perm/shared
        (ty2perm/ PM-L nn2perm/yes annot2perm/shared)))
    _ _ _ _ _ (ty2perm/ PM-LF NN2PF A2AF)
    B=>Pi3 U=>PiU M2=>Pi2 SM=>Pi1
    (transform/inside [r]
      (transform/trans3
        (transform/rem-unused)
        (transform/implies
          (implies/trans3
            (implies/equiv
              (equiv/transitive
                (equiv/identity)
                (equiv/roll3)))
            (implies/combine
              (implies/reflexive)
              (implies/trans3
                (implies/combine
                  (implies/reflexive)
                  (implies/combine
                    (implies/reflexive)
                    (implies/equiv
                      (equiv/transitive
                        (EQV1)
                        (equiv/commute)))))
                (implies/combine
                  (implies/reflexive)
                  (implies/trans
                    (implies/equiv
                      (equiv/transitive
                        (equiv/symmetric equiv/associate)
                        (equiv/combine
                          (equiv/reflexive)
                          (equiv/transitive3
                            (equiv/symmetric equiv/associate)
                            (equiv/combine equiv/reflexive equiv/commute)
                            (equiv/associate)))))
                    (implies/combine
                      (implies/reflexive)
                      (implies/trans6
                        (implies/combine
                          (IMP1 r) (IMP2 r))
                        (implies/equiv
                          (equiv/transitive3
                            (equiv/symmetric equiv/associate)
                            (equiv/combine equiv/reflexive equiv/commute)
                            (equiv/associate)))
                        (implies/combine
                          (implies/trans
                            (implies/equiv equiv/commute)
                            (implies/trans5
                              (implies/combine
                                (implies/scale-into-formula)
                                (implies/reflexive))
                              (implies/equiv (equiv/symmetric equiv/distribute))
                              (implies/scale implies/carve)
                              (implies/equiv equiv/distribute)
                              (implies/combine
                                implies/reflexive
                                (implies/scale-distribute-encumbered))))
                          (implies/reflexive))
                        (implies/equiv equiv/associate)
                        (implies/combine
                          (implies/trans
                            (implies/equiv (equiv/symmetric equiv/associate))
                            (implies/combine implies/reflexive implies/chain-implication))
                          (implies/reflexive))
                        (implies/equiv (equiv/symmetric equiv/associate))))))
                (implies/equiv equiv/reorder)))
            (implies/equiv equiv/roll2)))
        (transform/drop)))
    <- capmap-split-implies-permission-combine M-SM=M2
      M=>Pi _ _ SM=>Pi1 M2=>Pi2 EQV1
    <- before-read/shared/L2 SM=>Pi1 X2Q _ EQV2
    <- can-carve-out-of-shared EQV2 IMP1
    <- fldperm-can-lookup CM2PM PM-L CM-L FM-L _ _ _ A2AF NN2PF PM-LF ([r] IMP2 r).

%worlds (objvar) (before-read/shared _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (before-read/shared _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).


%theorem before-read
  : forall* {CM} {PM} {B} {FM} {C} {NN} {A} {FC} {F} {Out}
    {M0} {M2} {G} {G1} {X} {Q} {U}
    forall {CM-CM: clsmap-clsmap CM CM}
    {CM2PM: clsmap2predmap CM PM}
    {CML: clsmap`lookup CM C FM}
    {FML: fldmap`lookup FM F (ty/ NN A FC)}
    {XX=>Rslt: result2output CM PM B (result/expr (reftype/ nn/yes C G) (env/ U M0)) Out}
    {MG: make-tgts-and-caps M0 G F X G1 M2}
    {X2Q: cap2frac X Q}
    {CM-RSLT: clsmap-result CM B (result/expr (reftype/ nn/yes C G) (env/ U M0))}
    exists {Pi1} {Pi2} {Pi3} {PiU} {TF}
    {FT=>TF: ty2perm PM (ty/ NN A FC) TF}
    {B=>Pi1: cxt2perm CM PM B Pi1}
    {U=>PiU: uobjset2perm CM PM B U PiU}
    {REE: read-format CM PM B G1 M2 Pi2 Pi3 Q}
    {TRANS: transform Out
            (output/exists [r]
              (output/expr r
                (combine PiU
                  (combine Pi1
                    (combine (ffperm Q r F TF)
                      (combine
                        (unitperm (encumbered (ffperm Q r F TF) Pi2)) Pi3))))))}
    true.

- : before-read CM-CM CM2PM CML FML XX=>Rslt
    MG X2Q (clsmap-result/expr CM-B-RT _ CM-B-XX) _ _ _ _ _ T2TF B=>Pi1 U=>PiU BWE TRANS
    <- before-read/unique CM-CM CM2PM CML FML XX=>Rslt
      MG X2Q CM-B-RT CM-B-XX _ _ _ _ _ T2TF B=>Pi1 U=>PiU BWE TRANS.

- : before-read CM-CM CM2PM CML FML XX=>Rslt (make-tgts-and-caps/shared SP) X2Q
    (clsmap-result/expr CM-B-G _ CM-B-XX) %{=>}% _ _ _ _ _ T2TF B=>Pi3 U=>PiU
    (read-format/ (capmap`size/+ capmap`size/0)
      M1=>Pi1 M0=>Pi0
      (capmap-min/U capmap-min/0 MX capmap`update/0
        capmap`fresh/0) (X2Q:cap2frac EX Q)) TRANS
    <- before-read/shared CM-CM CM2PM CML FML SP X2Q XX=>Rslt
      %{=>}% _ _ _ _ _ T2TF B=>Pi3 U=>PiU M1=>Pi1 M0=>Pi0 TRANS
    <- cap/write-is-upper-bound _ MX.

%worlds (objvar) (before-read _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total {} (before-read _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).


% read-result-format : clsmap -> nat -> cap -> expr-result -> type.

% read-result-format/base :
%     clsmap`lookup CM C FM ->
%     fldmap`lookup FM F (ty/ NN A FC) ->
%     make-tgts-and-caps M0 G F X G1 M2 ->
%   read-result-format CM F X (result/expr (reftype/ nn/yes C G) (env/ B M0)).

% read-result-format/exists :
%     ({x} read-result-format CM F X (Rslt x)) ->
%   read-result-format CM F X (result/exists [x] (Rslt x)).


% read-format-new : clsmap -> predmap -> cxt -> nat -> expr-result -> expr-output -> type.

% read-format-new/base :
%     make-tgts-and-caps M0 G F X G1 M2 ->
%     cap2frac X Q ->
%     clsmap`lookup CM C FM ->
%     fldmap`lookup FM F (ty/ NN A FC) ->
%     ty2perm PM (ty/ NN A FC) TF ->
%     cxt2perm CM PM B Pi1 ->
%     uobjset2perm CM PM B U PiU ->
%     read-format CM PM B G1 M2 Pi2 Pi3 Q ->
%   read-format-new CM PM B F (result/expr (reftype/ nn/yes C G) (env/ U M0))
%       (output/exists [r]
%         (output/expr r
%           (combine Pi1
%             (combine PiU
%               (combine (ffperm Q r F TF)
%                 (combine
%                   (unitperm (encumbered (ffperm Q r F TF) Pi2)) Pi3)))))).

% read-format-new/exists :
%     ({x} read-format-new CM PM B F (Rslt x) (Out x)) ->
%   read-format-new CM PM B F (result/exists [x] (Rslt x)) (output/exists [x] (Out x)).


% %theorem before-read/new
%   : forall* {CM} {PM} {F} {Out} {Rslt} {X} {B}
%     forall {CM-CM: clsmap-clsmap CM CM}
%     {CM2PM: clsmap2predmap CM PM}
%     {CM-RSLT: clsmap-result CM B Rslt}
%     {RTYP-HELPER: read-result-format CM F X Rslt}
%     {XX=>Rslt: result2output CM PM B Rslt Out}
%     exists {Out2} {TRANS: transform Out Out2}
%     {R-FMT-NEW: read-format-new CM PM B F Rslt Out2}
%     true.

% - : before-read/new CM-CM CM2PM CM-Rslt
%     (read-result-format/base CML FML MG) Rslt=>Out _ TRANS
%     (read-format-new/base MG X2Q CML FML T2PF B2P U2P R-FMT)
%     <- cap2frac-total X2Q
%     <- before-read CM-CM CM2PM CML FML Rslt=>Out MG X2Q CM-Rslt
%       _ _ _ _ _ T2PF B2P U2P R-FMT TRANS.

% - : before-read/new CM-CM CM2PM (clsmap-result/exists ([x] CM-Rslt x))
%     (read-result-format/exists ([x] RRF x))
%     (result2output/exists ([x] Rslt=>Out x)) _
%     (transform/inside [x] (TRANS x))
%     (read-format-new/exists ([x] R-FMT-NEW x))
%     <- ({x} before-read/new CM-CM CM2PM
%          (CM-Rslt x) (RRF x) (Rslt=>Out x) _ (TRANS x) (R-FMT-NEW x)).

% %worlds (objvar) (before-read/new _ _ _ _ _ _ _ _).
% %total (K) (before-read/new _ _ _ K _ _ _ _).